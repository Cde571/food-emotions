---
// src/pages/Explore.astro
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
---

<Layout title="Explorar">
  <Navigation />

  <div class="explore-container">
    <div class="explore-header">
      <h1>Explorar</h1>
      <div class="search-bar-large">
        <svg class="search-icon" viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
        <input 
          type="text" 
          id="explore-search" 
          placeholder="Buscar personas, hashtags, lugares..." 
        />
      </div>
    </div>

    <div class="explore-tabs">
      <button class="explore-tab active" data-tab="trending">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
          <polyline points="17 6 23 6 23 12"/>
        </svg>
        Tendencias
      </button>
      <button class="explore-tab" data-tab="people">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M17 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
          <circle cx="9" cy="7" r="4"/>
          <path d="M23 21v-2a4 4 0 00-3-3.87"/>
          <path d="M16 3.13a4 4 0 010 7.75"/>
        </svg>
        Personas
      </button>
      <button class="explore-tab" data-tab="tags">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82z"/>
          <line x1="7" y1="7" x2="7.01" y2="7"/>
        </svg>
        Hashtags
      </button>
      <button class="explore-tab" data-tab="places">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0118 0z"/>
          <circle cx="12" cy="10" r="3"/>
        </svg>
        Lugares
      </button>
    </div>

    <div id="explore-content" class="explore-content">
      <!-- Trending Posts Grid -->
      <div id="trending-section" class="content-section">
        <div class="section-header">
          <h2>üî• Publicaciones Populares</h2>
          <select id="trending-filter" class="filter-select">
            <option value="today">Hoy</option>
            <option value="week">Esta semana</option>
            <option value="month">Este mes</option>
            <option value="all">Todo el tiempo</option>
          </select>
        </div>
        <div id="posts-grid" class="posts-masonry">
          <div class="loading-grid">
            <div class="spinner"></div>
            <p>Cargando publicaciones...</p>
          </div>
        </div>
      </div>

      <!-- People Section -->
      <div id="people-section" class="content-section hidden">
        <div class="section-header">
          <h2>üë• Personas que podr√≠as conocer</h2>
        </div>
        <div id="people-grid" class="people-grid"></div>
      </div>

      <!-- Tags Section -->
      <div id="tags-section" class="content-section hidden">
        <div class="section-header">
          <h2>#Ô∏è‚É£ Hashtags Populares</h2>
        </div>
        <div id="tags-grid" class="tags-grid"></div>
      </div>

      <!-- Places Section -->
      <div id="places-section" class="content-section hidden">
        <div class="section-header">
          <h2>üìç Lugares Populares</h2>
        </div>
        <div id="places-grid" class="places-grid"></div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const token = localStorage.getItem('authToken');
  let currentTab = 'trending';

  // Cargar contenido trending
  async function loadTrending(filter = 'today') {
    try {
      const response = await fetch(`/api/posts/trending?filter=${filter}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const posts = await response.json();

      const grid = document.getElementById('posts-grid');
      
      if (posts.length === 0) {
        grid.innerHTML = '<div class="empty-msg">No hay publicaciones trending</div>';
        return;
      }

      grid.innerHTML = posts.map(post => `
        <div class="masonry-item" onclick="window.location.href='/Post/${post._id}'">
          <img src="${post.images[0]}" alt="Post" loading="lazy" />
          <div class="masonry-overlay">
            <div class="overlay-stats">
              <span>
                <svg viewBox="0 0 24 24" width="18" height="18" fill="white">
                  <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"/>
                </svg>
                ${formatNumber(post.likes.length)}
              </span>
              <span>
                <svg viewBox="0 0 24 24" width="18" height="18" fill="white">
                  <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
                </svg>
                ${formatNumber(post.comments.length)}
              </span>
            </div>
            ${post.caption ? `<p class="overlay-caption">${truncate(post.caption, 80)}</p>` : ''}
          </div>
        </div>
      `).join('');

    } catch (error) {
      console.error('Error:', error);
    }
  }

  // Cargar personas
  async function loadPeople() {
    try {
      const response = await fetch('/api/users/suggestions', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const users = await response.json();

      const grid = document.getElementById('people-grid');
      grid.innerHTML = users.map(user => `
        <div class="user-card">
          <img src="${user.profilePic || `https://ui-avatars.com/api/?name=${user.username}`}" 
               alt="${user.username}" 
               class="user-card-avatar" />
          <div class="user-card-info">
            <h3>${user.username}</h3>
            <p>${user.bio || 'Sin biograf√≠a'}</p>
            <div class="user-stats">
              <span>${formatNumber(user.stats?.followers || 0)} seguidores</span>
              <span>${formatNumber(user.stats?.posts || 0)} posts</span>
            </div>
          </div>
          <button class="follow-user-btn" data-user-id="${user._id}">
            Seguir
          </button>
        </div>
      `).join('');

      // Event listeners para seguir
      document.querySelectorAll('.follow-user-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
          try {
            await fetch(`/api/users/${btn.dataset.userId}/follow`, {
              method: 'POST',
              headers: { 'Authorization': `Bearer ${token}` }
            });
            btn.textContent = 'Siguiendo';
            btn.disabled = true;
            btn.style.background = '#10b981';
          } catch (error) {
            console.error('Error:', error);
          }
        });
      });

    } catch (error) {
      console.error('Error:', error);
    }
  }

  // Cargar hashtags
  async function loadTags() {
    try {
      const response = await fetch('/api/tags/trending', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const tags = await response.json();

      const grid = document.getElementById('tags-grid');
      grid.innerHTML = tags.map((tag, index) => `
        <div class="tag-card" onclick="window.location.href='/explore/tags/${tag.name}'">
          <div class="tag-rank">#${index + 1}</div>
          <div class="tag-content">
            <h3>#${tag.name}</h3>
            <p>${formatNumber(tag.count)} publicaciones</p>
            <div class="tag-preview">
              ${tag.preview.slice(0, 3).map(img => `
                <img src="${img}" alt="Preview" />
              `).join('')}
            </div>
          </div>
        </div>
      `).join('');

    } catch (error) {
      console.error('Error:', error);
    }
  }

  // Cargar lugares
  async function loadPlaces() {
    try {
      const response = await fetch('/api/places/popular', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const places = await response.json();

      const grid = document.getElementById('places-grid');
      grid.innerHTML = places.map(place => `
        <div class="place-card" onclick="window.location.href='/explore/places/${place.id}'">
          <img src="${place.thumbnail}" alt="${place.name}" class="place-thumbnail" />
          <div class="place-info">
            <h3>${place.name}</h3>
            <p>üìç ${place.location}</p>
            <span class="place-count">${formatNumber(place.posts)} publicaciones</span>
          </div>
        </div>
      `).join('');

    } catch (error) {
      console.error('Error:', error);
    }
  }

  // Cambiar tabs
  document.querySelectorAll('.explore-tab').forEach(tab => {
    tab.addEventListener('click', () => {
      document.querySelectorAll('.explore-tab').forEach(t => t.classList.remove('active'));
      tab.classList.add('active');

      const tabName = tab.dataset.tab;
      currentTab = tabName;

      // Ocultar todas las secciones
      document.querySelectorAll('.content-section').forEach(s => s.classList.add('hidden'));

      // Mostrar secci√≥n correspondiente
      const section = document.getElementById(`${tabName}-section`);
      section.classList.remove('hidden');

      // Cargar contenido si no est√° cargado
      switch (tabName) {
        case 'trending':
          if (!document.getElementById('posts-grid').querySelector('.masonry-item')) {
            loadTrending();
          }
          break;
        case 'people':
          if (!document.getElementById('people-grid').innerHTML) {
            loadPeople();
          }
          break;
        case 'tags':
          if (!document.getElementById('tags-grid').innerHTML) {
            loadTags();
          }
          break;
        case 'places':
          if (!document.getElementById('places-grid').innerHTML) {
            loadPlaces();
          }
          break;
      }
    });
  });

  // Filtro trending
  document.getElementById('trending-filter')?.addEventListener('change', (e) => {
    loadTrending(e.target.value);
  });

  // B√∫squeda
  let searchTimeout;
  document.getElementById('explore-search')?.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    const query = e.target.value.trim();

    if (query.length < 2) return;

    searchTimeout = setTimeout(async () => {
      try {
        const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const results = await response.json();

        // Mostrar resultados
        console.log('Resultados:', results);
        // Implementar UI de resultados
      } catch (error) {
        console.error('Error:', error);
      }
    }, 500);
  });

  // Utilidades
  function formatNumber(num) {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
  }

  function truncate(text, length) {
    return text.length > length ? text.substring(0, length) + '...' : text;
  }

  // Inicializar
  loadTrending();
</script>

<style>
  :root {
    --primary: #667BC6;
    --secondary: #DA7297;
    --dark: #2d2d2d;
    --gray: #6b7280;
    --gray-light: #f3f4f6;
    --border: #e5e7eb;
    --card-bg: #ffffff;
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --radius: 12px;
  }

  .explore-container {
    max-width: 1200px;
    margin: 90px auto 40px;
    padding: 0 24px;
  }

  .explore-header {
    margin-bottom: 32px;
  }

  .explore-header h1 {
    font-size: 32px;
    font-weight: 700;
    color: var(--dark);
    margin-bottom: 20px;
  }

  .search-bar-large {
    position: relative;
    max-width: 600px;
  }

  .search-icon {
    position: absolute;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gray);
  }

  #explore-search {
    width: 100%;
    padding: 16px 20px 16px 56px;
    border: 2px solid var(--border);
    border-radius: 50px;
    font-size: 16px;
    background: white;
    transition: all 0.2s;
  }

  #explore-search:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 4px rgba(102, 123, 198, 0.1);
  }

  .explore-tabs {
    display: flex;
    gap: 12px;
    margin-bottom: 32px;
    overflow-x: auto;
    scrollbar-width: none;
  }

  .explore-tabs::-webkit-scrollbar {
    display: none;
  }

  .explore-tab {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    background: white;
    border: 2px solid var(--border);
    border-radius: 50px;
    font-size: 15px;
    font-weight: 600;
    color: var(--gray);
    cursor: pointer;
    white-space: nowrap;
    transition: all 0.2s;
  }

  .explore-tab:hover {
    border-color: var(--primary);
    color: var(--dark);
  }

  .explore-tab.active {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    border-color: transparent;
    color: white;
  }

  .content-section {
    animation: fadeIn 0.4s ease;
  }

  .content-section.hidden {
    display: none;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
  }

  .section-header h2 {
    font-size: 24px;
    font-weight: 700;
    color: var(--dark);
  }

  .filter-select {
    padding: 10px 16px;
    border: 1px solid var(--border);
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    background: white;
    cursor: pointer;
    outline: none;
    transition: all 0.2s;
  }

  .filter-select:hover {
    border-color: var(--primary);
  }

  /* Posts Masonry Grid */
  .posts-masonry {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
  }

  .masonry-item {
    position: relative;
    aspect-ratio: 1;
    border-radius: var(--radius);
    overflow: hidden;
    cursor: pointer;
    transition: all 0.3s;
  }

  .masonry-item:hover {
    transform: scale(1.03);
    box-shadow: var(--shadow-md);
  }

  .masonry-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .masonry-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to bottom, transparent 0%, rgba(0,0,0,0.7) 100%);
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    padding: 16px;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .masonry-item:hover .masonry-overlay {
    opacity: 1;
  }

  .overlay-stats {
    display: flex;
    gap: 16px;
    margin-bottom: 8px;
  }

  .overlay-stats span {
    display: flex;
    align-items: center;
    gap: 6px;
    color: white;
    font-weight: 600;
    font-size: 14px;
  }

  .overlay-caption {
    color: white;
    font-size: 13px;
    line-height: 1.4;
    margin: 0;
  }

  /* People Grid */
  .people-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
  }

  .user-card {
    background: white;
    border-radius: var(--radius);
    padding: 24px;
    box-shadow: var(--shadow-sm);
    text-align: center;
    transition: all 0.3s;
  }

  .user-card:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-4px);
  }

  .user-card-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 16px;
    border: 3px solid var(--primary);
  }

  .user-card-info h3 {
    font-size: 18px;
    font-weight: 700;
    color: var(--dark);
    margin: 0 0 8px;
  }

  .user-card-info p {
    font-size: 14px;
    color: var(--gray);
    margin: 0 0 12px;
    min-height: 40px;
  }

  .user-stats {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 16px;
    padding-top: 12px;
    border-top: 1px solid var(--border);
  }

  .user-stats span {
    font-size: 13px;
    color: var(--gray);
  }

  .follow-user-btn {
    width: 100%;
    padding: 10px;
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .follow-user-btn:hover {
    transform: scale(1.02);
    box-shadow: var(--shadow-md);
  }

  .follow-user-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* Tags Grid */
  .tags-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 20px;
  }

  .tag-card {
    background: white;
    border-radius: var(--radius);
    padding: 20px;
    box-shadow: var(--shadow-sm);
    display: flex;
    gap: 16px;
    cursor: pointer;
    transition: all 0.3s;
  }

  .tag-card:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
  }

  .tag-rank {
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-weight: 700;
    flex-shrink: 0;
  }

  .tag-content {
    flex: 1;
  }

  .tag-content h3 {
    font-size: 20px;
    font-weight: 700;
    color: var(--primary);
    margin: 0 0 4px;
  }

  .tag-content p {
    font-size: 14px;
    color: var(--gray);
    margin: 0 0 12px;
  }

  .tag-preview {
    display: flex;
    gap: 4px;
  }

  .tag-preview img {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
  }

  /* Places Grid */
  .places-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }

  .place-card {
    background: white;
    border-radius: var(--radius);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    cursor: pointer;
    transition: all 0.3s;
  }

  .place-card:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-4px);
  }

  .place-thumbnail {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .place-info {
    padding: 20px;
  }

  .place-info h3 {
    font-size: 18px;
    font-weight: 700;
    color: var(--dark);
    margin: 0 0 8px;
  }

  .place-info p {
    font-size: 14px;
    color: var(--gray);
    margin: 0 0 12px;
  }

  .place-count {
    display: inline-block;
    padding: 6px 12px;
    background: var(--gray-light);
    border-radius: 20px;
    font-size: 13px;
    font-weight: 600;
    color: var(--gray);
  }

  /* Loading & Empty States */
  .loading-grid {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 80px 20px;
  }

  .spinner {
    width: 48px;
    height: 48px;
    border: 4px solid var(--border);
    border-top-color: var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 16px;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .empty-msg {
    grid-column: 1 / -1;
    text-align: center;
    padding: 80px 20px;
    color: var(--gray);
    font-size: 16px;
  }

  /* Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .explore-container {
      padding: 0 16px;
      margin-top: 70px;
    }

    .explore-header h1 {
      font-size: 26px;
    }

    .posts-masonry,
    .people-grid,
    .tags-grid,
    .places-grid {
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      gap: 12px;
    }

    .user-card {
      padding: 16px;
    }

    .user-card-avatar {
      width: 60px;
      height: 60px;
    }

    .tag-card {
      flex-direction: column;
      text-align: center;
    }
  }

  @media (max-width: 480px) {
    .posts-masonry {
      grid-template-columns: repeat(2, 1fr);
    }

    .people-grid {
      grid-template-columns: 1fr;
    }

    .tags-grid,
    .places-grid {
      grid-template-columns: 1fr;
    }
  }
</style>