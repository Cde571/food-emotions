---
// src/pages/Notifications.astro
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
---

<Layout title="Notificaciones">
  <Navigation />

  <div class="notifications-container">
    <div class="notifications-wrapper">
      <div class="notifications-header">
        <h1>Notificaciones</h1>
        <div class="header-actions">
          <button id="mark-all-read" class="action-btn">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="20 6 9 17 4 12"/>
            </svg>
            Marcar todas como le√≠das
          </button>
          <button id="filter-btn" class="action-btn">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/>
            </svg>
            Filtrar
          </button>
        </div>
      </div>

      <div class="filter-tabs">
        <button class="filter-tab active" data-filter="all">Todas</button>
        <button class="filter-tab" data-filter="likes">Likes</button>
        <button class="filter-tab" data-filter="comments">Comentarios</button>
        <button class="filter-tab" data-filter="follows">Seguidores</button>
        <button class="filter-tab" data-filter="mentions">Menciones</button>
      </div>

      <div id="notifications-list" class="notifications-list">
        <div class="loading-container">
          <div class="spinner"></div>
          <p>Cargando notificaciones...</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import socketClient from '../scripts/websocket/socketClient.js';

  const API_URL = 'http://localhost:3000';
  let currentFilter = 'all';

  // ============================================================
  // üîî CARGAR NOTIFICACIONES
  // ============================================================
  async function loadNotifications(filter = 'all') {
    const list = document.getElementById('notifications-list');
    list.innerHTML = `
      <div class="loading-container">
        <div class="spinner"></div>
        <p>Cargando notificaciones...</p>
      </div>
    `;

    try {
      const res = await fetch(`${API_URL}/api/notifications?filter=${filter}`, {
        credentials: 'include'
      });
      if (!res.ok) throw new Error('Error al cargar notificaciones');
      const notifications = await res.json();

      if (!notifications.length) {
        list.innerHTML = `
          <div class="empty-state">
            <svg viewBox="0 0 24 24" width="64" height="64" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M18 8A6 6 0 006 8c0 7-3 9-3 9h18s-3-2-3-9"/>
              <path d="M13.73 21a2 2 0 01-3.46 0"/>
            </svg>
            <h3>No tienes notificaciones</h3>
            <p>Cuando alguien interact√∫e con tu contenido, lo ver√°s aqu√≠</p>
          </div>`;
        return;
      }

      list.innerHTML = notifications.map(n => createNotificationItem(n)).join('');

      // Listeners din√°micos
      list.querySelectorAll('.notification-item').forEach(item => {
        item.addEventListener('click', () =>
          handleNotificationClick(item.dataset.id, item.dataset.type, item.dataset.target)
        );
      });

      list.querySelectorAll('.delete-notif-btn').forEach(btn => {
        btn.addEventListener('click', e => {
          e.stopPropagation();
          deleteNotification(btn.dataset.id);
        });
      });

    } catch (err) {
      console.error('‚ùå Error:', err);
      list.innerHTML = `
        <div class="error-state">
          <p>Error al cargar notificaciones</p>
          <button onclick="loadNotifications()">Reintentar</button>
        </div>`;
    }
  }

  // ============================================================
  // üß± CREAR ITEM DE NOTIFICACI√ìN
  // ============================================================
  function createNotificationItem(n) {
    const icons = { like: '‚ù§Ô∏è', comment: 'üí¨', follow: 'üë§', mention: '@' };
    const messages = {
      like: 'le gust√≥ tu publicaci√≥n',
      comment: 'coment√≥ en tu publicaci√≥n',
      follow: 'comenz√≥ a seguirte',
      mention: 'te mencion√≥ en una publicaci√≥n'
    };

    return `
      <div class="notification-item ${n.isRead ? 'read' : 'unread'}"
           data-id="${n._id}"
           data-type="${n.type}"
           data-target="${n.post?._id || n.sender._id}">
        <div class="notif-icon ${n.type}">${icons[n.type] || 'üîî'}</div>
        <img src="${n.sender.profilePic || `https://ui-avatars.com/api/?name=${encodeURIComponent(n.sender.username)}`}" 
             alt="${n.sender.username}" class="notif-avatar" />
        <div class="notif-content">
          <p class="notif-text"><strong>${n.sender.username}</strong> ${messages[n.type] || ''}</p>
          <span class="notif-time">${formatTime(n.createdAt)}</span>
        </div>
        ${n.post?.images?.[0] ? `<img src="${n.post.images[0]}" alt="Post" class="notif-thumbnail" />` : ''}
        ${!n.isRead ? '<div class="unread-dot"></div>' : ''}
        <button class="delete-notif-btn" data-id="${n._id}" title="Eliminar">
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      </div>`;
  }

  // ============================================================
  // üìç MANEJAR CLIC EN NOTIFICACI√ìN
  // ============================================================
  async function handleNotificationClick(id, type, targetId) {
    try {
      await fetch(`${API_URL}/api/notifications/${id}/read`, {
        method: 'PATCH',
        credentials: 'include'
      });

      switch (type) {
        case 'like':
        case 'comment':
        case 'mention':
          window.location.href = `/Post/${targetId}`;
          break;
        case 'follow':
          window.location.href = `/Profile/${targetId}`;
          break;
        default:
          console.log('Tipo no manejado:', type);
      }
    } catch (err) {
      console.error('‚ùå Error al abrir notificaci√≥n:', err);
    }
  }

  // ============================================================
  // ‚ùå ELIMINAR NOTIFICACI√ìN
  // ============================================================
  async function deleteNotification(id) {
    try {
      const res = await fetch(`${API_URL}/api/notifications/${id}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      if (!res.ok) throw new Error('Error al eliminar');
      document.querySelector(`[data-id="${id}"]`)?.remove();
    } catch (err) {
      console.error('‚ùå Error al eliminar notificaci√≥n:', err);
    }
  }

  // ============================================================
  // ‚úÖ MARCAR TODAS COMO LE√çDAS
  // ============================================================
  document.getElementById('mark-all-read')?.addEventListener('click', async () => {
    try {
      await fetch(`${API_URL}/api/notifications/mark-read`, {
        method: 'POST',
        credentials: 'include'
      });

      document.querySelectorAll('.notification-item.unread').forEach(item => {
        item.classList.remove('unread');
        item.classList.add('read');
        item.querySelector('.unread-dot')?.remove();
      });

      const badge = document.getElementById('notif-badge-nav');
      if (badge) {
        badge.textContent = '0';
        badge.classList.add('hidden');
      }
    } catch (err) {
      console.error('‚ùå Error al marcar todas como le√≠das:', err);
    }
  });

  // ============================================================
  // üéõÔ∏è FILTROS
  // ============================================================
  document.querySelectorAll('.filter-tab').forEach(tab => {
    tab.addEventListener('click', () => {
      document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      currentFilter = tab.dataset.filter;
      loadNotifications(currentFilter);
    });
  });

  // ============================================================
  // üïí FORMATEAR TIEMPO
  // ============================================================
  function formatTime(ts) {
    const now = new Date();
    const date = new Date(ts);
    const diff = now - date;
    const mins = Math.floor(diff / 60000);
    const hrs = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    if (mins < 1) return 'Ahora mismo';
    if (mins < 60) return `Hace ${mins}m`;
    if (hrs < 24) return `Hace ${hrs}h`;
    if (days < 7) return `Hace ${days}d`;
    return date.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' });
  }

  // ============================================================
  // üîå SOCKET TIEMPO REAL
  // ============================================================
  socketClient.on('notification', notif => {
    const list = document.getElementById('notifications-list');
    const empty = list.querySelector('.empty-state');
    if (empty) list.innerHTML = '';
    list.insertAdjacentHTML('afterbegin', createNotificationItem(notif));
  });

  // ============================================================
  // üöÄ INICIALIZAR
  // ============================================================
  document.addEventListener('DOMContentLoaded', () => {
    loadNotifications();
  });
</script>

<style>
  :root {
    --primary: #667BC6;
    --secondary: #DA7297;
    --dark: #2d2d2d;
    --gray: #6b7280;
    --gray-light: #f3f4f6;
    --border: #e5e7eb;
    --success: #10b981;
    --error: #ef4444;
    --warning: #f59e0b;
    --card-bg: #ffffff;
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --radius: 12px;
  }

  .notifications-container {
    max-width: 800px;
    margin: 90px auto 40px;
    padding: 0 24px;
  }

  .notifications-wrapper {
    background: var(--card-bg);
    border-radius: var(--radius);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
  }

  .notifications-header {
    padding: 24px;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 16px;
  }

  .notifications-header h1 {
    font-size: 28px;
    font-weight: 700;
    color: var(--dark);
    margin: 0;
  }

  .header-actions {
    display: flex;
    gap: 12px;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    background: var(--gray-light);
    border: 1px solid var(--border);
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    color: var(--gray);
    cursor: pointer;
    transition: all 0.2s;
  }

  .action-btn:hover {
    background: white;
    border-color: var(--primary);
    color: var(--primary);
  }

  .filter-tabs {
    display: flex;
    gap: 8px;
    padding: 16px 24px;
    border-bottom: 1px solid var(--border);
    overflow-x: auto;
    scrollbar-width: none;
  }

  .filter-tabs::-webkit-scrollbar {
    display: none;
  }

  .filter-tab {
    padding: 8px 16px;
    background: none;
    border: none;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    color: var(--gray);
    cursor: pointer;
    white-space: nowrap;
    transition: all 0.2s;
  }

  .filter-tab:hover {
    background: var(--gray-light);
    color: var(--dark);
  }

  .filter-tab.active {
    background: var(--primary);
    color: white;
  }

  .notifications-list {
    min-height: 400px;
  }

  .notification-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px 24px;
    border-bottom: 1px solid var(--border);
    cursor: pointer;
    position: relative;
    transition: all 0.2s;
  }

  .notification-item:last-child {
    border-bottom: none;
  }

  .notification-item:hover {
    background: var(--gray-light);
  }

  .notification-item.unread {
    background: rgba(102, 123, 198, 0.05);
  }

  .notif-icon {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    flex-shrink: 0;
  }

  .notif-icon.like {
    background: #fee2e2;
  }

  .notif-icon.comment {
    background: #dbeafe;
  }

  .notif-icon.follow {
    background: #dcfce7;
  }

  .notif-icon.mention {
    background: #fef3c7;
  }

  :global(.notif-avatar) {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
  }

  :global(.notif-content) {
    flex: 1;
    min-width: 0;
  }

  :global(.notif-text) {
    font-size: 15px;
    color: var(--dark);
    margin: 0 0 4px;
  }

  .notif-text strong {
    font-weight: 600;
  }

  .notif-time {
    font-size: 13px;
    color: var(--gray);
  }

  .notif-thumbnail {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    object-fit: cover;
    flex-shrink: 0;
  }

  .unread-dot {
    width: 10px;
    height: 10px;
    background: var(--primary);
    border-radius: 50%;
    flex-shrink: 0;
  }

  .delete-notif-btn {
    width: 32px;
    height: 32px;
    border: none;
    background: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--gray);
    opacity: 0;
    transition: all 0.2s;
  }

  .notification-item:hover .delete-notif-btn {
    opacity: 1;
  }

  .delete-notif-btn:hover {
    background: var(--error);
    color: white;
  }

  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 80px 20px;
  }

  .spinner {
    width: 48px;
    height: 48px;
    border: 4px solid var(--border);
    border-top-color: var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 16px;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .empty-state {
    text-align: center;
    padding: 80px 40px;
    color: var(--gray);
  }

  .empty-state svg {
    margin-bottom: 20px;
  }

  .empty-state h3 {
    font-size: 20px;
    font-weight: 700;
    color: var(--dark);
    margin: 0 0 8px;
  }

  .empty-state p {
    font-size: 15px;
    margin: 0;
  }

  .error-state {
    text-align: center;
    padding: 80px 40px;
  }

  .error-state p {
    color: var(--error);
    font-size: 16px;
    margin-bottom: 16px;
  }

  .error-state button {
    padding: 10px 20px;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .error-state button:hover {
    background: var(--primary);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  @media (max-width: 640px) {
    .notifications-container {
      padding: 0;
      margin-top: 70px;
    }

    .notifications-wrapper {
      border-radius: 0;
    }

    .notifications-header {
      padding: 16px;
    }

    .notifications-header h1 {
      font-size: 22px;
    }

    .header-actions {
      width: 100%;
    }

    .action-btn {
      flex: 1;
      justify-content: center;
      font-size: 13px;
      padding: 8px 12px;
    }

    .filter-tabs {
      padding: 12px 16px;
    }

    .notification-item {
      padding: 12px 16px;
    }

    .notif-thumbnail {
      display: none;
    }
  }
</style>