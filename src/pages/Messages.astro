---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
---

<Layout title="Mensajes">
  <Navigation />
  
  <div class="messages-layout">
    <!-- Sidebar de conversaciones -->
    <aside class="conversations-sidebar">
      <div class="sidebar-header">
        <h2 class="sidebar-title">Mensajes</h2>
        <button class="new-message-btn" id="new-message-btn" title="Nuevo mensaje">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 5v14M5 12h14"/>
          </svg>
        </button>
      </div>

      <div class="search-wrapper">
        <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" class="search-icon">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
        <input 
          type="text" 
          id="search-conversations" 
          class="search-input" 
          placeholder="Buscar conversaciones..."
        />
      </div>

      <div class="conversations-list" id="conversations-list">
        <div class="loading-conversations">
          <div class="loader-small"></div>
          <p>Cargando conversaciones...</p>
        </div>
      </div>
    </aside>

    <!-- Área de chat -->
    <main class="chat-area">
      <div class="empty-chat" id="empty-chat">
        <div class="empty-chat-content">
          <div class="empty-chat-icon">
            <svg viewBox="0 0 24 24" width="80" height="80" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
              <path d="M9 10h6M9 14h4" stroke-linecap="round"/>
            </svg>
          </div>
          <h3>Tus Mensajes</h3>
          <p>Selecciona una conversación o inicia un nuevo chat</p>
        </div>
      </div>

      <div class="active-chat hidden" id="active-chat">
        <!-- Header del chat -->
        <div class="chat-header">
          <div class="chat-user-info">
            <button class="back-btn" id="back-btn">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M19 12H5M12 19l-7-7 7-7"/>
              </svg>
            </button>
            <div class="chat-avatar-wrapper">
              <img id="chat-avatar" src="" alt="" class="chat-avatar" />
              <span class="online-indicator"></span>
            </div>
            <div class="chat-details">
              <h3 id="chat-name" class="chat-name">Usuario</h3>
              <span id="chat-status" class="chat-status">
                <span class="status-dot"></span>
                En línea
              </span>
            </div>
          </div>
          <div class="chat-actions">
            <button class="chat-action-btn" id="audio-call-btn" title="Llamar">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
              </svg>
            </button>
            <button class="chat-action-btn" id="video-call-btn" title="Video llamada">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="23 7 16 12 23 17 23 7"/>
                <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
              </svg>
            </button>
            <button class="chat-action-btn" id="chat-menu-btn" title="Más opciones">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                <circle cx="12" cy="5" r="2"/>
                <circle cx="12" cy="12" r="2"/>
                <circle cx="12" cy="19" r="2"/>
              </svg>
            </button>
          </div>
        </div>

        <!-- Mensajes -->
        <div class="messages-container" id="messages-container">
          <div class="messages-list" id="messages-list">
            <!-- Los mensajes se cargarán aquí -->
          </div>
        </div>

        <!-- Input de mensaje -->
        <div class="message-input-wrapper">
          <button class="attach-btn" id="attach-btn" title="Adjuntar archivo">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21.44 11.05l-9.19 9.19a6 6 0 01-8.49-8.49l9.19-9.19a4 4 0 015.66 5.66l-9.2 9.19a2 2 0 01-2.83-2.83l8.49-8.48"/>
            </svg>
          </button>
          <input type="file" id="file-input" style="display: none;" multiple accept="image/*,video/*,.pdf,.doc,.docx" />
          <div class="input-container">
            <input 
              type="text" 
              id="message-input" 
              class="message-input" 
              placeholder="Escribe un mensaje..."
            />
            <button class="emoji-btn" id="emoji-btn" title="Emoji">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"/>
                <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
                <line x1="9" y1="9" x2="9.01" y2="9"/>
                <line x1="15" y1="9" x2="15.01" y2="9"/>
              </svg>
            </button>
          </div>
          <button class="send-btn" id="send-btn">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/>
            </svg>
          </button>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal de nuevo mensaje -->
  <div class="modal-overlay hidden" id="new-message-modal">
    <div class="modal-container">
      <div class="modal-header">
        <h3>Nuevo Mensaje</h3>
        <button class="modal-close" id="close-new-message">
          <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <input 
          type="text" 
          id="search-users" 
          class="search-users-input" 
          placeholder="Buscar usuarios..."
        />
        <div class="users-list" id="users-list">
          <!-- Lista de usuarios -->
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de emoji picker -->
  <div class="emoji-picker hidden" id="emoji-picker">
    <div class="emoji-grid">
      <span>😀</span><span>😃</span><span>😄</span><span>😁</span><span>😆</span><span>😅</span><span>😂</span><span>🤣</span><span>😊</span><span>😇</span>
      <span>🙂</span><span>🙃</span><span>😉</span><span>😌</span><span>😍</span><span>🥰</span><span>😘</span><span>😗</span><span>😙</span><span>😚</span>
      <span>😋</span><span>😛</span><span>😝</span><span>😜</span><span>🤪</span><span>🤨</span><span>🧐</span><span>🤓</span><span>😎</span><span>🤩</span>
      <span>🥳</span><span>😏</span><span>😒</span><span>😞</span><span>😔</span><span>😟</span><span>😕</span><span>🙁</span><span>☹️</span><span>😣</span>
      <span>😖</span><span>😫</span><span>😩</span><span>🥺</span><span>😢</span><span>😭</span><span>😤</span><span>😠</span><span>😡</span><span>🤬</span>
      <span>👍</span><span>👎</span><span>👏</span><span>🙌</span><span>🤝</span><span>🙏</span><span>💪</span><span>🎉</span><span>🎊</span><span>❤️</span>
      <span>💕</span><span>💖</span><span>💗</span><span>💙</span><span>💚</span><span>💛</span><span>🧡</span><span>💜</span><span>🖤</span><span>🤍</span>
      <span>✅</span><span>❌</span><span>⭐</span><span>🔥</span><span>💯</span><span>🎯</span><span>⚡</span><span>💥</span><span>✨</span><span>🌟</span>
    </div>
  </div>

  <!-- Modal de llamada -->
  <div class="call-modal hidden" id="call-modal">
    <div class="call-container">
      <div class="call-header">
        <h3 id="call-status">Llamando...</h3>
        <p id="call-user-name">Usuario</p>
      </div>
      <div class="call-avatar-section">
        <img id="call-avatar" src="" alt="" class="call-user-avatar" />
      </div>
      <div class="call-controls">
        <button class="call-control-btn mute-btn" id="mute-btn" title="Silenciar">
          <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/>
            <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
            <line x1="12" y1="19" x2="12" y2="23"/>
            <line x1="8" y1="23" x2="16" y2="23"/>
          </svg>
        </button>
        <button class="call-control-btn end-call-btn" id="end-call-btn" title="Finalizar">
          <svg viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
            <path d="M12 9c3.87 0 7.13 2.35 8.5 5.7l.5 1.3v3.5c0 .28-.22.5-.5.5h-3c-.28 0-.5-.22-.5-.5v-3.5c0-.28.22-.5.5-.5h1.66c-1.16-2.37-3.57-4-6.41-4s-5.25 1.63-6.41 4H8c.28 0 .5.22.5.5v3.5c0 .28-.22.5-.5.5H5c-.28 0-.5-.22-.5-.5v-3.5l.5-1.3C6.37 11.35 9.63 9 12 9z"/>
          </svg>
        </button>
        <button class="call-control-btn video-toggle-btn hidden" id="video-toggle-btn" title="Cámara">
          <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="23 7 16 12 23 17 23 7"/>
            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
          </svg>
        </button>
      </div>
      <video id="local-video" autoplay muted playsinline class="local-video hidden"></video>
      <video id="remote-video" autoplay playsinline class="remote-video hidden"></video>
    </div>
  </div>

  <!-- Toast -->
  <div id="toast" class="toast-notification hidden">
    <div class="toast-content">
      <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2" class="toast-icon">
        <path d="M22 11.08V12a10 10 0 11-5.93-9.14"/>
        <polyline points="22 4 12 14.01 9 11.01"/>
      </svg>
      <p class="toast-message"></p>
    </div>
  </div>
</Layout>

<script>
  import socketClient from '../scripts/websocket/socketClient.js';

  const API_URL = "http://localhost:3000";
  const currentUserId = localStorage.getItem("userId");
  let currentRecipientId = null;
  let currentRecipientUsername = '';
  let conversations = [];
  let currentCallType = null;
  let localStream = null;
  let peerConnection = null;

  console.log('🔌 Socket conectado:', socketClient.connected);
  console.log('👤 Usuario actual:', currentUserId);

  if (currentUserId && socketClient.connected) {
    socketClient.emit('user-connected', currentUserId);
  }

  socketClient.on('connect', () => {
    console.log('✅ Socket conectado exitosamente');
    if (currentUserId) {
      socketClient.emit('user-connected', currentUserId);
    }
  });

  socketClient.on('disconnect', () => {
    console.log('❌ Socket desconectado');
  });

  socketClient.on('error', (error) => {
    console.error('⚠️ Error en socket:', error);
  });

  // Manejadores de llamadas
  socketClient.on('incoming-call', async (data) => {
    const { callerId, callerName, type } = data;
    const answer = confirm(`${callerName} te está llamando. ¿Aceptar ${type === 'video' ? 'videollamada' : 'llamada'}?`);
    
    if (answer) {
      await answerCall(callerId, type);
    } else {
      socketClient.emit('call-rejected', { callerId });
    }
  });

  socketClient.on('call-answered', async (data) => {
    showToast('Llamada aceptada');
  });

  socketClient.on('call-rejected', () => {
    showToast('Llamada rechazada');
    endCall();
  });

  socketClient.on('call-ended', () => {
    showToast('Llamada finalizada');
    endCall();
  });

  async function loadConversations() {
    try {
      const res = await fetch(`${API_URL}/api/messages/conversations`, { credentials: "include" });
      conversations = await res.json();
      const list = document.getElementById("conversations-list");
      list.innerHTML = "";

      if (!conversations || conversations.length === 0) {
        list.innerHTML = `<div class="no-conversations"><p>No tienes conversaciones aún.</p></div>`;
        return;
      }

      conversations.forEach(conv => {
        const { user, lastMessage, timestamp } = conv;
        const item = document.createElement("div");
        item.classList.add("conversation-item");
        item.dataset.userId = user._id;
        
        item.innerHTML = `
          <div class="conversation-avatar-wrapper">
            <img src="${user.profilePic || `https://ui-avatars.com/api/?name=${user.username}&background=667BC6&color=fff`}" 
                 alt="${user.username}" class="conversation-avatar" />
            <span class="online-badge"></span>
          </div>
          <div class="conversation-info">
            <div class="conversation-header">
              <h4 class="conversation-name">${user.username}</h4>
              <span class="conversation-time">${formatTime(timestamp)}</span>
            </div>
            <div class="conversation-preview">
              <p class="last-message">${lastMessage || "Sin mensajes"}</p>
            </div>
          </div>
        `;
        item.addEventListener("click", () => openConversation(user._id, user.username, user.profilePic));
        list.appendChild(item);
      });
    } catch (err) {
      console.error("❌ Error cargando conversaciones:", err);
    }
  }

  async function openConversation(userId, username, avatar) {
    if (currentRecipientId) {
      socketClient.emit('leave-chat', { 
        userId: currentUserId, 
        recipientId: currentRecipientId 
      });
    }

    currentRecipientId = userId;
    currentRecipientUsername = username;
    
    socketClient.emit('join-chat', { 
      userId: currentUserId, 
      recipientId: userId 
    });

    document.getElementById("empty-chat").classList.add("hidden");
    document.getElementById("active-chat").classList.remove("hidden");

    document.querySelectorAll('.conversation-item').forEach(item => {
      item.classList.remove('active');
    });
    document.querySelector(`[data-user-id="${userId}"]`)?.classList.add('active');

    document.getElementById("chat-avatar").src = avatar || `https://ui-avatars.com/api/?name=${username}&background=667BC6&color=fff`;
    document.getElementById("chat-name").textContent = username;
    document.getElementById("chat-status").textContent = "En línea";

    await loadMessages(userId);
  }

  async function loadMessages(userId) {
    try {
      const res = await fetch(`${API_URL}/api/messages/${userId}`, { credentials: "include" });
      const messages = await res.json();

      const container = document.getElementById("messages-list");
      container.innerHTML = "";

      if (messages.length === 0) {
        container.innerHTML = `
          <div class="no-messages">
            <div class="no-messages-icon">
              <svg viewBox="0 0 24 24" width="48" height="48" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
              </svg>
            </div>
            <p>No hay mensajes aún. ¡Inicia la conversación!</p>
          </div>
        `;
        return;
      }

      messages.forEach(msg => {
        const isMine = msg.sender === currentUserId;
        appendMessage(msg.text, isMine, msg.createdAt, msg.senderName, msg._id);
      });

      scrollToBottom();
    } catch (err) {
      console.error("❌ Error cargando mensajes:", err);
    }
  }

  function appendMessage(text, isMine, timestamp = new Date(), senderName = '', messageId = null) {
    const container = document.getElementById("messages-list");
    
    const noMessages = container.querySelector('.no-messages');
    if (noMessages) {
      noMessages.remove();
    }
    
    const div = document.createElement("div");
    div.classList.add("message", isMine ? "mine" : "theirs");
    if (messageId) div.dataset.messageId = messageId;
    
    const avatarUrl = isMine 
      ? `https://ui-avatars.com/api/?name=${localStorage.getItem('username') || 'Tú'}&background=667BC6&color=fff`
      : `https://ui-avatars.com/api/?name=${senderName || currentRecipientUsername}&background=DA7297&color=fff`;
    
    div.innerHTML = `
      ${!isMine ? `<img src="${avatarUrl}" alt="${senderName}" class="message-avatar" />` : ""}
      <div class="message-content">
        <div class="message-bubble">
          <p class="message-text">${escapeHtml(text)}</p>
          ${isMine ? `
            <button class="delete-message-btn" data-message-id="${messageId}" title="Eliminar mensaje">
              <svg viewBox="0 0 24 24" width="14" height="14" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3 6 5 6 21 6"/>
                <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
              </svg>
            </button>
          ` : ''}
        </div>
        <span class="message-time">${formatMessageTime(timestamp)}</span>
      </div>
      ${isMine ? `<img src="${avatarUrl}" alt="Tú" class="message-avatar" />` : ""}
    `;
    
    container.appendChild(div);

    if (isMine && messageId) {
      const deleteBtn = div.querySelector('.delete-message-btn');
      deleteBtn?.addEventListener('click', () => deleteMessage(messageId));
    }
  }

  socketClient.on('new-message', (msg) => {
    console.log('📩 Mensaje recibido:', msg);
    
    const isForMe = msg.recipientId === currentUserId || msg.recipient === currentUserId;
    const isFromCurrentChat = msg.senderId === currentRecipientId || msg.sender === currentRecipientId;
    
    if (isForMe && isFromCurrentChat) {
      appendMessage(msg.text, false, msg.createdAt, msg.senderName || 'Usuario', msg._id);
      scrollToBottom();
      loadConversations();
    } else if (isForMe) {
      loadConversations();
      showToast(`Nuevo mensaje de ${msg.senderName || 'Usuario'}`);
    }
  });

  socketClient.on('message-deleted', (data) => {
    console.log('🗑️ Mensaje eliminado:', data);
    const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
    if (messageElement) {
      messageElement.style.animation = 'fadeOut 0.3s ease';
      setTimeout(() => messageElement.remove(), 300);
    }
  });

  socketClient.on('conversation-deleted', (data) => {
    console.log('🗑️ Conversación eliminada:', data);
    if (data.userId1 === currentUserId || data.userId2 === currentUserId) {
      loadConversations();
      if (currentRecipientId === data.userId1 || currentRecipientId === data.userId2) {
        document.getElementById("active-chat").classList.add("hidden");
        document.getElementById("empty-chat").classList.remove("hidden");
        currentRecipientId = null;
        showToast('Conversación eliminada');
      }
    }
  });

  async function sendMessage() {
    const input = document.getElementById("message-input");
    const text = input.value.trim();
    
    if (!text || !currentRecipientId) return;

    try {
      const res = await fetch(`${API_URL}/api/messages/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          sender: currentUserId,
          recipientId: currentRecipientId,
          text
        }),
      });

      if (res.ok) {
        const data = await res.json();
        console.log('✅ Mensaje enviado:', data);
        
        appendMessage(text, true, new Date(), '', data.data._id);
        input.value = "";
        scrollToBottom();
        loadConversations();
      } else {
        console.error('❌ Error en respuesta:', await res.text());
        showToast("Error al enviar el mensaje");
      }
    } catch (err) {
      console.error("❌ Error enviando mensaje:", err);
      showToast("Error al enviar el mensaje");
    }
  }

  async function deleteMessage(messageId) {
    if (!confirm('¿Estás seguro de que quieres eliminar este mensaje?')) return;

    try {
      const res = await fetch(`${API_URL}/api/messages/${messageId}`, {
        method: "DELETE",
        credentials: "include"
      });

      if (res.ok) {
        const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
        if (messageElement) {
          messageElement.style.animation = 'fadeOut 0.3s ease';
          setTimeout(() => messageElement.remove(), 300);
        }
        showToast('Mensaje eliminado');
      } else {
        showToast('Error al eliminar el mensaje');
      }
    } catch (err) {
      console.error("❌ Error eliminando mensaje:", err);
      showToast('Error al eliminar el mensaje');
    }
  }

  async function deleteConversation(userId) {
    if (!confirm('¿Estás seguro de que quieres eliminar toda esta conversación? Esta acción no se puede deshacer.')) return;

    try {
      const res = await fetch(`${API_URL}/api/messages/conversation/${userId}`, {
        method: "DELETE",
        credentials: "include"
      });

      if (res.ok) {
        const data = await res.json();
        showToast(`Conversación eliminada (${data.deletedCount} mensajes)`);
        
        document.getElementById("active-chat").classList.add("hidden");
        document.getElementById("empty-chat").classList.remove("hidden");
        currentRecipientId = null;
        
        loadConversations();
      } else {
        showToast('Error al eliminar la conversación');
      }
    } catch (err) {
      console.error("❌ Error eliminando conversación:", err);
      showToast('Error al eliminar la conversación');
    }
  }

  async function initiateCall(type) {
    if (!currentRecipientId) {
      showToast('Selecciona un usuario para llamar');
      return;
    }

    currentCallType = type;
    
    try {
      const constraints = {
        audio: true,
        video: type === 'video'
      };
      
      localStream = await navigator.mediaDevices.getUserMedia(constraints);
      
      const modal = document.getElementById('call-modal');
      const avatar = document.getElementById('call-avatar');
      const userName = document.getElementById('call-user-name');
      const status = document.getElementById('call-status');
      
      avatar.src = document.getElementById('chat-avatar').src;
      userName.textContent = currentRecipientUsername;
      status.textContent = 'Llamando...';
      modal.classList.remove('hidden');
      
      if (type === 'video') {
        const localVideo = document.getElementById('local-video');
        localVideo.srcObject = localStream;
        localVideo.classList.remove('hidden');
        document.getElementById('video-toggle-btn').classList.remove('hidden');
      }
      
      socketClient.emit('call-initiate', {
        recipientId: currentRecipientId,
        callerId: currentUserId,
        callerName: localStorage.getItem('username') || 'Usuario',
        type
      });
      
    } catch (err) {
      console.error('Error iniciando llamada:', err);
      showToast('No se pudo acceder al micrófono/cámara');
      endCall();
    }
  }

  async function answerCall(callerId, type) {
    currentCallType = type;
    currentRecipientId = callerId;
    
    try {
      const constraints = {
        audio: true,
        video: type === 'video'
      };
      
      localStream = await navigator.mediaDevices.getUserMedia(constraints);
      
      const modal = document.getElementById('call-modal');
      const status = document.getElementById('call-status');
      
      status.textContent = 'Conectado';
      modal.classList.remove('hidden');
      
      if (type === 'video') {
        const localVideo = document.getElementById('local-video');
        localVideo.srcObject = localStream;
        localVideo.classList.remove('hidden');
        document.getElementById('video-toggle-btn').classList.remove('hidden');
      }
      
      socketClient.emit('call-answered', { callerId });
      
    } catch (err) {
      console.error('Error respondiendo llamada:', err);
      showToast('No se pudo acceder al micrófono/cámara');
      socketClient.emit('call-rejected', { callerId });
    }
  }

  function endCall() {
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      localStream = null;
    }
    
    if (peerConnection) {
      peerConnection.close();
      peerConnection = null;
    }
    
    const modal = document.getElementById('call-modal');
    modal.classList.add('hidden');
    
    const localVideo = document.getElementById('local-video');
    const remoteVideo = document.getElementById('remote-video');
    localVideo.classList.add('hidden');
    remoteVideo.classList.add('hidden');
    document.getElementById('video-toggle-btn').classList.add('hidden');
    
    if (currentRecipientId) {
      socketClient.emit('call-ended', { recipientId: currentRecipientId });
    }
    
    currentCallType = null;
  }

  function toggleMute() {
    if (localStream) {
      const audioTrack = localStream.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        const btn = document.getElementById('mute-btn');
        btn.classList.toggle('muted');
        showToast(audioTrack.enabled ? 'Micrófono activado' : 'Micrófono silenciado');
      }
    }
  }

  function toggleVideo() {
    if (localStream) {
      const videoTrack = localStream.getVideoTracks()[0];
      if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled;
        const btn = document.getElementById('video-toggle-btn');
        btn.classList.toggle('video-off');
        showToast(videoTrack.enabled ? 'Cámara activada' : 'Cámara desactivada');
      }
    }
  }

  function scrollToBottom() {
    const container = document.getElementById("messages-container");
    setTimeout(() => {
      container.scrollTop = container.scrollHeight;
    }, 100);
  }

  // Event Listeners
  document.getElementById("search-conversations")?.addEventListener("input", (e) => {
    const q = e.target.value.toLowerCase();
    document.querySelectorAll(".conversation-item").forEach(item => {
      const name = item.querySelector(".conversation-name").textContent.toLowerCase();
      item.style.display = name.includes(q) ? "flex" : "none";
    });
  });

  document.getElementById("send-btn")?.addEventListener("click", sendMessage);
  
  document.getElementById("message-input")?.addEventListener("keypress", e => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  document.getElementById("back-btn")?.addEventListener("click", () => {
    document.getElementById("active-chat").classList.add("hidden");
    document.getElementById("empty-chat").classList.remove("hidden");
    currentRecipientId = null;
  });

  document.getElementById("attach-btn")?.addEventListener("click", () => {
    document.getElementById("file-input").click();
  });

  document.getElementById("file-input")?.addEventListener("change", (e) => {
    const files = e.target.files;
    if (files.length > 0) {
      showToast(`${files.length} archivo(s) seleccionado(s)`);
      console.log('Archivos seleccionados:', files);
    }
  });

  document.getElementById("emoji-btn")?.addEventListener("click", (e) => {
    const picker = document.getElementById("emoji-picker");
    const btn = e.currentTarget;
    const rect = btn.getBoundingClientRect();
    
    picker.style.position = 'fixed';
    picker.style.bottom = `${window.innerHeight - rect.top + 10}px`;
    picker.style.right = `${window.innerWidth - rect.right}px`;
    
    picker.classList.toggle("hidden");
  });

  document.getElementById("emoji-picker")?.addEventListener("click", (e) => {
    if (e.target.tagName === 'SPAN') {
      const input = document.getElementById("message-input");
      input.value += e.target.textContent;
      input.focus();
      document.getElementById("emoji-picker").classList.add("hidden");
    }
  });

  document.addEventListener("click", (e) => {
    const picker = document.getElementById("emoji-picker");
    const emojiBtn = document.getElementById("emoji-btn");
    if (!picker.contains(e.target) && e.target !== emojiBtn && !emojiBtn.contains(e.target)) {
      picker.classList.add("hidden");
    }
  });

  document.getElementById("audio-call-btn")?.addEventListener("click", () => {
    initiateCall('audio');
  });

  document.getElementById("video-call-btn")?.addEventListener("click", () => {
    initiateCall('video');
  });

  document.getElementById("end-call-btn")?.addEventListener("click", endCall);
  document.getElementById("mute-btn")?.addEventListener("click", toggleMute);
  document.getElementById("video-toggle-btn")?.addEventListener("click", toggleVideo);

  document.getElementById("chat-menu-btn")?.addEventListener("click", () => {
    if (currentRecipientId) {
      const menu = document.createElement('div');
      menu.className = 'chat-dropdown-menu';
      menu.innerHTML = `
        <button class="dropdown-item delete-conversation-btn">
          <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="3 6 5 6 21 6"/>
            <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
          </svg>
          Eliminar conversación
        </button>
      `;
      
      const btn = document.getElementById("chat-menu-btn");
      const rect = btn.getBoundingClientRect();
      menu.style.position = 'fixed';
      menu.style.top = `${rect.bottom + 8}px`;
      menu.style.right = `${window.innerWidth - rect.right}px`;
      
      document.body.appendChild(menu);
      
      menu.querySelector('.delete-conversation-btn').addEventListener('click', () => {
        deleteConversation(currentRecipientId);
        menu.remove();
      });
      
      setTimeout(() => {
        document.addEventListener('click', function closeMenu(e) {
          if (!menu.contains(e.target)) {
            menu.remove();
            document.removeEventListener('click', closeMenu);
          }
        });
      }, 100);
    }
  });

  document.getElementById("new-message-btn")?.addEventListener("click", async () => {
    const modal = document.getElementById("new-message-modal");
    modal.classList.remove("hidden");
    
    try {
      const res = await fetch(`${API_URL}/api/users`, { credentials: "include" });
      const users = await res.json();
      const list = document.getElementById("users-list");
      list.innerHTML = "";
      
      users.forEach(user => {
        if (user._id !== currentUserId) {
          const item = document.createElement("div");
          item.className = "user-item";
          item.innerHTML = `
            <img src="${user.profilePic || `https://ui-avatars.com/api/?name=${user.username}&background=667BC6&color=fff`}" 
                 alt="${user.username}" class="user-avatar" />
            <div class="user-info">
              <h4>${user.username}</h4>
              <p>${user.email || 'Usuario'}</p>
            </div>
          `;
          item.addEventListener("click", () => {
            openConversation(user._id, user.username, user.profilePic);
            modal.classList.add("hidden");
          });
          list.appendChild(item);
        }
      });
    } catch (err) {
      console.error("Error cargando usuarios:", err);
    }
  });

  document.getElementById("close-new-message")?.addEventListener("click", () => {
    document.getElementById("new-message-modal").classList.add("hidden");
  });

  document.getElementById("new-message-modal")?.addEventListener("click", (e) => {
    if (e.target.id === "new-message-modal") {
      e.target.classList.add("hidden");
    }
  });

  document.getElementById("search-users")?.addEventListener("input", (e) => {
    const q = e.target.value.toLowerCase();
    document.querySelectorAll(".user-item").forEach(item => {
      const name = item.querySelector("h4").textContent.toLowerCase();
      item.style.display = name.includes(q) ? "flex" : "none";
    });
  });

  function formatTime(ts) {
    const date = new Date(ts);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) return "Ahora";
    if (diff < 3600000) return `${Math.floor(diff / 60000)}m`;
    if (diff < 86400000) return date.toLocaleTimeString("es-ES", { hour: "2-digit", minute: "2-digit" });
    return date.toLocaleDateString("es-ES", { day: "numeric", month: "short" });
  }

  function formatMessageTime(ts) {
    const date = new Date(ts);
    return date.toLocaleTimeString("es-ES", { hour: "2-digit", minute: "2-digit" });
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function showToast(message) {
    const toast = document.getElementById("toast");
    const messageEl = toast.querySelector(".toast-message");
    messageEl.textContent = message;
    toast.classList.remove("hidden");
    setTimeout(() => toast.classList.add("hidden"), 3000);
  }

  loadConversations();
</script>

<style>
:global(:root) {
  --primary: #667BC6;
  --primary-light: #8a9cd9;
  --primary-dark: #5265a3;
  --secondary: #DA7297;
  --secondary-light: #e599b8;
  --dark: #1a1a1a;
  --gray: #6b7280;
  --gray-light: #f8f9fa;
  --border: #e5e7eb;
  --success: #10b981;
  --card-bg: #ffffff;
  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);
  --shadow-lg: 0 10px 30px rgba(0, 0, 0, 0.12);
  --radius: 16px;
  --radius-sm: 10px;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

:global(*) {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:global(body) {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
  background: linear-gradient(135deg, #f5f7fa 0%, #e9ecef 100%);
  color: var(--dark);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow: hidden;
}

/* ===== LAYOUT PRINCIPAL ===== */
:global(.messages-layout) {
  display: grid;
  grid-template-columns: 380px 1fr;
  height: 100vh;
  max-width: 100vw;
  margin: 0 auto;
  background: var(--card-bg);
  overflow: hidden;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

/* ===== SIDEBAR ===== */
:global(.conversations-sidebar) {
  border-right: 1px solid var(--border);
  display: flex;
  flex-direction: column;
  background: linear-gradient(to bottom, #ffffff 0%, #fafbfc 100%);
  position: relative;
  overflow: hidden;
}

:global(.sidebar-header) {
  padding: 20px;
  border-bottom: 1px solid var(--border);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
  color: white;
  flex-shrink: 0;
}

:global(.header-left) {
  display: flex;
  align-items: center;
  gap: 12px;
  flex: 1;
}

:global(.home-btn) {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  border: 2px solid rgba(255, 255, 255, 0.2);
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  position: relative;
  overflow: hidden;
}

:global(.home-btn::before) {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
  opacity: 0;
  transition: var(--transition);
}

:global(.home-btn:hover) {
  transform: translateX(-3px);
  background: rgba(255, 255, 255, 0.25);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

:global(.home-btn:hover::before) {
  opacity: 1;
}

:global(.home-btn:active) {
  transform: translateX(-1px) scale(0.95);
}

:global(.sidebar-title) {
  font-size: 22px;
  font-weight: 800;
  color: white;
  letter-spacing: -0.5px;
}

:global(.new-message-btn) {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
  border: 2px solid rgba(255, 255, 255, 0.3);
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  position: relative;
  overflow: hidden;
}

:global(.new-message-btn::before) {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
  opacity: 0;
  transition: var(--transition);
}

:global(.new-message-btn:hover) {
  transform: scale(1.1) rotate(90deg);
  background: rgba(255, 255, 255, 0.3);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
}

:global(.new-message-btn:hover::before) {
  opacity: 1;
}

:global(.new-message-btn:active) {
  transform: scale(1.05) rotate(90deg);
}

:global(.search-wrapper) {
  padding: 16px;
  border-bottom: 1px solid var(--border);
  position: relative;
  background: white;
  flex-shrink: 0;
}

:global(.search-icon) {
  position: absolute;
  left: 32px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--gray);
  transition: var(--transition);
  z-index: 1;
}

:global(.search-input) {
  width: 100%;
  padding: 12px 16px 12px 44px;
  border: 2px solid transparent;
  border-radius: 12px;
  font-size: 14px;
  outline: none;
  background: var(--gray-light);
  transition: var(--transition);
  font-weight: 500;
}

:global(.search-input:focus) {
  border-color: var(--primary);
  background: white;
  box-shadow: 0 0 0 4px rgba(102, 123, 198, 0.1);
}

:global(.conversations-list) {
  flex: 1;
  overflow-y: auto;
  padding: 8px 0;
  min-height: 0;
}

:global(.loading-conversations) {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  gap: 16px;
}

:global(.loader-small) {
  width: 40px;
  height: 40px;
  border: 4px solid var(--border);
  border-top-color: var(--primary);
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

:global(.loading-conversations p) {
  color: var(--gray);
  font-weight: 500;
}

:global(.conversation-item) {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  margin: 0 8px 4px;
  cursor: pointer;
  transition: var(--transition);
  border-radius: var(--radius-sm);
  position: relative;
  overflow: hidden;
}

:global(.conversation-item::before) {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  background: var(--primary);
  transform: scaleY(0);
  transition: var(--transition);
}

:global(.conversation-item:hover) {
  background: linear-gradient(135deg, rgba(102, 123, 198, 0.05) 0%, rgba(102, 123, 198, 0.08) 100%);
  transform: translateX(2px);
}

:global(.conversation-item.active) {
  background: linear-gradient(135deg, rgba(102, 123, 198, 0.12) 0%, rgba(102, 123, 198, 0.15) 100%);
}

:global(.conversation-item.active::before) {
  transform: scaleY(1);
}

:global(.conversation-avatar-wrapper) {
  position: relative;
  flex-shrink: 0;
}

:global(.conversation-avatar) {
  width: 52px;
  height: 52px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid white;
  box-shadow: var(--shadow-sm);
  transition: var(--transition);
}

:global(.online-badge) {
  position: absolute;
  bottom: 2px;
  right: 2px;
  width: 12px;
  height: 12px;
  background: var(--success);
  border: 3px solid white;
  border-radius: 50%;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

:global(.conversation-info) {
  flex: 1;
  min-width: 0;
}

:global(.conversation-header) {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 4px;
}

:global(.conversation-name) {
  font-size: 15px;
  font-weight: 700;
  color: var(--dark);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

:global(.conversation-time) {
  font-size: 11px;
  color: var(--gray);
  flex-shrink: 0;
  font-weight: 600;
}

:global(.last-message) {
  font-size: 13px;
  color: var(--gray);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
  font-weight: 500;
}

:global(.no-conversations) {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60px 20px;
  text-align: center;
  color: var(--gray);
}

/* ===== CHAT AREA ===== */
:global(.chat-area) {
  display: flex;
  flex-direction: column;
  background: #f8f9fb;
  position: relative;
  overflow: hidden;
}

:global(.empty-chat) {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  text-align: center;
}

:global(.empty-chat-content) {
  animation: fadeInUp 0.6s ease;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

:global(.empty-chat-icon) {
  margin-bottom: 24px;
  opacity: 0.2;
  animation: float 3s ease-in-out infinite;
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

:global(.empty-chat h3) {
  font-size: 24px;
  font-weight: 800;
  color: var(--dark);
  margin-bottom: 12px;
  letter-spacing: -0.5px;
}

:global(.empty-chat p) {
  font-size: 15px;
  color: var(--gray);
  font-weight: 500;
}

:global(.active-chat) {
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

:global(.active-chat.hidden) {
  display: none;
}

:global(.chat-header) {
  flex-shrink: 0;
  background: white;
  border-bottom: 1px solid var(--border);
  padding: 12px 16px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  min-height: 72px;
}

:global(.chat-user-info) {
  display: flex;
  align-items: center;
  gap: 14px;
  flex: 1;
  min-width: 0;
}

:global(.back-btn) {
  display: none;
  background: var(--gray-light);
  border: none;
  padding: 8px;
  cursor: pointer;
  color: var(--gray);
  border-radius: 10px;
  transition: var(--transition);
}

:global(.back-btn:hover) {
  background: var(--primary);
  color: white;
  transform: translateX(-2px);
}

:global(.chat-avatar-wrapper) {
  position: relative;
}

:global(.chat-avatar) {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid white;
  box-shadow: var(--shadow-md);
}

:global(.online-indicator) {
  position: absolute;
  bottom: 2px;
  right: 2px;
  width: 12px;
  height: 12px;
  background: var(--success);
  border: 3px solid white;
  border-radius: 50%;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { transform: scale(1); opacity: 1; }
  50% { transform: scale(1.1); opacity: 0.8; }
}

:global(.chat-details) {
  display: flex;
  flex-direction: column;
  gap: 3px;
}

:global(.chat-name) {
  font-size: 16px;
  font-weight: 700;
  color: var(--dark);
  letter-spacing: -0.3px;
}

:global(.chat-status) {
  font-size: 13px;
  color: var(--success);
  display: flex;
  align-items: center;
  gap: 6px;
  font-weight: 600;
}

:global(.status-dot) {
  width: 7px;
  height: 7px;
  background: var(--success);
  border-radius: 50%;
  animation: blink 2s ease-in-out infinite;
}

@keyframes blink {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.4; }
}

:global(.chat-actions) {
  display: flex;
  gap: 8px;
  flex-shrink: 0;
  align-items: center;
}

:global(.chat-action-btn) {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: var(--gray-light);
  border: none;
  color: var(--gray);
  cursor: pointer;
  display: flex !important;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  flex-shrink: 0;
  position: relative;
  z-index: 1;
}

:global(.chat-action-btn svg) {
  flex-shrink: 0;
  pointer-events: none;
}

:global(.chat-action-btn:hover) {
  background: var(--primary);
  color: white;
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

:global(.chat-action-btn:active) {
  transform: translateY(0);
}

/* ===== MESSAGES ===== */
:global(.messages-container) {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
  background: linear-gradient(to bottom right, #fafafa, #f5f6fa);
  scroll-behavior: smooth;
  min-height: 0;
}

:global(.messages-list) {
  display: flex;
  flex-direction: column;
  gap: 14px;
  min-height: 100%;
  position: relative;
  z-index: 1;
}

:global(.no-messages) {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  color: var(--gray);
  gap: 16px;
}

:global(.no-messages-icon) {
  opacity: 0.3;
  animation: float 3s ease-in-out infinite;
}

:global(.no-messages p) {
  font-size: 14px;
  font-weight: 500;
}

:global(.message) {
  display: flex !important;
  align-items: flex-end;
  gap: 10px;
  max-width: 65%;
  animation: messageSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  width: fit-content;
}

@keyframes messageSlideIn {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

:global(.message.mine) {
  margin-left: auto !important;
  margin-right: 0 !important;
  flex-direction: row-reverse !important;
  align-self: flex-end !important;
}

:global(.message.theirs) {
  margin-right: auto !important;
  margin-left: 0 !important;
  flex-direction: row !important;
  align-self: flex-start !important;
}

:global(.message-avatar) {
  width: 34px;
  height: 34px;
  border-radius: 50%;
  object-fit: cover;
  flex-shrink: 0;
  border: 2px solid white;
  box-shadow: var(--shadow-sm);
}

:global(.message-content) {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

:global(.message.mine .message-content) {
  align-items: flex-end !important;
}

:global(.message.theirs .message-content) {
  align-items: flex-start !important;
}

:global(.message-bubble) {
  padding: 12px 16px;
  border-radius: 18px;
  word-wrap: break-word;
  word-break: break-word;
  max-width: 100%;
  position: relative;
  box-shadow: var(--shadow-sm);
  transition: var(--transition);
}

:global(.message.theirs .message-bubble) {
  background: white;
  border: 1px solid var(--border);
  border-bottom-left-radius: 6px;
}

:global(.message.mine .message-bubble) {
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
  color: white;
  border-bottom-right-radius: 6px;
  box-shadow: 0 4px 12px rgba(102, 123, 198, 0.3);
}

:global(.message-bubble:hover) {
  transform: translateY(-1px);
  box-shadow: var(--shadow-md);
}

:global(.message.mine .message-bubble:hover) {
  box-shadow: 0 6px 16px rgba(102, 123, 198, 0.4);
}

:global(.delete-message-btn) {
  position: absolute;
  top: 6px;
  right: 6px;
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(10px);
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: none;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  padding: 0;
  transition: var(--transition);
}

:global(.delete-message-btn svg) {
  stroke: white;
}

:global(.message.mine .message-bubble:hover .delete-message-btn) {
  display: flex;
}

:global(.delete-message-btn:hover) {
  background: rgba(239, 68, 68, 0.9);
  transform: scale(1.15) rotate(10deg);
}

:global(.delete-message-btn:active) {
  transform: scale(1.05) rotate(5deg);
}

:global(.chat-dropdown-menu) {
  background: white;
  border-radius: var(--radius-sm);
  box-shadow: var(--shadow-lg);
  padding: 8px;
  min-width: 220px;
  z-index: 10000;
  animation: slideDown 0.2s ease;
  border: 1px solid var(--border);
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

:global(.dropdown-item) {
  width: 100%;
  padding: 12px 14px;
  border: none;
  background: none;
  text-align: left;
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 14px;
  font-weight: 600;
  color: var(--dark);
  cursor: pointer;
  border-radius: 8px;
  transition: var(--transition);
}

:global(.dropdown-item svg) {
  flex-shrink: 0;
}

:global(.dropdown-item:hover) {
  background: var(--gray-light);
  transform: translateX(2px);
}

:global(.dropdown-item.delete-conversation-btn) {
  color: #ef4444;
}

:global(.dropdown-item.delete-conversation-btn:hover) {
  background: rgba(239, 68, 68, 0.1);
}

@keyframes fadeOut {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.8);
  }
}

:global(.message-text) {
  font-size: 14px;
  line-height: 1.6;
  margin: 0;
  white-space: pre-wrap;
  font-weight: 500;
}

:global(.message-time) {
  font-size: 11px;
  color: var(--gray);
  padding: 0 6px;
  white-space: nowrap;
  font-weight: 600;
  margin-top: 4px;
}

/* ===== MESSAGE INPUT ===== */
:global(.message-input-wrapper) {
  padding: 16px 20px;
  border-top: 1px solid var(--border);
  display: flex;
  align-items: center;
  gap: 10px;
  background: white;
  flex-shrink: 0;
  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.04);
}

:global(.attach-btn) {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  background: var(--gray-light);
  border: none;
  color: var(--gray);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  flex-shrink: 0;
}

:global(.attach-btn:hover) {
  background: var(--primary);
  color: white;
  transform: translateY(-2px) rotate(-10deg);
  box-shadow: var(--shadow-md);
}

:global(.input-container) {
  flex: 1;
  position: relative;
  display: flex;
  align-items: center;
  background: var(--gray-light);
  border-radius: 12px;
  border: 2px solid transparent;
  transition: var(--transition);
}

:global(.input-container:focus-within) {
  background: white;
  border-color: var(--primary);
  box-shadow: 0 0 0 4px rgba(102, 123, 198, 0.1);
}

:global(.message-input) {
  flex: 1;
  padding: 12px 16px;
  border: none;
  border-radius: 12px;
  font-size: 14px;
  outline: none;
  background: transparent;
  font-family: inherit;
  min-height: 44px;
  font-weight: 500;
  color: var(--dark);
}

:global(.emoji-btn) {
  width: 38px;
  height: 38px;
  border-radius: 10px;
  background: none;
  border: none;
  color: var(--gray);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  flex-shrink: 0;
  margin-right: 8px;
}

:global(.emoji-btn:hover) {
  background: rgba(102, 123, 198, 0.1);
  color: var(--primary);
  transform: scale(1.1);
}

:global(.send-btn) {
  width: 44px;
  height: 44px;
  border-radius: 12px;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
  border: none;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  flex-shrink: 0;
  box-shadow: 0 4px 12px rgba(102, 123, 198, 0.3);
}

:global(.send-btn:hover) {
  transform: scale(1.08) rotate(-5deg);
  box-shadow: 0 6px 16px rgba(102, 123, 198, 0.4);
}

:global(.send-btn:active) {
  transform: scale(1.02) rotate(-3deg);
}

/* ===== MODALS ===== */
:global(.emoji-picker) {
  position: fixed;
  background: white;
  border-radius: var(--radius-sm);
  box-shadow: var(--shadow-lg);
  padding: 16px;
  z-index: 10000;
  border: 1px solid var(--border);
  animation: slideUp 0.2s ease;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

:global(.emoji-picker.hidden) {
  display: none;
}

:global(.emoji-grid) {
  display: grid;
  grid-template-columns: repeat(10, 1fr);
  gap: 8px;
  max-width: 400px;
}

:global(.emoji-grid span) {
  font-size: 24px;
  cursor: pointer;
  transition: var(--transition);
  padding: 4px;
  border-radius: 6px;
  text-align: center;
}

:global(.emoji-grid span:hover) {
  background: var(--gray-light);
  transform: scale(1.2);
}

:global(.modal-overlay) {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(8px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  padding: 20px;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

:global(.modal-overlay.hidden) {
  display: none;
}

:global(.modal-container) {
  background: white;
  border-radius: 20px;
  box-shadow: var(--shadow-lg);
  max-width: 540px;
  width: 100%;
  max-height: 80vh;
  display: flex;
  flex-direction: column;
  animation: modalSlideUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes modalSlideUp {
  from {
    opacity: 0;
    transform: translateY(40px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

:global(.modal-header) {
  padding: 24px 28px;
  border-bottom: 1px solid var(--border);
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-shrink: 0;
}

:global(.modal-header h3) {
  font-size: 22px;
  font-weight: 800;
  letter-spacing: -0.3px;
}

:global(.modal-close) {
  background: var(--gray-light);
  border: none;
  cursor: pointer;
  color: var(--gray);
  padding: 8px;
  border-radius: 12px;
  transition: var(--transition);
}

:global(.modal-close:hover) {
  background: #ef4444;
  color: white;
  transform: rotate(90deg);
}

:global(.modal-body) {
  padding: 28px;
  overflow-y: auto;
  min-height: 0;
}

:global(.search-users-input) {
  width: 100%;
  padding: 14px 20px;
  border: 2px solid transparent;
  border-radius: 14px;
  font-size: 15px;
  outline: none;
  background: var(--gray-light);
  margin-bottom: 20px;
  transition: var(--transition);
  font-weight: 500;
}

:global(.search-users-input:focus) {
  border-color: var(--primary);
  background: white;
  box-shadow: 0 0 0 4px rgba(102, 123, 198, 0.1);
}

:global(.users-list) {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

:global(.user-item) {
  display: flex;
  align-items: center;
  gap: 14px;
  padding: 14px;
  border-radius: var(--radius-sm);
  cursor: pointer;
  transition: var(--transition);
  border: 2px solid transparent;
}

:global(.user-item:hover) {
  background: linear-gradient(135deg, rgba(102, 123, 198, 0.05) 0%, rgba(102, 123, 198, 0.08) 100%);
  border-color: var(--primary);
  transform: translateX(4px);
}

:global(.user-avatar) {
  width: 52px;
  height: 52px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid white;
  box-shadow: var(--shadow-sm);
}

:global(.user-info h4) {
  font-size: 16px;
  font-weight: 700;
  color: var(--dark);
  margin-bottom: 4px;
}

:global(.user-info p) {
  font-size: 14px;
  color: var(--gray);
  font-weight: 500;
}

/* ===== CALL MODAL ===== */
:global(.call-modal) {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.95);
  backdrop-filter: blur(20px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10000;
  padding: 20px;
  animation: fadeIn 0.3s ease;
}

:global(.call-modal.hidden) {
  display: none;
}

:global(.call-container) {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  max-width: 600px;
  width: 100%;
  position: relative;
}

:global(.call-header) {
  text-align: center;
  margin-bottom: 40px;
  color: white;
}

:global(.call-header h3) {
  font-size: 24px;
  font-weight: 700;
  margin-bottom: 8px;
}

:global(.call-header p) {
  font-size: 18px;
  color: rgba(255, 255, 255, 0.8);
}

:global(.call-avatar-section) {
  margin-bottom: 60px;
}

:global(.call-user-avatar) {
  width: 140px;
  height: 140px;
  border-radius: 50%;
  object-fit: cover;
  border: 6px solid white;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
  animation: pulse-avatar 2s ease-in-out infinite;
}

@keyframes pulse-avatar {
  0%, 100% { 
    transform: scale(1); 
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4); 
  }
  50% { 
    transform: scale(1.05); 
    box-shadow: 0 12px 40px rgba(102, 123, 198, 0.6); 
  }
}

:global(.call-controls) {
  display: flex;
  gap: 20px;
  align-items: center;
}

:global(.call-control-btn) {
  width: 64px;
  height: 64px;
  border-radius: 50%;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: var(--transition);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

:global(.mute-btn) {
  background: rgba(255, 255, 255, 0.2);
  color: white;
}

:global(.mute-btn:hover) {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.1);
}

:global(.mute-btn.muted) {
  background: #ef4444;
}

:global(.video-toggle-btn) {
  background: rgba(255, 255, 255, 0.2);
  color: white;
}

:global(.video-toggle-btn:hover) {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.1);
}

:global(.video-toggle-btn.video-off) {
  background: #ef4444;
}

:global(.end-call-btn) {
  background: #ef4444;
  color: white;
  width: 72px;
  height: 72px;
}

:global(.end-call-btn:hover) {
  background: #dc2626;
  transform: scale(1.1);
}

:global(.end-call-btn:active) {
  transform: scale(1.05);
}

:global(.local-video),
:global(.remote-video) {
  position: absolute;
  border-radius: var(--radius);
  overflow: hidden;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
}

:global(.local-video) {
  width: 200px;
  height: 150px;
  bottom: 100px;
  right: 40px;
  border: 3px solid white;
}

:global(.remote-video) {
  width: 100%;
  max-width: 800px;
  height: auto;
  max-height: 600px;
  top: 20px;
}

:global(.local-video.hidden),
:global(.remote-video.hidden) {
  display: none;
}

/* ===== TOAST ===== */
:global(.toast-notification) {
  position: fixed;
  bottom: 28px;
  right: 28px;
  background: white;
  padding: 18px 22px;
  border-radius: 14px;
  box-shadow: var(--shadow-lg);
  z-index: 10000;
  min-width: 320px;
  animation: toastSlideUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid var(--border);
}

:global(.toast-notification.hidden) {
  display: none;
}

@keyframes toastSlideUp {
  from {
    transform: translateY(100px) scale(0.9);
    opacity: 0;
  }
  to {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
}

:global(.toast-content) {
  display: flex;
  align-items: center;
  gap: 12px;
}

:global(.toast-icon) {
  flex-shrink: 0;
  color: var(--success);
}

:global(.toast-message) {
  font-size: 14px;
  font-weight: 600;
  color: var(--dark);
  flex: 1;
}

/* ===== SCROLLBAR ===== */
:global(.conversations-list::-webkit-scrollbar),
:global(.messages-container::-webkit-scrollbar),
:global(.modal-body::-webkit-scrollbar) {
  width: 6px;
}

:global(.conversations-list::-webkit-scrollbar-track),
:global(.messages-container::-webkit-scrollbar-track),
:global(.modal-body::-webkit-scrollbar-track) {
  background: transparent;
}

:global(.conversations-list::-webkit-scrollbar-thumb),
:global(.messages-container::-webkit-scrollbar-thumb),
:global(.modal-body::-webkit-scrollbar-thumb) {
  background: var(--border);
  border-radius: 3px;
}

:global(.conversations-list::-webkit-scrollbar-thumb:hover),
:global(.messages-container::-webkit-scrollbar-thumb:hover),
:global(.modal-body::-webkit-scrollbar-thumb:hover) {
  background: var(--gray);
}

/* ===== ESTADOS ADICIONALES ===== */
:global(.hidden) {
  display: none !important;
}

:global(.message-input:disabled) {
  background: var(--gray-light);
  cursor: not-allowed;
  opacity: 0.6;
}

:global(.send-btn:disabled) {
  background: var(--gray);
  cursor: not-allowed;
  opacity: 0.5;
}

:global(.send-btn:disabled:hover) {
  transform: none;
  box-shadow: none;
}

/* ===== ACCESIBILIDAD ===== */
:global(.conversation-item:focus),
:global(.message-input:focus),
:global(.search-input:focus),
:global(button:focus-visible) {
  outline: 3px solid rgba(102, 123, 198, 0.4);
  outline-offset: 2px;
}

/* ===== EFECTOS DE BOTONES ===== */
:global(button) {
  position: relative;
  overflow: hidden;
}

:global(button::after) {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  transform: translate(-50%, -50%);
  transition: width 0.6s, height 0.6s;
}

:global(button:active::after) {
  width: 300px;
  height: 300px;
}

/* ===== RESPONSIVE ===== */
@media (max-width: 1024px) {
  :global(.messages-layout) {
    grid-template-columns: 320px 1fr;
  }
}

@media (max-width: 900px) {
  :global(.messages-layout) {
    grid-template-columns: 1fr;
  }

  :global(.conversations-sidebar) {
    display: flex;
  }

  :global(.active-chat:not(.hidden)) {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 5;
  }

  :global(.back-btn) {
    display: flex;
  }

  :global(.chat-actions) {
    gap: 6px;
  }

  :global(.chat-action-btn) {
    width: 38px;
    height: 38px;
  }

  :global(.message) {
    max-width: 75%;
  }
}

@media (max-width: 640px) {
  :global(.sidebar-header) {
    padding: 16px;
  }

  :global(.home-btn) {
    width: 38px;
    height: 38px;
  }

  :global(.sidebar-title) {
    font-size: 20px;
  }

  :global(.new-message-btn) {
    width: 38px;
    height: 38px;
  }

  :global(.search-wrapper) {
    padding: 14px;
  }

  :global(.conversation-item) {
    padding: 12px 14px;
    margin: 0 6px 4px;
  }

  :global(.conversation-avatar) {
    width: 48px;
    height: 48px;
  }

  :global(.chat-header) {
    padding: 12px 14px;
  }

  :global(.chat-avatar) {
    width: 42px;
    height: 42px;
  }

  :global(.messages-container) {
    padding: 16px 14px;
  }

  :global(.message-input-wrapper) {
    padding: 14px 16px;
    gap: 8px;
  }

  :global(.attach-btn) {
    width: 38px;
    height: 38px;
  }

  :global(.send-btn) {
    width: 42px;
    height: 42px;
  }

  :global(.message) {
    max-width: 80%;
  }

  :global(.message-avatar) {
    width: 30px;
    height: 30px;
  }

  :global(.message-bubble) {
    padding: 10px 14px;
    border-radius: 16px;
  }

  :global(.message-text) {
    font-size: 13px;
  }

  :global(.toast-notification) {
    bottom: 20px;
    right: 20px;
    left: 20px;
    min-width: auto;
  }

  :global(.call-user-avatar) {
    width: 100px;
    height: 100px;
  }

  :global(.call-control-btn) {
    width: 56px;
    height: 56px;
  }

  :global(.end-call-btn) {
    width: 64px;
    height: 64px;
  }

  :global(.local-video) {
    width: 140px;
    height: 105px;
    bottom: 80px;
    right: 20px;
  }

  :global(.emoji-grid) {
    grid-template-columns: repeat(8, 1fr);
    max-width: 320px;
  }
}
</style>