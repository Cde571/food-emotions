---
// src/pages/Messages.astro
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
---

<Layout title="Mensajes">
  <Navigation />
  
  <div class="messages-layout">
    <!-- Sidebar de conversaciones -->
    <aside class="conversations-sidebar">
      <div class="sidebar-header">
        <h2 class="sidebar-title">Mensajes</h2>
        <button class="new-message-btn" id="new-message-btn" title="Nuevo mensaje">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 3h18v18H3z"/>
            <line x1="9" y1="12" x2="15" y2="12"/>
            <line x1="12" y1="9" x2="12" y2="15"/>
          </svg>
        </button>
      </div>

      <div class="search-wrapper">
        <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" class="search-icon">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
        <input 
          type="text" 
          id="search-conversations" 
          class="search-input" 
          placeholder="Buscar conversaciones..."
        />
      </div>

      <div class="conversations-list" id="conversations-list">
        <div class="loading-conversations">
          <div class="loader-small"></div>
          <p>Cargando conversaciones...</p>
        </div>
      </div>
    </aside>

    <!-- √Årea de chat -->
    <main class="chat-area">
      <div class="empty-chat" id="empty-chat">
        <div class="empty-chat-icon">
          <svg viewBox="0 0 24 24" width="80" height="80" fill="none" stroke="currentColor" stroke-width="1.5">
            <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
          </svg>
        </div>
        <h3>Tus Mensajes</h3>
        <p>Selecciona una conversaci√≥n o inicia un nuevo chat</p>
      </div>

      <div class="active-chat hidden" id="active-chat">
        <!-- Header del chat -->
        <div class="chat-header">
          <div class="chat-user-info">
            <button class="back-btn" id="back-btn">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="19" y1="12" x2="5" y2="12"/>
                <polyline points="12 19 5 12 12 5"/>
              </svg>
            </button>
            <img id="chat-avatar" src="" alt="" class="chat-avatar" />
            <div class="chat-details">
              <h3 id="chat-name" class="chat-name">Usuario</h3>
              <span id="chat-status" class="chat-status">En l√≠nea</span>
            </div>
          </div>
          <div class="chat-actions">
            <button class="chat-action-btn" title="Llamar">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
              </svg>
            </button>
            <button class="chat-action-btn" title="Video llamada">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="23 7 16 12 23 17 23 7"/>
                <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
              </svg>
            </button>
            <button class="chat-action-btn" id="chat-menu-btn" title="M√°s opciones">
              <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                <circle cx="12" cy="5" r="2"/>
                <circle cx="12" cy="12" r="2"/>
                <circle cx="12" cy="19" r="2"/>
              </svg>
            </button>
          </div>
        </div>

        <!-- Mensajes -->
        <div class="messages-container" id="messages-container">
          <div class="messages-list" id="messages-list">
            <!-- Los mensajes se cargar√°n aqu√≠ -->
          </div>
        </div>

        <!-- Input de mensaje -->
        <div class="message-input-wrapper">
          <button class="attach-btn" title="Adjuntar archivo">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21.44 11.05l-9.19 9.19a6 6 0 01-8.49-8.49l9.19-9.19a4 4 0 015.66 5.66l-9.2 9.19a2 2 0 01-2.83-2.83l8.49-8.48"/>
            </svg>
          </button>
          <button class="emoji-btn" title="Emoji">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
              <line x1="9" y1="9" x2="9.01" y2="9"/>
              <line x1="15" y1="9" x2="15.01" y2="9"/>
            </svg>
          </button>
          <input 
            type="text" 
            id="message-input" 
            class="message-input" 
            placeholder="Escribe un mensaje..."
          />
          <button class="send-btn" id="send-btn">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="22" y1="2" x2="11" y2="13"/>
              <polygon points="22 2 15 22 11 13 2 9 22 2"/>
            </svg>
          </button>
        </div>
      </div>
    </main>

    <!-- Panel de informaci√≥n del usuario -->
    <aside class="user-info-panel hidden" id="user-info-panel">
      <div class="panel-header">
        <h3>Informaci√≥n</h3>
        <button class="close-panel-btn" id="close-panel-btn">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      </div>

      <div class="panel-content">
        <div class="user-profile-section">
          <img id="panel-avatar" src="" alt="" class="panel-avatar" />
          <h3 id="panel-name" class="panel-name">Usuario</h3>
          <p id="panel-username" class="panel-username">@username</p>
          <button class="view-profile-btn">Ver perfil</button>
        </div>

        <div class="panel-section">
          <h4 class="section-title">Archivos compartidos</h4>
          <div class="shared-files">
            <p class="no-files">No hay archivos compartidos</p>
          </div>
        </div>

        <div class="panel-section">
          <h4 class="section-title">Acciones</h4>
          <button class="panel-action-btn mute-btn">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M11 5L6 9H2v6h4l5 4V5z"/>
              <line x1="23" y1="9" x2="17" y2="15"/>
              <line x1="17" y1="9" x2="23" y2="15"/>
            </svg>
            Silenciar notificaciones
          </button>
          <button class="panel-action-btn block-btn">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <line x1="4.93" y1="4.93" x2="19.07" y2="19.07"/>
            </svg>
            Bloquear usuario
          </button>
          <button class="panel-action-btn delete-btn" id="delete-conversation-panel">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="3 6 5 6 21 6"/>
              <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
            </svg>
            Eliminar conversaci√≥n
          </button>
        </div>
      </div>
    </aside>
  </div>

  <!-- Modal de nuevo mensaje -->
  <div class="modal-overlay hidden" id="new-message-modal">
    <div class="modal-container">
      <div class="modal-header">
        <h3>Nuevo Mensaje</h3>
        <button class="modal-close" id="close-new-message">
          <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <input 
          type="text" 
          id="search-users" 
          class="search-users-input" 
          placeholder="Buscar usuarios..."
        />
        <div class="users-list" id="users-list">
          <!-- Lista de usuarios -->
        </div>
      </div>
    </div>
  </div>

  <!-- Toast -->
  <div id="toast" class="toast-notification hidden">
    <div class="toast-content">
      <p class="toast-message"></p>
    </div>
  </div>
</Layout>

<script>
  import socketClient from '../scripts/websocket/socketClient.js';

  const API_URL = "http://localhost:3000";
  const currentUserId = localStorage.getItem("userId");
  let currentRecipientId = null;
  let currentRecipientUsername = '';
  let conversations = [];

  // üîπ Verificar conexi√≥n de WebSocket
  console.log('üîå Socket conectado:', socketClient.connected);
  console.log('üë§ Usuario actual:', currentUserId);

  // Conectar usuario al socket
  if (currentUserId && socketClient.connected) {
    socketClient.emit('user-connected', currentUserId);
  }

  // Verificar eventos del socket
  socketClient.on('connect', () => {
    console.log('‚úÖ Socket conectado exitosamente');
    if (currentUserId) {
      socketClient.emit('user-connected', currentUserId);
    }
  });

  socketClient.on('disconnect', () => {
    console.log('‚ùå Socket desconectado');
  });

  socketClient.on('error', (error) => {
    console.error('‚ö†Ô∏è Error en socket:', error);
  });

  // üîπ Cargar todas las conversaciones
  async function loadConversations() {
    try {
      const res = await fetch(`${API_URL}/api/messages/conversations`, { credentials: "include" });
      conversations = await res.json();
      const list = document.getElementById("conversations-list");
      list.innerHTML = "";

      if (!conversations || conversations.length === 0) {
        list.innerHTML = `<div class="no-conversations"><p>No tienes conversaciones a√∫n.</p></div>`;
        return;
      }

      conversations.forEach(conv => {
        const { user, lastMessage, timestamp } = conv;
        const item = document.createElement("div");
        item.classList.add("conversation-item");
        item.dataset.userId = user._id;
        
        item.innerHTML = `
          <div class="conversation-avatar-wrapper">
            <img src="${user.profilePic || `https://ui-avatars.com/api/?name=${user.username}&background=667BC6&color=fff`}" 
                 alt="${user.username}" class="conversation-avatar" />
          </div>
          <div class="conversation-info">
            <div class="conversation-header">
              <h4 class="conversation-name">${user.username}</h4>
              <span class="conversation-time">${formatTime(timestamp)}</span>
            </div>
            <div class="conversation-preview">
              <p class="last-message">${lastMessage || "Sin mensajes"}</p>
            </div>
          </div>
        `;
        item.addEventListener("click", () => openConversation(user._id, user.username, user.profilePic));
        list.appendChild(item);
      });
    } catch (err) {
      console.error("‚ùå Error cargando conversaciones:", err);
    }
  }

  // üîπ Abrir conversaci√≥n con un usuario
  async function openConversation(userId, username, avatar) {
    // Salir del chat anterior si existe
    if (currentRecipientId) {
      socketClient.emit('leave-chat', { 
        userId: currentUserId, 
        recipientId: currentRecipientId 
      });
    }

    currentRecipientId = userId;
    currentRecipientUsername = username;
    
    // Unirse al nuevo chat
    socketClient.emit('join-chat', { 
      userId: currentUserId, 
      recipientId: userId 
    });

    // Actualizar estado visual
    document.getElementById("empty-chat").classList.add("hidden");
    document.getElementById("active-chat").classList.remove("hidden");

    // Marcar conversaci√≥n activa
    document.querySelectorAll('.conversation-item').forEach(item => {
      item.classList.remove('active');
    });
    document.querySelector(`[data-user-id="${userId}"]`)?.classList.add('active');

    // Actualizar header del chat
    document.getElementById("chat-avatar").src = avatar || `https://ui-avatars.com/api/?name=${username}&background=667BC6&color=fff`;
    document.getElementById("chat-name").textContent = username;
    document.getElementById("chat-status").textContent = "En l√≠nea";

    await loadMessages(userId);
  }

  // üîπ Cargar mensajes entre el usuario actual y otro
  async function loadMessages(userId) {
    try {
      const res = await fetch(`${API_URL}/api/messages/${userId}`, { credentials: "include" });
      const messages = await res.json();

      const container = document.getElementById("messages-list");
      container.innerHTML = "";

      if (messages.length === 0) {
        container.innerHTML = `
          <div class="no-messages">
            <p>No hay mensajes a√∫n. ¬°Inicia la conversaci√≥n!</p>
          </div>
        `;
        return;
      }

      messages.forEach(msg => {
        const isMine = msg.sender === currentUserId;
        appendMessage(msg.text, isMine, msg.createdAt, msg.senderName, msg._id);
      });

      scrollToBottom();
    } catch (err) {
      console.error("‚ùå Error cargando mensajes:", err);
    }
  }

  // üîπ Funci√≥n para agregar un mensaje al DOM
  function appendMessage(text, isMine, timestamp = new Date(), senderName = '', messageId = null) {
    const container = document.getElementById("messages-list");
    const div = document.createElement("div");
    div.classList.add("message", isMine ? "mine" : "theirs");
    if (messageId) div.dataset.messageId = messageId;
    
    const avatarUrl = isMine 
      ? `https://ui-avatars.com/api/?name=${localStorage.getItem('username') || 'T√∫'}&background=667BC6&color=fff`
      : `https://ui-avatars.com/api/?name=${senderName || currentRecipientUsername}&background=DA7297&color=fff`;
    
    div.innerHTML = `
      ${!isMine ? `<img src="${avatarUrl}" alt="${senderName}" class="message-avatar" />` : ""}
      <div class="message-content">
        <div class="message-bubble">
          <p class="message-text">${escapeHtml(text)}</p>
          ${isMine ? `
            <button class="delete-message-btn" data-message-id="${messageId}" title="Eliminar mensaje">
              <svg viewBox="0 0 24 24" width="14" height="14" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3 6 5 6 21 6"/>
                <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
              </svg>
            </button>
          ` : ''}
        </div>
        <span class="message-time">${formatMessageTime(timestamp)}</span>
      </div>
      ${isMine ? `<img src="${avatarUrl}" alt="T√∫" class="message-avatar" />` : ""}
    `;
    
    container.appendChild(div);

    // Agregar evento de eliminar si es mensaje propio
    if (isMine && messageId) {
      const deleteBtn = div.querySelector('.delete-message-btn');
      deleteBtn?.addEventListener('click', () => deleteMessage(messageId));
    }
  }

  // üîπ Escuchar mensajes nuevos en tiempo real
  socketClient.on('new-message', (msg) => {
    console.log('üì© Mensaje recibido:', msg);
    console.log('Current User ID:', currentUserId);
    console.log('Current Recipient ID:', currentRecipientId);
    
    // Verificar si el mensaje es para el usuario actual
    const isForMe = msg.recipientId === currentUserId || msg.recipient === currentUserId;
    const isFromCurrentChat = msg.senderId === currentRecipientId || msg.sender === currentRecipientId;
    
    if (isForMe && isFromCurrentChat) {
      appendMessage(msg.text, false, msg.createdAt, msg.senderName || 'Usuario', msg._id);
      scrollToBottom();
      
      // Actualizar la lista de conversaciones
      loadConversations();
    } else if (isForMe) {
      // Si el mensaje es para m√≠ pero de otra conversaci√≥n, solo actualizar la lista
      loadConversations();
      showToast(`Nuevo mensaje de ${msg.senderName || 'Usuario'}`);
    }
  });

  // üîπ Escuchar eliminaci√≥n de mensajes
  socketClient.on('message-deleted', (data) => {
    console.log('üóëÔ∏è Mensaje eliminado:', data);
    const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
    if (messageElement) {
      messageElement.style.animation = 'fadeOut 0.3s ease';
      setTimeout(() => messageElement.remove(), 300);
    }
  });

  // üîπ Escuchar eliminaci√≥n de conversaci√≥n completa
  socketClient.on('conversation-deleted', (data) => {
    console.log('üóëÔ∏è Conversaci√≥n eliminada:', data);
    if (data.userId1 === currentUserId || data.userId2 === currentUserId) {
      loadConversations();
      if (currentRecipientId === data.userId1 || currentRecipientId === data.userId2) {
        document.getElementById("active-chat").classList.add("hidden");
        document.getElementById("empty-chat").classList.remove("hidden");
        currentRecipientId = null;
        showToast('Conversaci√≥n eliminada');
      }
    }
  });

  // üîπ Enviar mensaje
  async function sendMessage() {
    const input = document.getElementById("message-input");
    const text = input.value.trim();
    
    if (!text || !currentRecipientId) return;

    try {
      const res = await fetch(`${API_URL}/api/messages/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          sender: currentUserId,
          recipientId: currentRecipientId,
          text
        }),
      });

      if (res.ok) {
        const data = await res.json();
        console.log('‚úÖ Mensaje enviado:', data);
        
        // Agregar el mensaje visualmente con su ID
        appendMessage(text, true, new Date(), '', data.data._id);
        input.value = "";
        scrollToBottom();
        
        // Actualizar √∫ltima conversaci√≥n
        loadConversations();
      } else {
        console.error('‚ùå Error en respuesta:', await res.text());
        showToast("Error al enviar el mensaje");
      }
    } catch (err) {
      console.error("‚ùå Error enviando mensaje:", err);
      showToast("Error al enviar el mensaje");
    }
  }

  // üîπ Eliminar mensaje individual
  async function deleteMessage(messageId) {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar este mensaje?')) return;

    try {
      const res = await fetch(`${API_URL}/api/messages/${messageId}`, {
        method: "DELETE",
        credentials: "include"
      });

      if (res.ok) {
        const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
        if (messageElement) {
          messageElement.style.animation = 'fadeOut 0.3s ease';
          setTimeout(() => messageElement.remove(), 300);
        }
        showToast('Mensaje eliminado');
      } else {
        showToast('Error al eliminar el mensaje');
      }
    } catch (err) {
      console.error("‚ùå Error eliminando mensaje:", err);
      showToast('Error al eliminar el mensaje');
    }
  }

  // üîπ Eliminar conversaci√≥n completa
  async function deleteConversation(userId) {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar toda esta conversaci√≥n? Esta acci√≥n no se puede deshacer.')) return;

    try {
      const res = await fetch(`${API_URL}/api/messages/conversation/${userId}`, {
        method: "DELETE",
        credentials: "include"
      });

      if (res.ok) {
        const data = await res.json();
        showToast(`Conversaci√≥n eliminada (${data.deletedCount} mensajes)`);
        
        // Volver a la vista vac√≠a
        document.getElementById("active-chat").classList.add("hidden");
        document.getElementById("empty-chat").classList.remove("hidden");
        currentRecipientId = null;
        
        // Recargar conversaciones
        loadConversations();
      } else {
        showToast('Error al eliminar la conversaci√≥n');
      }
    } catch (err) {
      console.error("‚ùå Error eliminando conversaci√≥n:", err);
      showToast('Error al eliminar la conversaci√≥n');
    }
  }

  // üîπ Scroll autom√°tico
  function scrollToBottom() {
    const container = document.getElementById("messages-container");
    setTimeout(() => {
      container.scrollTop = container.scrollHeight;
    }, 100);
  }

  // üîπ Buscar conversaciones
  document.getElementById("search-conversations")?.addEventListener("input", (e) => {
    const q = e.target.value.toLowerCase();
    document.querySelectorAll(".conversation-item").forEach(item => {
      const name = item.querySelector(".conversation-name").textContent.toLowerCase();
      item.style.display = name.includes(q) ? "flex" : "none";
    });
  });

  // üîπ Env√≠o con bot√≥n o Enter
  document.getElementById("send-btn")?.addEventListener("click", sendMessage);
  document.getElementById("message-input")?.addEventListener("keypress", e => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  // üîπ Bot√≥n de volver (mobile)
  document.getElementById("back-btn")?.addEventListener("click", () => {
    document.getElementById("active-chat").classList.add("hidden");
    document.getElementById("empty-chat").classList.remove("hidden");
    currentRecipientId = null;
  });

  // üîπ Bot√≥n de men√∫ del chat (eliminar conversaci√≥n)
  document.getElementById("chat-menu-btn")?.addEventListener("click", () => {
    if (currentRecipientId) {
      const menu = document.createElement('div');
      menu.className = 'chat-dropdown-menu';
      menu.innerHTML = `
        <button class="dropdown-item delete-conversation-btn">
          <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="3 6 5 6 21 6"/>
            <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
          </svg>
          Eliminar conversaci√≥n
        </button>
      `;
      
      // Posicionar el men√∫
      const btn = document.getElementById("chat-menu-btn");
      const rect = btn.getBoundingClientRect();
      menu.style.position = 'fixed';
      menu.style.top = `${rect.bottom + 8}px`;
      menu.style.right = `${window.innerWidth - rect.right}px`;
      
      document.body.appendChild(menu);
      
      // Evento de eliminar
      menu.querySelector('.delete-conversation-btn').addEventListener('click', () => {
        deleteConversation(currentRecipientId);
        menu.remove();
      });
      
      // Cerrar al hacer clic fuera
      setTimeout(() => {
        document.addEventListener('click', function closeMenu(e) {
          if (!menu.contains(e.target)) {
            menu.remove();
            document.removeEventListener('click', closeMenu);
          }
        });
      }, 100);
    }
  });

  // üîπ Utilidades
  function formatTime(ts) {
    const date = new Date(ts);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) return "Ahora";
    if (diff < 3600000) return `${Math.floor(diff / 60000)}m`;
    if (diff < 86400000) return date.toLocaleTimeString("es-ES", { hour: "2-digit", minute: "2-digit" });
    return date.toLocaleDateString("es-ES", { day: "numeric", month: "short" });
  }

  function formatMessageTime(ts) {
    const date = new Date(ts);
    return date.toLocaleTimeString("es-ES", { hour: "2-digit", minute: "2-digit" });
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function showToast(message) {
    const toast = document.getElementById("toast");
    const messageEl = toast.querySelector(".toast-message");
    messageEl.textContent = message;
    toast.classList.remove("hidden");
    setTimeout(() => toast.classList.add("hidden"), 3000);
  }

  // üîπ Inicializaci√≥n
  loadConversations();
</script>

<style>
  :root {
    --primary: #667BC6;
    --secondary: #DA7297;
    --dark: #2d2d2d;
    --gray: #6b7280;
    --gray-light: #f3f4f6;
    --border: #e5e7eb;
    --success: #10b981;
    --card-bg: #ffffff;
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --radius: 12px;
    --radius-sm: 8px;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: var(--gray-light);
    color: var(--dark);
  }

  .messages-layout {
    display: grid;
    grid-template-columns: 360px 1fr;
    height: calc(100vh - 80px);
    margin-top: 80px;
    max-width: 1400px;
    margin-left: auto;
    margin-right: auto;
    gap: 0;
    background: var(--card-bg);
    box-shadow: var(--shadow-md);
  }

  /* ===== SIDEBAR ===== */
  .conversations-sidebar {
    border-right: 1px solid var(--border);
    display: flex;
    flex-direction: column;
    background: var(--card-bg);
  }

  .sidebar-header {
    padding: 20px;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .sidebar-title {
    font-size: 24px;
    font-weight: 700;
    color: var(--dark);
  }

  .new-message-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--primary);
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
  }

  .new-message-btn:hover {
    transform: scale(1.1);
    box-shadow: var(--shadow-md);
  }

  .search-wrapper {
    padding: 16px 20px;
    border-bottom: 1px solid var(--border);
    position: relative;
  }

  .search-icon {
    position: absolute;
    left: 36px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gray);
  }

  .search-input {
    width: 100%;
    padding: 10px 16px 10px 40px;
    border: 1px solid var(--border);
    border-radius: 20px;
    font-size: 14px;
    outline: none;
    background: var(--gray-light);
  }

  .search-input:focus {
    border-color: var(--primary);
    background: white;
  }

  .conversations-list {
    flex: 1;
    overflow-y: auto;
  }

  .loading-conversations {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
  }

  .loader-small {
    width: 32px;
    height: 32px;
    border: 3px solid var(--border);
    border-top-color: var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 12px;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .conversation-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px 20px;
    cursor: pointer;
    transition: all 0.2s;
    border-bottom: 1px solid var(--gray-light);
  }

  .conversation-item:hover {
    background: var(--gray-light);
  }

  .conversation-item.active {
    background: #e8eaf6;
    border-left: 3px solid var(--primary);
  }

  .conversation-avatar-wrapper {
    position: relative;
    flex-shrink: 0;
  }

  .conversation-avatar {
    width: 52px;
    height: 52px;
    border-radius: 50%;
    object-fit: cover;
  }

  .conversation-info {
    flex: 1;
    min-width: 0;
  }

  .conversation-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
  }

  .conversation-name {
    font-size: 15px;
    font-weight: 600;
    color: var(--dark);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .conversation-time {
    font-size: 12px;
    color: var(--gray);
    flex-shrink: 0;
  }

  .conversation-preview {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 8px;
  }

  .last-message {
    font-size: 14px;
    color: var(--gray);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex: 1;
  }

  .no-conversations {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
    text-align: center;
    color: var(--gray);
  }

  /* ===== CHAT AREA ===== */
  .chat-area {
    display: flex;
    flex-direction: column;
    background: var(--card-bg);
    position: relative;
  }

  .empty-chat {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    color: var(--gray);
  }

  .empty-chat-icon {
    margin-bottom: 20px;
    opacity: 0.3;
  }

  .empty-chat h3 {
    font-size: 24px;
    font-weight: 700;
    color: var(--dark);
    margin-bottom: 8px;
  }

  .empty-chat p {
    font-size: 15px;
  }

  .active-chat {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .active-chat.hidden {
    display: none;
  }

  .chat-header {
    padding: 16px 24px;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--card-bg);
    flex-shrink: 0;
  }

  .chat-user-info {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .back-btn {
    display: none;
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    color: var(--gray);
    border-radius: 50%;
    transition: all 0.2s;
  }

  .back-btn:hover {
    background: var(--gray-light);
  }

  .chat-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
  }

  .chat-details {
    display: flex;
    flex-direction: column;
  }

  .chat-name {
    font-size: 16px;
    font-weight: 600;
    color: var(--dark);
  }

  .chat-status {
    font-size: 13px;
    color: var(--success);
  }

  .chat-actions {
    display: flex;
    gap: 8px;
  }

  .chat-action-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: none;
    border: none;
    color: var(--gray);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
  }

  .chat-action-btn:hover {
    background: var(--gray-light);
    color: var(--primary);
  }

  /* ===== MESSAGES ===== */
  .messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 20px 24px;
    background: #fafafa;
  }

  .messages-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
    min-height: 100%;
  }

  .no-messages {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: var(--gray);
    font-size: 14px;
  }

  /* Estructura de mensaje individual */
  .message {
    display: flex;
    align-items: flex-end;
    gap: 8px;
    max-width: 75%;
    animation: messageSlide 0.3s ease;
  }

  @keyframes messageSlide {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mensajes del usuario actual (derecha) */
  .message.mine {
    margin-left: auto;
    flex-direction: row-reverse;
  }

  /* Mensajes del otro usuario (izquierda) */
  .message.theirs {
    margin-right: auto;
    flex-direction: row;
  }

  /* Avatar del mensaje */
  .message-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
  }

  /* Contenedor de contenido del mensaje */
  .message-content {
    display: flex;
    flex-direction: column;
    gap: 4px;
    max-width: 100%;
  }

  .message.mine .message-content {
    align-items: flex-end;
  }

  .message.theirs .message-content {
    align-items: flex-start;
  }

  /* Burbuja del mensaje */
  .message-bubble {
    padding: 12px 16px;
    border-radius: 18px;
    word-wrap: break-word;
    word-break: break-word;
    max-width: 100%;
    position: relative;
  }

  .message.theirs .message-bubble {
    background: white;
    border: 1px solid var(--border);
    border-bottom-left-radius: 4px;
  }

  .message.mine .message-bubble {
    background: var(--primary);
    color: white;
    border-bottom-right-radius: 4px;
  }

  /* Bot√≥n de eliminar mensaje */
  .delete-message-btn {
    position: absolute;
    top: 4px;
    right: 4px;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: none;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    padding: 0;
    transition: all 0.2s;
  }

  .delete-message-btn svg {
    stroke: white;
  }

  .message.mine .message-bubble:hover .delete-message-btn {
    display: flex;
  }

  .delete-message-btn:hover {
    background: rgba(239, 68, 68, 0.8);
    transform: scale(1.1);
  }

  /* Men√∫ desplegable del chat */
  .chat-dropdown-menu {
    background: white;
    border-radius: var(--radius-sm);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    padding: 8px;
    min-width: 200px;
    z-index: 1000;
    animation: slideDown 0.2s ease;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .dropdown-item {
    width: 100%;
    padding: 10px 12px;
    border: none;
    background: none;
    text-align: left;
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 14px;
    color: var(--dark);
    cursor: pointer;
    border-radius: 6px;
    transition: all 0.2s;
  }

  .dropdown-item:hover {
    background: var(--gray-light);
  }

  .dropdown-item.delete-conversation-btn {
    color: #ef4444;
  }

  .dropdown-item.delete-conversation-btn:hover {
    background: rgba(239, 68, 68, 0.1);
  }

  /* Animaci√≥n de fadeOut */
  @keyframes fadeOut {
    from {
      opacity: 1;
      transform: scale(1);
    }
    to {
      opacity: 0;
      transform: scale(0.8);
    }
  }

  /* Texto del mensaje */
  .message-text {
    font-size: 14px;
    line-height: 1.5;
    margin: 0;
    white-space: pre-wrap;
  }

  /* Hora del mensaje */
  .message-time {
    font-size: 11px;
    color: var(--gray);
    padding: 0 4px;
    white-space: nowrap;
  }

  /* ===== MESSAGE INPUT ===== */
  .message-input-wrapper {
    padding: 16px 24px;
    border-top: 1px solid var(--border);
    display: flex;
    align-items: center;
    gap: 12px;
    background: var(--card-bg);
    flex-shrink: 0;
  }

  .attach-btn,
  .emoji-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: none;
    border: none;
    color: var(--gray);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
  }

  .attach-btn:hover,
  .emoji-btn:hover {
    background: var(--gray-light);
    color: var(--primary);
  }

  .message-input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid var(--border);
    border-radius: 24px;
    font-size: 14px;
    outline: none;
    background: var(--gray-light);
    font-family: inherit;
    min-height: 44px;
  }

  .message-input:focus {
    border-color: var(--primary);
    background: white;
  }

  .send-btn {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background: var(--primary);
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
  }

  .send-btn:hover {
    transform: scale(1.05);
    box-shadow: var(--shadow-md);
  }

  .send-btn:active {
    transform: scale(0.95);
  }

  /* ===== USER INFO PANEL ===== */
  .user-info-panel {
    width: 320px;
    border-left: 1px solid var(--border);
    background: var(--card-bg);
    display: flex;
    flex-direction: column;
  }

  .user-info-panel.hidden {
    display: none;
  }

  .panel-header {
    padding: 20px;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .panel-header h3 {
    font-size: 18px;
    font-weight: 700;
  }

  .close-panel-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--gray);
    padding: 4px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .close-panel-btn:hover {
    background: var(--gray-light);
  }

  .panel-content {
    padding: 20px;
    overflow-y: auto;
  }

  .user-profile-section {
    text-align: center;
    padding-bottom: 20px;
    border-bottom: 1px solid var(--border);
    margin-bottom: 20px;
  }

  .panel-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 12px;
  }

  .panel-name {
    font-size: 18px;
    font-weight: 700;
    margin-bottom: 4px;
  }

  .panel-username {
    font-size: 14px;
    color: var(--gray);
    margin-bottom: 16px;
  }

  .view-profile-btn {
    background: var(--primary);
    color: white;
    border: none;
    padding: 10px 24px;
    border-radius: 20px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .view-profile-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
  }

  .panel-section {
    margin-bottom: 24px;
  }

  .section-title {
    font-size: 14px;
    font-weight: 700;
    color: var(--gray);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 12px;
  }

  .no-files {
    font-size: 14px;
    color: var(--gray);
    text-align: center;
    padding: 20px;
  }

  .panel-action-btn {
    width: 100%;
    background: none;
    border: none;
    padding: 12px 16px;
    text-align: left;
    display: flex;
    align-items: center;
    gap: 12px;
    font-size: 14px;
    color: var(--dark);
    cursor: pointer;
    border-radius: var(--radius-sm);
    transition: all 0.2s;
  }

  .panel-action-btn:hover {
    background: var(--gray-light);
  }

  .panel-action-btn.delete-btn {
    color: #ef4444;
  }

  .panel-action-btn.delete-btn:hover {
    background: rgba(239, 68, 68, 0.1);
  }

  /* ===== MODAL ===== */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    padding: 20px;
  }

  .modal-overlay.hidden {
    display: none;
  }

  .modal-container {
    background: white;
    border-radius: 16px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 100%;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    padding: 20px 24px;
    border-bottom: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .modal-header h3 {
    font-size: 20px;
    font-weight: 700;
  }

  .modal-close {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--gray);
    padding: 4px;
    border-radius: 50%;
    transition: all 0.2s;
  }

  .modal-close:hover {
    background: var(--gray-light);
  }

  .modal-body {
    padding: 24px;
    overflow-y: auto;
  }

  .search-users-input {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid var(--border);
    border-radius: 24px;
    font-size: 14px;
    outline: none;
    background: var(--gray-light);
    margin-bottom: 16px;
  }

  .search-users-input:focus {
    border-color: var(--primary);
    background: white;
  }

  .users-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .user-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    border-radius: var(--radius-sm);
    cursor: pointer;
    transition: all 0.2s;
  }

  .user-item:hover {
    background: var(--gray-light);
  }

  .user-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
  }

  .user-info h4 {
    font-size: 15px;
    font-weight: 600;
    color: var(--dark);
    margin-bottom: 2px;
  }

  .user-info p {
    font-size: 13px;
    color: var(--gray);
  }

  /* ===== TOAST ===== */
  .toast-notification {
    position: fixed;
    bottom: 24px;
    right: 24px;
    background: var(--card-bg);
    padding: 16px 20px;
    border-radius: var(--radius);
    box-shadow: var(--shadow-md);
    z-index: 10000;
    min-width: 300px;
    animation: slideUp 0.3s ease;
  }

  .toast-notification.hidden {
    display: none;
  }

  @keyframes slideUp {
    from {
      transform: translateY(100px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .toast-message {
    font-size: 14px;
    font-weight: 500;
    color: var(--dark);
  }

  /* ===== RESPONSIVE ===== */
  @media (max-width: 900px) {
    .messages-layout {
      grid-template-columns: 1fr;
      margin-top: 60px;
      height: calc(100vh - 60px);
    }

    .conversations-sidebar {
      display: flex;
    }

    .active-chat:not(.hidden) {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 5;
    }

    .back-btn {
      display: flex;
    }

    .chat-actions {
      display: none;
    }

    .message {
      max-width: 85%;
    }

    .user-info-panel {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
      z-index: 10;
      box-shadow: -4px 0 12px rgba(0, 0, 0, 0.1);
    }
  }

  @media (max-width: 640px) {
    .messages-layout {
      height: calc(100vh - 60px);
      margin-top: 60px;
    }

    .sidebar-header {
      padding: 16px;
    }

    .sidebar-title {
      font-size: 20px;
    }

    .search-wrapper {
      padding: 12px 16px;
    }

    .conversation-item {
      padding: 12px 16px;
    }

    .conversation-avatar {
      width: 44px;
      height: 44px;
    }

    .chat-header {
      padding: 12px 16px;
    }

    .chat-avatar {
      width: 40px;
      height: 40px;
    }

    .messages-container {
      padding: 16px;
    }

    .message-input-wrapper {
      padding: 12px 16px;
      gap: 8px;
    }

    .attach-btn,
    .emoji-btn {
      width: 36px;
      height: 36px;
    }

    .send-btn {
      width: 40px;
      height: 40px;
    }

    .message {
      max-width: 90%;
    }

    .message-avatar {
      width: 28px;
      height: 28px;
    }

    .message-bubble {
      padding: 10px 14px;
      border-radius: 16px;
    }

    .message-text {
      font-size: 13px;
    }
  }

  /* ===== SCROLLBAR ===== */
  .conversations-list::-webkit-scrollbar,
  .messages-container::-webkit-scrollbar,
  .panel-content::-webkit-scrollbar {
    width: 6px;
  }

  .conversations-list::-webkit-scrollbar-track,
  .messages-container::-webkit-scrollbar-track,
  .panel-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .conversations-list::-webkit-scrollbar-thumb,
  .messages-container::-webkit-scrollbar-thumb,
  .panel-content::-webkit-scrollbar-thumb {
    background: var(--border);
    border-radius: 3px;
  }

  .conversations-list::-webkit-scrollbar-thumb:hover,
  .messages-container::-webkit-scrollbar-thumb:hover,
  .panel-content::-webkit-scrollbar-thumb:hover {
    background: var(--gray);
  }

  /* ===== ESTADOS ADICIONALES ===== */
  .hidden {
    display: none !important;
  }

  .message-input:disabled {
    background: var(--gray-light);
    cursor: not-allowed;
    opacity: 0.6;
  }

  .send-btn:disabled {
    background: var(--gray);
    cursor: not-allowed;
    opacity: 0.5;
  }

  .send-btn:disabled:hover {
    transform: none;
    box-shadow: none;
  }
</style>