---
// src/pages/Social.astro
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
import Stories from '../components/social/Stories.astro';
import Post from '../components/social/Post.astro';
import SuggestedUsers from '../components/social/SuggestedUsers.astro';
import PostModal from '../components/social/PostModal.astro';
import { savePost, sharePost, deletePost } from '../scripts/api/posts.js';
import { toggleLike } from '../scripts/api/likes.js';
---

<Layout title="Social Feed">
  <Navigation />
  
  <div class="social-layout">
    <!-- Sidebar Izquierda: Navegación -->
    <aside class="sidebar-left">
      <div class="user-profile-card">
        <div class="profile-header">
          <img id="user-avatar" src="" alt="Profile" class="profile-avatar" />
          <div class="profile-badge"></div>
        </div>
        <h3 id="user-name" class="profile-name">Cargando...</h3>
        <p id="user-username" class="profile-handle">@username</p>
        
        <div class="profile-stats">
          <div class="stat-item">
            <span class="stat-number" id="posts-count">0</span>
            <span class="stat-label">Posts</span>
          </div>
          <div class="stat-item">
            <span class="stat-number" id="followers-count">0</span>
            <span class="stat-label">Seguidores</span>
          </div>
          <div class="stat-item">
            <span class="stat-number" id="following-count">0</span>
            <span class="stat-label">Siguiendo</span>
          </div>
        </div>
      </div>

      <nav class="main-navigation">
        <a href="/Social" class="nav-link active">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="7" height="7" rx="1"/>
            <rect x="14" y="3" width="7" height="7" rx="1"/>
            <rect x="14" y="14" width="7" height="7" rx="1"/>
            <rect x="3" y="14" width="7" height="7" rx="1"/>
          </svg>
          <span>Feed</span>
        </a>
        <a href="/Explore" class="nav-link">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"/>
            <path d="M21 21l-4.35-4.35"/>
          </svg>
          <span>Explorar</span>
        </a>
        <a href="/Messages" class="nav-link">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
          </svg>
          <span>Mensajes</span>
          <span class="notification-badge hidden" id="messages-badge">0</span>
        </a>
        <a href="/Notifications" class="nav-link">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M18 8A6 6 0 006 8c0 7-3 9-3 9h18s-3-2-3-9"/>
            <path d="M13.73 21a2 2 0 01-3.46 0"/>
          </svg>
          <span>Notificaciones</span>
          <span class="notification-badge hidden" id="notif-badge">0</span>
        </a>
        <a href="/Saved" class="nav-link">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 21l-7-5-7 5V5a2 2 0 012-2h10a2 2 0 012 2z"/>
          </svg>
          <span>Guardados</span>
        </a>
        <a href="/Profile" class="nav-link">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"/>
            <circle cx="12" cy="7" r="4"/>
          </svg>
          <span>Mi Perfil</span>
        </a>
      </nav>

      <button id="create-post-btn" class="create-post-btn">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2.5">
          <line x1="12" y1="5" x2="12" y2="19"/>
          <line x1="5" y1="12" x2="19" y2="12"/>
        </svg>
        Crear Publicación
      </button>
    </aside>

    <!-- Contenido Principal -->
    <main class="main-content">
      <!-- Stories Section -->
      <section class="stories-section">
        <h2 class="section-title">Historias</h2>
        <Stories />
      </section>

      <!-- Quick Post -->
      <div class="quick-post-card">
        <img id="quick-post-avatar" src="" alt="Avatar" class="quick-avatar" />
        <button id="quick-post-input" class="quick-input">
          Comparte algo interesante...
        </button>
        <div class="quick-actions">
          <button class="quick-action-btn" title="Foto/Video">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="8.5" cy="8.5" r="1.5"/>
              <polyline points="21 15 16 10 5 21"/>
            </svg>
          </button>
          <button class="quick-action-btn" title="Sentimiento">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="10"/>
              <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
              <line x1="9" y1="9" x2="9.01" y2="9"/>
              <line x1="15" y1="9" x2="15.01" y2="9"/>
            </svg>
          </button>
          <button class="quick-action-btn" title="Ubicación">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0118 0z"/>
              <circle cx="12" cy="10" r="3"/>
            </svg>
          </button>
        </div>
      </div>

      <!-- Filter Tabs -->
      <div class="filter-tabs">
        <button class="tab active" data-filter="all">
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="8" y1="6" x2="21" y2="6"/>
            <line x1="8" y1="12" x2="21" y2="12"/>
            <line x1="8" y1="18" x2="21" y2="18"/>
            <line x1="3" y1="6" x2="3.01" y2="6"/>
            <line x1="3" y1="12" x2="3.01" y2="12"/>
            <line x1="3" y1="18" x2="3.01" y2="18"/>
          </svg>
          Todo
        </button>
        <button class="tab" data-filter="following">
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M17 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
            <circle cx="9" cy="7" r="4"/>
            <path d="M23 21v-2a4 4 0 00-3-3.87"/>
            <path d="M16 3.13a4 4 0 010 7.75"/>
          </svg>
          Siguiendo
        </button>
        <button class="tab" data-filter="trending">
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
            <polyline points="17 6 23 6 23 12"/>
          </svg>
          Tendencias
        </button>
      </div>

      <!-- Posts Feed -->
      <div id="posts-feed" class="posts-grid">
        <div class="loading-state">
          <div class="loader"></div>
          <p>Cargando publicaciones...</p>
        </div>
      </div>

      <div id="scroll-trigger"></div>
    </main>

    <!-- Sidebar Derecha -->
    <aside class="sidebar-right">
      <!-- Trending Topics -->
      <div class="widget trending-widget">
        <h3 class="widget-title">
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
            <polyline points="17 6 23 6 23 12"/>
          </svg>
          Tendencias
        </h3>
        <div id="trending-list" class="trending-list">
          <div class="trending-item">
            <span class="trend-rank">#1</span>
            <div class="trend-info">
              <h4 class="trend-topic">Tecnología</h4>
              <p class="trend-count">12.5K publicaciones</p>
            </div>
          </div>
          <div class="trending-item">
            <span class="trend-rank">#2</span>
            <div class="trend-info">
              <h4 class="trend-topic">Viajes</h4>
              <p class="trend-count">8.3K publicaciones</p>
            </div>
          </div>
          <div class="trending-item">
            <span class="trend-rank">#3</span>
            <div class="trend-info">
              <h4 class="trend-topic">Fotografía</h4>
              <p class="trend-count">6.1K publicaciones</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Suggested Users -->
      <div class="widget suggestions-widget">
        <div class="widget-header">
          <h3 class="widget-title">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
              <circle cx="8.5" cy="7" r="4"/>
              <line x1="20" y1="8" x2="20" y2="14"/>
              <line x1="23" y1="11" x2="17" y2="11"/>
            </svg>
            Sugerencias
          </h3>
          <button class="refresh-btn" title="Actualizar">
            <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="23 4 23 10 17 10"/>
              <polyline points="1 20 1 14 7 14"/>
              <path d="M3.51 9a9 9 0 0114.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0020.49 15"/>
            </svg>
          </button>
        </div>
        <SuggestedUsers />
      </div>

      <!-- Quick Stats -->
      <div class="widget stats-widget">
        <h3 class="widget-title">Tu Actividad</h3>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-icon">👁️</div>
            <div class="stat-data">
              <span class="stat-value">2.5K</span>
              <span class="stat-name">Vistas</span>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">❤️</div>
            <div class="stat-data">
              <span class="stat-value">856</span>
              <span class="stat-name">Likes</span>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">💬</div>
            <div class="stat-data">
              <span class="stat-value">124</span>
              <span class="stat-name">Comentarios</span>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">📤</div>
            <div class="stat-data">
              <span class="stat-value">43</span>
              <span class="stat-name">Compartidos</span>
            </div>
          </div>
        </div>
      </div>
    </aside>
  </div>

  <PostModal />

  <!-- Toast Notification -->
  <div id="toast" class="toast-notification hidden">
    <div class="toast-icon"></div>
    <div class="toast-content">
      <p class="toast-message"></p>
    </div>
    <button class="toast-close">×</button>
  </div>
</Layout>

<script>
  import socketClient from '../scripts/websocket/socketClient.js';
  import { fetchFeed, createPost, likePost } from '../scripts/api/posts.js';

  let currentPage = 1;
  let isLoading = false;
  let hasMore = true;
  let currentFilter = 'all';
  const token = localStorage.getItem('authToken');

  if (token) {
    socketClient.connect(token);
  }

  // Cargar datos del usuario
  async function loadUserData() {
    try {
      const response = await fetch('/profile-data', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const user = await response.json();
      
      const avatarUrl = user.profilePic || `https://ui-avatars.com/api/?name=${user.username}&background=667BC6&color=fff`;
      
      document.getElementById('user-avatar').src = avatarUrl;
      document.getElementById('user-name').textContent = user.fullName || user.username;
      document.getElementById('user-username').textContent = `@${user.username}`;
      document.getElementById('quick-post-avatar').src = avatarUrl;
      
      // Cargar estadísticas
      if (user.stats) {
        document.getElementById('posts-count').textContent = user.stats.posts || 0;
        document.getElementById('followers-count').textContent = user.stats.followers || 0;
        document.getElementById('following-count').textContent = user.stats.following || 0;
      }
    } catch (error) {
      console.error('Error al cargar usuario:', error);
    }
  }

  // Cargar feed
  async function loadFeed(page = 1, filter = 'all') {
    if (isLoading || !hasMore) return;
    
    isLoading = true;
    const loading = document.querySelector('.loading-state');
    if (loading) loading.style.display = 'flex';

    try {
      const posts = await fetchFeed(page, 10, filter);
      
      if (posts.length === 0) {
        hasMore = false;
        if (page === 1) {
          document.getElementById('posts-feed').innerHTML = `
            <div class="empty-state">
              <div class="empty-icon">
                <svg viewBox="0 0 24 24" width="64" height="64" fill="none" stroke="currentColor" stroke-width="1.5">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                  <circle cx="8.5" cy="8.5" r="1.5"/>
                  <polyline points="21 15 16 10 5 21"/>
                </svg>
              </div>
              <h3>No hay publicaciones</h3>
              <p>Sigue a más personas para ver contenido aquí</p>
              <button class="btn-primary" onclick="window.location.href='/Explore'">Explorar usuarios</button>
            </div>
          `;
        }
        return;
      }

      const feedContainer = document.getElementById('posts-feed');
      if (page === 1) feedContainer.innerHTML = '';

      posts.forEach(post => {
        feedContainer.appendChild(createPostCard(post));
      });

    } catch (error) {
      console.error('Error al cargar feed:', error);
      showToast('Error al cargar publicaciones', 'error');
    } finally {
      isLoading = false;
      if (loading) loading.style.display = 'none';
    }
  }

  // Crear card de post
  function createPostCard(post) {
    const card = document.createElement('article');
    card.className = 'post-card';
    card.dataset.postId = post._id;

    const userId = localStorage.getItem('userId');
    const isLiked = post.likes.includes(userId);
    const isSaved = post.saved?.includes(userId);

    card.innerHTML = `
      <div class="post-card-header">
        <div class="author-info">
          <img src="${post.author.profilePic || `https://ui-avatars.com/api/?name=${post.author.username}`}" 
               alt="${post.author.username}" 
               class="author-avatar" />
          <div class="author-details">
            <a href="/profile/${post.author.username}" class="author-name">${post.author.username}</a>
            <span class="post-timestamp">${formatTime(post.createdAt)}</span>
          </div>
        </div>
        <button class="post-menu-btn">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
            <circle cx="12" cy="5" r="2"/>
            <circle cx="12" cy="12" r="2"/>
            <circle cx="12" cy="19" r="2"/>
          </svg>
        </button>
      </div>

      ${post.caption ? `
        <div class="post-content">
          <p class="post-text">${linkifyHashtags(post.caption)}</p>
        </div>
      ` : ''}

      ${post.images.length > 0 ? `
        <div class="post-media">
          <img src="${post.images[0]}" alt="Post image" class="post-image" loading="lazy" />
          ${post.images.length > 1 ? `
            <div class="media-counter">
              <svg viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
                <rect x="3" y="3" width="18" height="18" rx="2"/>
              </svg>
              1/${post.images.length}
            </div>
          ` : ''}
        </div>
      ` : ''}

      <div class="post-engagement">
        <div class="engagement-stats">
          <button class="stat-btn likes-btn" data-post-id="${post._id}">
            <span class="stat-value">${formatNumber(post.likes.length)}</span>
            <span class="stat-label">likes</span>
          </button>
          <button class="stat-btn comments-btn" data-post-id="${post._id}">
            <span class="stat-value">${formatNumber(post.comments.length)}</span>
            <span class="stat-label">comentarios</span>
          </button>
          <span class="stat-views">
            <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
              <circle cx="12" cy="12" r="3"/>
            </svg>
            ${formatNumber(post.views || 0)}
          </span>
        </div>

        <div class="post-actions">
          <button class="action-button ${isLiked ? 'active' : ''}" data-action="like" data-post-id="${post._id}">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="${isLiked ? 'currentColor' : 'none'}" stroke="currentColor" stroke-width="2">
              <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"/>
            </svg>
            <span>${isLiked ? 'Te gusta' : 'Me gusta'}</span>
          </button>
          
          <button class="action-button" data-action="comment" data-post-id="${post._id}">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
            </svg>
            <span>Comentar</span>
          </button>
          
          <button class="action-button" data-action="share">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="18" cy="5" r="3"/>
              <circle cx="6" cy="12" r="3"/>
              <circle cx="18" cy="19" r="3"/>
              <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
              <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
            </svg>
            <span>Compartir</span>
          </button>
          
          <button class="action-button ${isSaved ? 'active' : ''}" data-action="save" data-post-id="${post._id}">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="${isSaved ? 'currentColor' : 'none'}" stroke="currentColor" stroke-width="2">
              <path d="M19 21l-7-5-7 5V5a2 2 0 012-2h10a2 2 0 012 2z"/>
            </svg>
          </button>
        </div>
      </div>

      <div class="comments-section collapsed" id="comments-${post._id}">
        <div class="comments-list"></div>
        <div class="comment-input-wrapper">
          <img src="${document.getElementById('user-avatar')?.src}" alt="You" class="comment-user-avatar" />
          <input type="text" 
                 class="comment-input" 
                 placeholder="Escribe un comentario..." 
                 data-post-id="${post._id}" />
          <button class="send-comment-btn" data-post-id="${post._id}">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="22" y1="2" x2="11" y2="13"/>
              <polygon points="22 2 15 22 11 13 2 9 22 2"/>
            </svg>
          </button>
        </div>
      </div>
    `;

    setupPostInteractions(card, post);
    return card;
  }

  // Setup interacciones del post
  function setupPostInteractions(card, post) {
    // Like
    const likeBtn = card.querySelector('[data-action="like"]');
    likeBtn?.addEventListener('click', async () => {
      likeBtn.classList.toggle('active');
      const svg = likeBtn.querySelector('svg');
      const isActive = likeBtn.classList.contains('active');
      svg.setAttribute('fill', isActive ? 'currentColor' : 'none');
      likeBtn.querySelector('span').textContent = isActive ? 'Te gusta' : 'Me gusta';
      
      await handleLike(post._id, post.author._id);
    });

    // Comment
    const commentBtn = card.querySelector('[data-action="comment"]');
    commentBtn?.addEventListener('click', () => toggleComments(post._id));

    // Send comment
    const sendBtn = card.querySelector('.send-comment-btn');
    const commentInput = card.querySelector('.comment-input');
    
    sendBtn?.addEventListener('click', () => sendComment(post._id));
    commentInput?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && e.target.value.trim()) {
        sendComment(post._id);
      }
    });
  }

  // Manejar like
  async function handleLike(postId, authorId) {
    try {
      const result = await toggleLike(postId);
      
      const likesBtn = document.querySelector(`.likes-btn[data-post-id="${postId}"] .stat-value`);
      if (likesBtn) {
        likesBtn.textContent = formatNumber(result.likesCount);
      }

      if (result.liked && authorId !== localStorage.getItem('userId')) {
        socketClient.likePost(postId, authorId);
      }
    } catch (error) {
      console.error('Error al dar like:', error);
    }
  }

  // Toggle comentarios
  async function toggleComments(postId) {
    const section = document.getElementById(`comments-${postId}`);
    const commentsList = section.querySelector('.comments-list');
    
    if (!section.classList.contains('collapsed')) {
      section.classList.add('collapsed');
      return;
    }

    section.classList.remove('collapsed');

    if (commentsList.innerHTML) return;

    try {
      const response = await fetch(`/api/posts/${postId}/comments`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const comments = await response.json();

      commentsList.innerHTML = comments.map(c => `
        <div class="comment-item">
          <img src="${c.author.profilePic || `https://ui-avatars.com/api/?name=${c.author.username}`}" 
               alt="${c.author.username}" 
               class="comment-avatar" />
          <div class="comment-body">
            <div class="comment-header">
              <a href="/profile/${c.author.username}" class="comment-author">${c.author.username}</a>
              <span class="comment-time">${formatTime(c.createdAt)}</span>
            </div>
            <p class="comment-text">${c.text}</p>
            <button class="comment-like-btn">
              <svg viewBox="0 0 24 24" width="14" height="14" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"/>
              </svg>
            </button>
          </div>
        </div>
      `).join('');
    } catch (error) {
      console.error('Error al cargar comentarios:', error);
    }
  }

  // Enviar comentario
  async function sendComment(postId) {
    const input = document.querySelector(`.comment-input[data-post-id="${postId}"]`);
    const text = input.value.trim();
    
    if (!text) return;

    try {
      await fetch(`/api/posts/${postId}/comments`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ text })
      });

      socketClient.addComment(postId, text);
      input.value = '';
      
      const commentsBtn = document.querySelector(`.comments-btn[data-post-id="${postId}"] .stat-value`);
      if (commentsBtn) {
        const count = parseInt(commentsBtn.textContent) + 1;
        commentsBtn.textContent = formatNumber(count);
      }

      toggleComments(postId);
      setTimeout(() => toggleComments(postId), 100);

      showToast('Comentario publicado', 'success');
    } catch (error) {
      console.error('Error:', error);
      showToast('Error al comentar', 'error');
    }
  }

  // Utilidades
  function formatTime(timestamp) {
    const now = new Date();
    const date = new Date(timestamp);
    const diff = now - date;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return 'Ahora';
    if (minutes < 60) return `${minutes}m`;
    if (hours < 24) return `${hours}h`;
    if (days < 7) return `${days}d`;
    return date.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' });
  }

  function formatNumber(num) {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
  }

  function linkifyHashtags(text) {
    return text.replace(/#(\w+)/g, '<a href="/explore/tags/$1" class="hashtag">#$1</a>');
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const icon = toast.querySelector('.toast-icon');
    const msg = toast.querySelector('.toast-message');
    
    const icons = {
      success: '✓',
      error: '✕',
      info: 'ℹ'
    };
    
    icon.textContent = icons[type] || icons.info;
    msg.textContent = message;
    toast.className = `toast-notification ${type}`;
    
    setTimeout(() => toast.classList.add('hidden'), 4000);
  }

  // Filter tabs
  document.querySelectorAll('.tab').forEach(tab => {
    tab.addEventListener('click', () => {
      document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      
      currentFilter = tab.dataset.filter;
      currentPage = 1;
      hasMore = true;
      loadFeed(1, currentFilter);
    });
  });

  // Infinite scroll
  const observer = new IntersectionObserver((entries) => {
    if (entries[0].isIntersecting && !isLoading && hasMore) {
      currentPage++;
      loadFeed(currentPage, currentFilter);
    }
  }, { threshold: 0.5 });

  const scrollTrigger = document.getElementById('scroll-trigger');
  if (scrollTrigger) observer.observe(scrollTrigger);

  // Create post buttons
  document.getElementById('create-post-btn')?.addEventListener('click', () => {
    document.getElementById('post-modal')?.classList.remove('hidden');
  });

  document.getElementById('quick-post-input')?.addEventListener('click', () => {
    document.getElementById('post-modal')?.classList.remove('hidden');
  });

  document.querySelectorAll('.quick-action-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.getElementById('post-modal')?.classList.remove('hidden');
    });
  });

  // Toast close
  document.querySelector('.toast-close')?.addEventListener('click', () => {
    document.getElementById('toast').classList.add('hidden');
  });

  // WebSocket listeners
  socketClient.on('post-liked', (data) => {
    const likesBtn = document.querySelector(`.likes-btn[data-post-id="${data.postId}"] .stat-value`);
    if (likesBtn) {
      likesBtn.textContent = formatNumber(parseInt(likesBtn.textContent) + 1);
    }
  });

  socketClient.on('comment-added', (data) => {
    const commentsBtn = document.querySelector(`.comments-btn[data-post-id="${data.postId}"] .stat-value`);
    if (commentsBtn) {
      commentsBtn.textContent = formatNumber(parseInt(commentsBtn.textContent) + 1);
    }
  });

  socketClient.on('notification', () => {
    const badge = document.getElementById('notif-badge');
    const count = parseInt(badge.textContent || '0') + 1;
    badge.textContent = count;
    badge.classList.remove('hidden');
  });

  socketClient.on('message-received', () => {
    const badge = document.getElementById('messages-badge');
    const count = parseInt(badge.textContent || '0') + 1;
    badge.textContent = count;
    badge.classList.remove('hidden');
  });

  // Initialize
  loadUserData();
  loadFeed();

  document.addEventListener('click', async (e) => {
    const saveBtn = e.target.closest('[data-action="save"]');
    if (saveBtn) {
      const postId = saveBtn.dataset.postId;
      
      try {
        const result = await savePost(postId);
        saveBtn.classList.toggle('active');
        
        const svg = saveBtn.querySelector('svg');
        const isActive = saveBtn.classList.contains('active');
        svg.setAttribute('fill', isActive ? 'currentColor' : 'none');
        
        showToast(result.saved ? 'Publicación guardada' : 'Guardado eliminado', 'success');
      } catch (error) {
        console.error('Error al guardar:', error);
        showToast('Error al guardar publicación', 'error');
      }
    }
  });

  // Botón de compartir
  document.addEventListener('click', async (e) => {
    const shareBtn = e.target.closest('[data-action="share"]');
    if (shareBtn) {
      const postId = shareBtn.closest('.post-card')?.dataset.postId;
      
      if (!postId) return;
      
      try {
        const result = await sharePost(postId);
        
        if (result.copied) {
          showToast('Enlace copiado al portapapeles', 'success');
        } else {
          showToast('Publicación compartida', 'success');
        }
      } catch (error) {
        console.error('Error al compartir:', error);
        showToast('Error al compartir', 'error');
      }
    }
  });

  // Menú de post (3 puntos)
  document.addEventListener('click', async (e) => {
    const menuBtn = e.target.closest('.post-menu-btn');
    if (menuBtn) {
      e.stopPropagation();
      
      // Cerrar otros menús abiertos
      document.querySelectorAll('.post-menu').forEach(m => {
        if (m !== menuBtn.nextElementSibling) {
          m.remove();
        }
      });
      
      // Si ya existe el menú, cerrarlo
      const existingMenu = menuBtn.nextElementSibling;
      if (existingMenu && existingMenu.classList.contains('post-menu')) {
        existingMenu.remove();
        return;
      }
      
      const postCard = menuBtn.closest('.post-card');
      const postId = postCard.dataset.postId;
      const post = postCard.querySelector('.author-name')?.textContent;
      const currentUser = localStorage.getItem('username');
      const isOwner = post === currentUser;
      
      const menu = document.createElement('div');
      menu.className = 'post-menu';
      menu.innerHTML = `
        <button class="menu-item" data-action="copy-link">
          <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M10 13a5 5 0 007.54.54l3-3a5 5 0 00-7.07-7.07l-1.72 1.71"/>
            <path d="M14 11a5 5 0 00-7.54-.54l-3 3a5 5 0 007.07 7.07l1.71-1.71"/>
          </svg>
          Copiar enlace
        </button>
        ${!isOwner ? `
          <button class="menu-item" data-action="report">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0z"/>
              <line x1="12" y1="9" x2="12" y2="13"/>
              <line x1="12" y1="17" x2="12.01" y2="17"/>
            </svg>
            Reportar
          </button>
          <button class="menu-item" data-action="hide">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
              <circle cx="12" cy="12" r="3"/>
              <line x1="3" y1="3" x2="21" y2="21"/>
            </svg>
            Ocultar publicación
          </button>
        ` : ''}
        ${isOwner ? `
          <button class="menu-item" data-action="edit">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"/>
              <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"/>
            </svg>
            Editar
          </button>
          <button class="menu-item danger" data-action="delete">
            <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="3 6 5 6 21 6"/>
              <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
              <line x1="10" y1="11" x2="10" y2="17"/>
              <line x1="14" y1="11" x2="14" y2="17"/>
            </svg>
            Eliminar
          </button>
        ` : ''}
      `;
      
      menuBtn.parentElement.style.position = 'relative';
      menuBtn.parentElement.appendChild(menu);
      
      // Cerrar al hacer click fuera
      setTimeout(() => {
        document.addEventListener('click', function closeMenu(e) {
          if (!menu.contains(e.target)) {
            menu.remove();
            document.removeEventListener('click', closeMenu);
          }
        });
      }, 10);
      
      // Acciones del menú
      menu.addEventListener('click', async (e) => {
        const item = e.target.closest('.menu-item');
        if (!item) return;
        const action = item.dataset.action;

        switch (action) {
          case 'copy-link':
            try {
              const url = `${window.location.origin}/post/${postId}`;
              await navigator.clipboard.writeText(url);
              showToast('Enlace copiado', 'success');
            } catch {
              showToast('Error al copiar enlace', 'error');
            }
            break;
          case 'report':
            showToast('Publicación reportada', 'success');
            break;
          case 'hide':
            postCard.style.display = 'none';
            showToast('Publicación oculta', 'success');
            break;
          case 'edit':
            showToast('Función de edición en desarrollo', 'info');
            break;
          case 'delete':
            if (confirm('¿Estás seguro de eliminar esta publicación?')) {
              try {
                await deletePost(postId);
                postCard.remove();
                showToast('Publicación eliminada', 'success');
              } catch {
                showToast('Error al eliminar', 'error');
              }
            }
            break;
        }
        menu.remove();
      });
    }
  });

  // Funcionalidad de stats
  document.addEventListener('click', (e) => {
    const likesBtn = e.target.closest('.likes-btn');
    if (likesBtn) showToast('Ver quién dio like (en desarrollo)', 'info');
    
    const commentsBtn = e.target.closest('.comments-btn');
    if (commentsBtn) toggleComments(commentsBtn.dataset.postId);
  });

  // Refresh de sugerencias
  document.querySelector('.refresh-btn')?.addEventListener('click', function() {
    this.style.transform = 'rotate(360deg)';
    showToast('Actualizando sugerencias...', 'info');
    setTimeout(() => {
      this.style.transform = '';
      showToast('Sugerencias actualizadas', 'success');
    }, 1000);
  });

  // Trending items
  document.querySelectorAll('.trending-item').forEach(item => {
    item.addEventListener('click', function() {
      const topic = this.querySelector('.trend-topic').textContent;
      showToast(`Explorando: ${topic}`, 'info');
    });
  });

  // Menú de post
  const menuStyles = document.createElement('style');
  menuStyles.textContent = `
    .post-menu {
      position: absolute;
      top: 100%;
      right: 0;
      background: var(--card-bg);
      border-radius: var(--radius-sm);
      box-shadow: var(--shadow-lg);
      min-width: 200px;
      z-index: 1000;
      padding: 8px;
      margin-top: 8px;
      animation: fadeIn 0.2s ease;
    }
    .menu-item {
      width: 100%;
      background: none;
      border: none;
      padding: 12px 16px;
      display: flex;
      align-items: center;
      gap: 12px;
      font-size: 14px;
      font-weight: 500;
      color: var(--dark);
      cursor: pointer;
      border-radius: var(--radius-sm);
      transition: all 0.2s;
      text-align: left;
    }
    .menu-item:hover { background: var(--gray-light); }
    .menu-item.danger { color: var(--error); }
    .menu-item.danger:hover { background: rgba(239, 68, 68, 0.1); }
    .menu-item svg { flex-shrink: 0; }
  `;
  document.head.appendChild(menuStyles);
</script>

<style>
  :root {
    --primary: #667BC6;
    --primary-dark: #5568b8;
    --secondary: #DA7297;
    --accent: #FADA7A;
    --dark: #2d2d2d;
    --gray: #6b7280;
    --gray-light: #f3f4f6;
    --border: #e5e7eb;
    --success: #10b981;
    --error: #ef4444;
    --card-bg: #ffffff;
    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
    --radius: 12px;
    --radius-sm: 8px;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    background: var(--gray-light);
    color: var(--dark);
    line-height: 1.6;
  }

  /* ===== MAIN LAYOUT ===== */
  .social-layout {
    display: grid;
    grid-template-columns: 280px 1fr 340px;
    gap: 24px;
    max-width: 1400px;
    margin: 90px auto 40px;
    padding: 0 24px;
  }

  /* ===== SIDEBAR LEFT ===== */
  .sidebar-left {
    position: sticky;
    top: 90px;
    height: fit-content;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .user-profile-card {
    background: var(--card-bg);
    border-radius: var(--radius);
    padding: 24px;
    box-shadow: var(--shadow-sm);
    text-align: center;
  }

  .profile-header {
    position: relative;
    display: inline-block;
    margin-bottom: 16px;
  }

  .profile-avatar {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid var(--primary);
  }

  .profile-badge {
    position: absolute;
    bottom: 2px;
    right: 2px;
    width: 20px;
    height: 20px;
    background: var(--success);
    border: 3px solid var(--card-bg);
    border-radius: 50%;
  }

  .profile-name {
    font-size: 18px;
    font-weight: 700;
    color: var(--dark);
    margin-bottom: 4px;
  }

  .profile-handle {
    font-size: 14px;
    color: var(--gray);
    margin-bottom: 20px;
  }

  .profile-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 16px;
    padding-top: 20px;
    border-top: 1px solid var(--border);
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .stat-number {
    font-size: 20px;
    font-weight: 700;
    color: var(--primary);
  }

  .stat-label {
    font-size: 12px;
    color: var(--gray);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* ===== NAVIGATION ===== */
  .main-navigation {
    background: var(--card-bg);
    border-radius: var(--radius);
    padding: 12px;
    box-shadow: var(--shadow-sm);
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .nav-link {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    border-radius: var(--radius-sm);
    color: var(--gray);
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s;
    position: relative;
  }

  .nav-link:hover {
    background: var(--gray-light);
    color: var(--dark);
  }

  .nav-link.active {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
  }

  .nav-link svg {
    flex-shrink: 0;
  }

  .notification-badge {
    position: absolute;
    right: 12px;
    background: var(--error);
    color: white;
    font-size: 11px;
    font-weight: 700;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 20px;
    text-align: center;
  }

  .notification-badge.hidden {
    display: none;
  }

  .create-post-btn {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    border: none;
    padding: 14px 20px;
    border-radius: var(--radius);
    font-weight: 600;
    font-size: 15px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    box-shadow: var(--shadow-md);
    transition: all 0.3s;
  }

  .create-post-btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  .create-post-btn:active {
    transform: translateY(0);
  }

  /* ===== MAIN CONTENT ===== */
  .main-content {
    max-width: 680px;
  }

  .section-title {
    font-size: 22px;
    font-weight: 700;
    color: var(--dark);
    margin-bottom: 16px;
  }

  .stories-section {
    margin-bottom: 24px;
  }

  /* ===== QUICK POST ===== */
  .quick-post-card {
    background: var(--card-bg);
    border-radius: var(--radius);
    padding: 20px;
    box-shadow: var(--shadow-sm);
    display: flex;
    align-items: center;
    gap: 16px;
    margin-bottom: 24px;
  }

  .quick-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid var(--primary);
  }

  .quick-input {
    flex: 1;
    background: var(--gray-light);
    border: 1px solid var(--border);
    padding: 12px 20px;
    border-radius: 24px;
    font-size: 15px;
    color: var(--gray);
    cursor: pointer;
    text-align: left;
    transition: all 0.2s;
  }

  .quick-input:hover {
    border-color: var(--primary);
    background: white;
  }

  .quick-actions {
    display: flex;
    gap: 8px;
  }

  .quick-action-btn {
    background: none;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--gray);
    transition: all 0.2s;
  }

  .quick-action-btn:hover {
    background: var(--gray-light);
    color: var(--primary);
  }

  /* ===== FILTER TABS ===== */
  .filter-tabs {
    display: flex;
    gap: 12px;
    margin-bottom: 24px;
    background: var(--card-bg);
    padding: 8px;
    border-radius: var(--radius);
    box-shadow: var(--shadow-sm);
  }

  .tab {
    flex: 1;
    background: none;
    border: none;
    padding: 10px 16px;
    border-radius: var(--radius-sm);
    font-weight: 600;
    font-size: 14px;
    color: var(--gray);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all 0.2s;
  }

  .tab:hover {
    background: var(--gray-light);
    color: var(--dark);
  }

  .tab.active {
    background: var(--primary);
    color: white;
  }

  /* ===== POSTS GRID ===== */
  .posts-grid {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .post-card {
    background: var(--card-bg);
    border-radius: var(--radius);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
    transition: all 0.3s;
  }

  .post-card:hover {
    box-shadow: var(--shadow-md);
  }

  .post-card-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 16px 20px;
  }

  .author-info {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .author-avatar {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    object-fit: cover;
  }

  .author-details {
    display: flex;
    flex-direction: column;
  }

  .author-name {
    font-weight: 600;
    font-size: 15px;
    color: var(--dark);
    text-decoration: none;
    transition: color 0.2s;
  }

  .author-name:hover {
    color: var(--primary);
  }

  .post-timestamp {
    font-size: 13px;
    color: var(--gray);
  }

  .post-menu-btn {
    background: none;
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--gray);
    transition: all 0.2s;
  }

  .post-menu-btn:hover {
    background: var(--gray-light);
  }

  .post-content {
    padding: 0 20px 16px;
  }

  .post-text {
    font-size: 15px;
    line-height: 1.6;
    color: var(--dark);
    word-wrap: break-word;
  }

  .hashtag {
    color: var(--primary);
    font-weight: 600;
    text-decoration: none;
  }

  .hashtag:hover {
    text-decoration: underline;
  }

  .post-media {
    position: relative;
    width: 100%;
    max-height: 600px;
    background: #000;
  }

  .post-image {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
  }

  .media-counter {
    position: absolute;
    top: 16px;
    right: 16px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 6px;
    backdrop-filter: blur(10px);
  }

  .post-engagement {
    padding: 16px 20px;
  }

  .engagement-stats {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-bottom: 16px;
    padding-bottom: 16px;
    border-bottom: 1px solid var(--border);
  }

  .stat-btn {
    background: none;
    border: none;
    display: flex;
    align-items: center;
    gap: 6px;
    cursor: pointer;
    color: var(--dark);
    font-weight: 600;
    transition: color 0.2s;
  }

  .stat-btn:hover {
    color: var(--primary);
  }

  .stat-value {
    font-size: 16px;
  }

  .stat-label {
    font-size: 14px;
    color: var(--gray);
  }

  .stat-views {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 14px;
    color: var(--gray);
    margin-left: auto;
  }

  .post-actions {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 8px;
  }

  .action-button {
    background: var(--gray-light);
    border: 1px solid var(--border);
    padding: 10px;
    border-radius: var(--radius-sm);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 600;
    color: var(--gray);
    cursor: pointer;
    transition: all 0.2s;
  }

  .action-button:hover {
    background: white;
    border-color: var(--primary);
    color: var(--primary);
  }

  .action-button.active {
    background: var(--primary);
    border-color: var(--primary);
    color: white;
  }

  .action-button span {
    display: none;
  }

  @media (min-width: 640px) {
    .action-button span {
      display: inline;
    }
  }

  /* ===== COMMENTS ===== */
  .comments-section {
    border-top: 1px solid var(--border);
    padding: 20px;
    max-height: 500px;
    overflow-y: auto;
    transition: all 0.3s;
  }

  .comments-section.collapsed {
    max-height: 0;
    padding: 0;
    overflow: hidden;
  }

  .comments-list {
    margin-bottom: 20px;
  }

  .comment-item {
    display: flex;
    gap: 12px;
    margin-bottom: 16px;
  }

  .comment-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
  }

  .comment-body {
    flex: 1;
    background: var(--gray-light);
    padding: 12px 16px;
    border-radius: var(--radius-sm);
    position: relative;
  }

  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 6px;
  }

  .comment-author {
    font-weight: 600;
    font-size: 14px;
    color: var(--dark);
    text-decoration: none;
  }

  .comment-author:hover {
    color: var(--primary);
  }

  .comment-time {
    font-size: 12px;
    color: var(--gray);
  }

  .comment-text {
    font-size: 14px;
    line-height: 1.5;
    color: var(--dark);
  }

  .comment-like-btn {
    position: absolute;
    top: 12px;
    right: 12px;
    background: none;
    border: none;
    cursor: pointer;
    color: var(--gray);
    transition: color 0.2s;
  }

  .comment-like-btn:hover {
    color: var(--error);
  }

  .comment-input-wrapper {
    display: flex;
    align-items: center;
    gap: 12px;
    background: var(--gray-light);
    padding: 12px;
    border-radius: var(--radius);
  }

  .comment-user-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
  }

  .comment-input {
    flex: 1;
    background: white;
    border: 1px solid var(--border);
    padding: 10px 16px;
    border-radius: 20px;
    font-size: 14px;
    outline: none;
    transition: all 0.2s;
  }

  .comment-input:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(102, 123, 198, 0.1);
  }

  .send-comment-btn {
    background: var(--primary);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: white;
    transition: all 0.2s;
  }

  .send-comment-btn:hover {
    background: var(--primary-dark);
    transform: scale(1.05);
  }

  /* ===== SIDEBAR RIGHT ===== */
  .sidebar-right {
    position: sticky;
    top: 90px;
    height: fit-content;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .widget {
    background: var(--card-bg);
    border-radius: var(--radius);
    padding: 20px;
    box-shadow: var(--shadow-sm);
  }

  .widget-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
  }

  .widget-title {
    font-size: 16px;
    font-weight: 700;
    color: var(--dark);
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .refresh-btn {
    background: none;
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--gray);
    transition: all 0.2s;
  }

  .refresh-btn:hover {
    background: var(--gray-light);
    color: var(--primary);
    transform: rotate(180deg);
  }

  /* ===== TRENDING ===== */
  .trending-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .trending-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    border-radius: var(--radius-sm);
    transition: all 0.2s;
    cursor: pointer;
  }

  .trending-item:hover {
    background: var(--gray-light);
  }

  .trend-rank {
    font-size: 18px;
    font-weight: 700;
    color: var(--primary);
    min-width: 32px;
  }

  .trend-info {
    flex: 1;
  }

  .trend-topic {
    font-size: 15px;
    font-weight: 600;
    color: var(--dark);
    margin-bottom: 2px;
  }

  .trend-count {
    font-size: 13px;
    color: var(--gray);
  }

  /* ===== STATS WIDGET ===== */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }

  .stat-card {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    padding: 16px;
    border-radius: var(--radius-sm);
    color: white;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .stat-icon {
    font-size: 24px;
  }

  .stat-data {
    display: flex;
    flex-direction: column;
  }

  .stat-value {
    font-size: 20px;
    font-weight: 700;
  }

  .stat-name {
    font-size: 12px;
    opacity: 0.9;
  }

  /* ===== LOADING & EMPTY STATES ===== */
  .loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
  }

  .loader {
    width: 48px;
    height: 48px;
    border: 4px solid var(--border);
    border-top-color: var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 16px;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .empty-state {
    text-align: center;
    padding: 80px 40px;
  }

  .empty-icon {
    color: var(--gray);
    margin-bottom: 20px;
  }

  .empty-state h3 {
    font-size: 22px;
    font-weight: 700;
    color: var(--dark);
    margin-bottom: 8px;
  }

  .empty-state p {
    font-size: 15px;
    color: var(--gray);
    margin-bottom: 24px;
  }

  .btn-primary {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: var(--radius);
    font-weight: 600;
    font-size: 15px;
    cursor: pointer;
    transition: all 0.3s;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  /* ===== TOAST ===== */
  .toast-notification {
    position: fixed;
    top: 100px;
    right: 24px;
    background: var(--card-bg);
    padding: 16px 20px;
    border-radius: var(--radius);
    box-shadow: var(--shadow-lg);
    display: flex;
    align-items: center;
    gap: 12px;
    z-index: 1000;
    min-width: 300px;
    animation: slideIn 0.3s ease;
  }

  .toast-notification.hidden {
    display: none;
  }

  .toast-notification.success {
    border-left: 4px solid var(--success);
  }

  .toast-notification.error {
    border-left: 4px solid var(--error);
  }

  .toast-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 18px;
  }

  .toast-notification.success .toast-icon {
    background: var(--success);
    color: white;
  }

  .toast-notification.error .toast-icon {
    background: var(--error);
    color: white;
  }

  .toast-content {
    flex: 1;
  }

  .toast-message {
    font-size: 14px;
    font-weight: 500;
    color: var(--dark);
  }

  .toast-close {
    background: none;
    border: none;
    font-size: 24px;
    color: var(--gray);
    cursor: pointer;
    line-height: 1;
    transition: color 0.2s;
  }

  .toast-close:hover {
    color: var(--dark);
  }

  @keyframes slideIn {
    from {
      transform: translateX(400px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* ===== RESPONSIVE ===== */
  @media (max-width: 1200px) {
    .social-layout {
      grid-template-columns: 280px 1fr;
    }

    .sidebar-right {
      display: none;
    }
  }

  @media (max-width: 900px) {
    .social-layout {
      grid-template-columns: 1fr;
      margin-top: 70px;
      padding: 0 16px;
    }

    .sidebar-left {
      display: none;
    }

    .main-content {
      max-width: 100%;
    }

    .filter-tabs {
      overflow-x: auto;
      scrollbar-width: none;
    }

    .filter-tabs::-webkit-scrollbar {
      display: none;
    }
  }

  @media (max-width: 640px) {
    .social-layout {
      padding: 0;
      gap: 16px;
      margin-top: 60px;
    }

    .quick-post-card {
      border-radius: 0;
      margin-bottom: 16px;
    }

    .filter-tabs {
      border-radius: 0;
      margin-bottom: 16px;
    }

    .posts-grid {
      gap: 16px;
    }

    .post-card {
      border-radius: 0;
    }

    .post-card-header {
      padding: 12px 16px;
    }

    .post-content {
      padding: 0 16px 12px;
    }

    .post-engagement {
      padding: 12px 16px;
    }

    .engagement-stats {
      flex-wrap: wrap;
      gap: 12px;
    }

    .post-actions {
      grid-template-columns: repeat(2, 1fr);
      gap: 8px;
    }

    .action-button {
      padding: 12px 8px;
      font-size: 13px;
    }

    .comments-section {
      padding: 16px;
    }

    .toast-notification {
      right: 16px;
      left: 16px;
      min-width: auto;
    }
  }

  /* ===== SCROLLBAR STYLING ===== */
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  ::-webkit-scrollbar-track {
    background: var(--gray-light);
  }

  ::-webkit-scrollbar-thumb {
    background: var(--border);
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: var(--gray);
  }

  /* ===== ANIMATIONS ===== */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .post-card {
    animation: fadeIn 0.4s ease;
  }

  /* ===== ACCESSIBILITY ===== */
  .nav-link:focus,
  .tab:focus,
  .action-button:focus,
  .create-post-btn:focus,
  .quick-input:focus,
  .comment-input:focus {
    outline: 3px solid rgba(102, 123, 198, 0.4);
    outline-offset: 2px;
  }

  /* ===== SELECTION ===== */
  ::selection {
    background: rgba(102, 123, 198, 0.3);
    color: var(--dark);
  }

  /* ===== SMOOTH SCROLLING ===== */
  html {
    scroll-behavior: smooth;
  }

  /* ===== MOBILE BOTTOM NAV (Optional) ===== */
  @media (max-width: 900px) {
    body {
      padding-bottom: 70px;
    }

    .mobile-bottom-nav {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: var(--card-bg);
      border-top: 1px solid var(--border);
      padding: 8px 0;
      display: flex;
      justify-content: space-around;
      align-items: center;
      z-index: 100;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
    }

    .mobile-nav-btn {
      background: none;
      border: none;
      padding: 8px;
      cursor: pointer;
      color: var(--gray);
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 4px;
      font-size: 11px;
      transition: color 0.2s;
    }

    .mobile-nav-btn.active {
      color: var(--primary);
    }

    .mobile-nav-btn svg {
      width: 24px;
      height: 24px;
    }
  }

  /* ===== DARK MODE SUPPORT ===== */
  @media (prefers-color-scheme: dark) {
    :root {
      --dark: #ffffff;
      --gray: #9ca3af;
      --gray-light: #1f2937;
      --border: #374151;
      --card-bg: #111827;
      --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.3);
      --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.3);
      --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.3);
    }

    body {
      background: #0f172a;
    }

    .quick-input {
      background: #1f2937;
      color: var(--dark);
    }

    .comment-input {
      background: #1f2937;
      color: var(--dark);
    }

    .post-media {
      background: #0f172a;
    }
  }

  /* ===== HOVER EFFECTS ===== */
  .post-card {
    position: relative;
  }

  .post-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), var(--secondary), var(--accent));
    opacity: 0;
    transition: opacity 0.3s;
  }

  .post-card:hover::before {
    opacity: 1;
  }

  /* ===== GRADIENT ACCENTS ===== */
  .gradient-text {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* ===== SKELETON LOADING (Optional) ===== */
  .skeleton {
    background: linear-gradient(90deg, var(--gray-light) 25%, #e0e0e0 50%, var(--gray-light) 75%);
    background-size: 200% 100%;
    animation: loading 1.5s ease-in-out infinite;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  .skeleton-avatar {
    width: 44px;
    height: 44px;
    border-radius: 50%;
  }

  .skeleton-text {
    height: 16px;
    border-radius: 4px;
    margin-bottom: 8px;
  }

  .skeleton-image {
    width: 100%;
    height: 400px;
    border-radius: var(--radius);
  }

  /* ===== PREMIUM POLISH ===== */
  .glass-effect {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .neon-glow {
    box-shadow: 0 0 20px rgba(102, 123, 198, 0.3),
                0 0 40px rgba(102, 123, 198, 0.2);
  }

  /* ===== PRINT STYLES ===== */
  @media print {
    .sidebar-left,
    .sidebar-right,
    .filter-tabs,
    .quick-post-card,
    .post-actions,
    .comments-section,
    .toast-notification {
      display: none;
    }

    .social-layout {
      grid-template-columns: 1fr;
    }

    .post-card {
      break-inside: avoid;
      page-break-inside: avoid;
    }
  }

  /* ===== TRANSITIONS ===== */
  * {
    transition: background-color 0.2s ease,
                border-color 0.2s ease,
                color 0.2s ease;
  }

  button,
  a,
  input {
    transition: all 0.2s ease;
  }

  /* ===== FOCUS VISIBLE (Better Accessibility) ===== */
  :focus-visible {
    outline: 3px solid var(--primary);
    outline-offset: 2px;
  }

  :focus:not(:focus-visible) {
    outline: none;
  }

  /* ===== REDUCED MOTION ===== */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>