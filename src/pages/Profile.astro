---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
import PopularCollections from '../components/PopularCollections.astro';
import Bibliography from '../components/Bibliography.astro';
---

<Layout title="Perfil">
  <Navigation />

  <div class="profile-container">
    <!-- üîπ IZQUIERDA -->
    <aside class="left-section">
      <div class="profile-pic-container">
        <img
          id="profile-pic"
          src="https://ui-avatars.com/api/?name=Usuario&background=72B340&color=fff"
          alt="Usuario"
          class="profile-image"
        />
        <div class="upload-section">
          <input type="file" id="upload-input" accept="image/*" hidden />
          <button id="upload-btn" class="upload-button">Cambiar foto</button>
        </div>
      </div>

      <!-- üî∏ Modal para cambiar foto -->
      <div id="photoModal" class="modal hidden">
        <h2>Cambiar foto de perfil</h2>
        <div class="modal-options">
          <button id="upload-file-btn" class="modal-btn">üìÅ Subir desde dispositivo</button>
          <button id="upload-url-btn" class="modal-btn">üåê Usar imagen desde Internet</button>
        </div>
        <form id="urlForm" class="hidden">
          <input type="url" id="imageUrl" placeholder="Pega la URL de la imagen..." />
          <button type="submit" class="modal-btn confirm">Guardar</button>
        </form>
        <button id="closeModalBtn" class="close-modal">Cancelar</button>
      </div>

      <div class="user-info">
        <h2 id="user-name">Cargando...</h2>
        <label for="status-select" class="status-label">Estado:</label>
        <select id="status-select">
          <option value="Online">Online</option>
          <option value="Away">Away</option>
          <option value="Busy">Ocupado</option>
          <option value="Offline">Offline</option>
        </select>

        <div class="user-stats">
          <p><span id="recipes-count">0</span> Recetas</p>
          <p id="followers-count">0 Seguidores</p>
          <p id="likes-count">0 Likes</p>
        </div>

        <div class="user-links">
          <a href="/blog">Blog</a>
          <a href="/Archives">Archivos</a>
          <a href="/Recipes">Colecciones</a>
          <button id="go-to-feed" class="feed-btn">Ir al Feed</button>
          <button id="logout-button" class="logout-button">Cerrar sesi√≥n</button>
        </div>
      </div>
    </aside>

    <!-- üîπ CENTRO -->
    <main class="main-section">
      <input 
        type="text" 
        id="profile-search" 
        placeholder="Buscar usuarios..." 
        class="search-input" 
      />
      <div id="profile-search-results" class="search-results hidden"></div>

      <div class="banner">
        <img src="/src/img/1.png" alt="Banner" class="banner-image" />
      </div>

      <PopularCollections />

      <div class="team-info">
        <h3 class="team"><span id="team-user-name">Usuario</span> aparece en este equipo</h3>
        <div class="team-card">
          <h4>ROYAL UI FORCE</h4>
          <p>Formado en 2013</p>
          <button id="follow-team-button">Seguir Equipo</button>
          <p><span id="team-member-name">USUARIO</span> es miembro desde nov, 2014</p>
        </div>
      </div>
    </main>

    <!-- üîπ DERECHA -->
    <aside class="right-section">
      <Bibliography
        id="bio-description"
        description="Descripci√≥n no disponible"
        website="https://youtube.com/cdecp"
        skills={[]}
      />
      <textarea
        id="bio-editor"
        class="bio-editor"
        placeholder="Escribe tu biograf√≠a aqu√≠..."
      ></textarea>
      <button id="save-bio-btn" class="save-bio-btn">Guardar biograf√≠a</button>
    </aside>
  </div>

  <!-- Modal de Seguidores -->
  <div id="followersModal" class="modal hidden">
    <div class="modal-content">
      <button class="close-modal" onclick="document.getElementById('followersModal').classList.add('hidden')">√ó</button>
      <h2>Seguidores</h2>
      <div id="followersList" class="followers-list"></div>
    </div>
  </div>

  <!-- Modal de Likes -->
  <div id="likesModal" class="modal hidden">
    <div class="modal-content">
      <button class="close-modal" onclick="document.getElementById('likesModal').classList.add('hidden')">√ó</button>
      <h2>Likes</h2>
      <div id="likesList" class="likes-list"></div>
    </div>
  </div>

  <div id="notification" class="notification hidden"></div>
  <p id="error-message" class="error-text"></p>
</Layout>

<script>
  // ============================================================
  // üéØ PROFILE.ASTRO - SCRIPT COMPLETO
  // ============================================================

  let currentUser = null;

  // Funci√≥n para mostrar notificaciones
  function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.classList.remove('hidden');
    
    setTimeout(() => {
      notification.classList.add('hidden');
    }, 3000);
  }

  // Cargar datos del perfil
  async function loadProfileData() {
    try {
      console.log('üîÑ Cargando perfil del usuario...');
      
      const response = await fetch('http://localhost:3000/api/user/me', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        if (response.status === 401) {
          window.location.href = '/login';
          return;
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const user = await response.json();
      console.log('‚úÖ Usuario cargado:', user);

      if (!user.loggedIn) {
        window.location.href = '/login';
        return;
      }

      currentUser = user;

      // Actualizar imagen de perfil
      const profilePic = document.getElementById('profile-pic');
      if (profilePic) {
        profilePic.src = user.profilePic || 
          `https://ui-avatars.com/api/?name=${encodeURIComponent(user.username)}&background=72B340&color=fff`;
      }
      
      // Actualizar nombre de usuario
      const userName = document.getElementById('user-name');
      const teamUserName = document.getElementById('team-user-name');
      const teamMemberName = document.getElementById('team-member-name');
      
      if (userName) userName.textContent = user.username || 'Usuario';
      if (teamUserName) teamUserName.textContent = user.username || 'Usuario';
      if (teamMemberName) teamMemberName.textContent = (user.username || 'USUARIO').toUpperCase();

      // Actualizar estado
      const statusSelect = document.getElementById('status-select');
      if (statusSelect && user.status) {
        statusSelect.value = user.status;
      }

      // Actualizar biograf√≠a
      const bioEditor = document.getElementById('bio-editor');
      const bioDescription = document.getElementById('bio-description');
      if (bioEditor) bioEditor.value = user.bio || '';
      if (bioDescription) bioDescription.textContent = user.bio || 'Sin biograf√≠a';

      // ‚≠ê ACTUALIZAR ESTAD√çSTICAS
      if (user.stats) {
        console.log('üìä Actualizando estad√≠sticas:', user.stats);
        
        const recipesCount = document.getElementById('recipes-count');
        const followersCount = document.getElementById('followers-count');
        const likesCount = document.getElementById('likes-count');
        
        if (recipesCount) recipesCount.textContent = user.stats.recipesLiked || 0;
        if (followersCount) followersCount.textContent = `${user.stats.followers || 0} Seguidores`;
        if (likesCount) likesCount.textContent = `${user.stats.totalLikes || 0} Likes`;

        console.log('‚úÖ Estad√≠sticas actualizadas');
      }

      return user;
    } catch (error) {
      console.error('‚ùå Error cargando perfil:', error);
      showNotification('Error al cargar el perfil', 'error');
      return null;
    }
  }

  // Cambiar estado del usuario
  document.getElementById('status-select')?.addEventListener('change', async (e) => {
    try {
      const newStatus = e.target.value;
      console.log('üîÑ Cambiando estado a:', newStatus);

      const response = await fetch('http://localhost:3000/profile/status', {
        method: 'PUT',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (!response.ok) throw new Error('Error al cambiar estado');

      const data = await response.json();
      console.log('‚úÖ Estado actualizado:', data);
      showNotification('Estado actualizado correctamente', 'success');
    } catch (error) {
      console.error('‚ùå Error cambiando estado:', error);
      showNotification('Error al cambiar el estado', 'error');
    }
  });

  // Guardar biograf√≠a
  document.getElementById('save-bio-btn')?.addEventListener('click', async () => {
    try {
      const bioEditor = document.getElementById('bio-editor');
      const newBio = bioEditor.value.trim();

      console.log('üíæ Guardando biograf√≠a:', newBio);

      const response = await fetch('http://localhost:3000/profile/bio', {
        method: 'PUT',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ bio: newBio })
      });

      if (!response.ok) throw new Error('Error al guardar biograf√≠a');

      const data = await response.json();
      console.log('‚úÖ Biograf√≠a guardada:', data);
      
      const bioDescription = document.getElementById('bio-description');
      if (bioDescription) bioDescription.textContent = newBio || 'Sin biograf√≠a';
      
      showNotification('Biograf√≠a actualizada correctamente', 'success');
    } catch (error) {
      console.error('‚ùå Error guardando biograf√≠a:', error);
      showNotification('Error al guardar la biograf√≠a', 'error');
    }
  });

  // Modal de cambio de foto
  const photoModal = document.getElementById('photoModal');
  const uploadBtn = document.getElementById('upload-btn');
  const closeModalBtn = document.getElementById('closeModalBtn');
  const uploadFileBtn = document.getElementById('upload-file-btn');
  const uploadUrlBtn = document.getElementById('upload-url-btn');
  const uploadInput = document.getElementById('upload-input');
  const urlForm = document.getElementById('urlForm');

  uploadBtn?.addEventListener('click', () => {
    photoModal?.classList.remove('hidden');
  });

  closeModalBtn?.addEventListener('click', () => {
    photoModal?.classList.add('hidden');
    urlForm?.classList.add('hidden');
  });

  uploadFileBtn?.addEventListener('click', () => {
    uploadInput?.click();
  });

  uploadUrlBtn?.addEventListener('click', () => {
    urlForm?.classList.remove('hidden');
  });

  // Subir imagen desde archivo
  uploadInput?.addEventListener('change', async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    try {
      console.log('üì§ Subiendo imagen:', file.name);
      
      const formData = new FormData();
      formData.append('profilePic', file);

      const response = await fetch('http://localhost:3000/profile/upload', {
        method: 'POST',
        credentials: 'include',
        body: formData
      });

      if (!response.ok) throw new Error('Error al subir imagen');

      const data = await response.json();
      console.log('‚úÖ Imagen subida:', data);

      const profilePic = document.getElementById('profile-pic');
      if (profilePic && data.profilePic) {
        profilePic.src = data.profilePic;
      }

      photoModal?.classList.add('hidden');
      urlForm?.classList.add('hidden');
      showNotification('Foto de perfil actualizada', 'success');
    } catch (error) {
      console.error('‚ùå Error subiendo imagen:', error);
      showNotification('Error al subir la imagen', 'error');
    }
  });

  // Subir imagen desde URL
  urlForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const imageUrlInput = document.getElementById('imageUrl');
    const imageUrl = imageUrlInput.value.trim();

    if (!imageUrl) {
      showNotification('Por favor ingresa una URL v√°lida', 'error');
      return;
    }

    try {
      console.log('üåê Guardando URL de imagen:', imageUrl);

      // Aqu√≠ podr√≠as validar la URL o guardarla directamente
      const profilePic = document.getElementById('profile-pic');
      if (profilePic) {
        profilePic.src = imageUrl;
      }

      // Opcional: guardar en el servidor
      // await fetch('http://localhost:3000/profile/update-pic-url', { ... });

      photoModal?.classList.add('hidden');
      urlForm?.classList.add('hidden');
      imageUrlInput.value = '';
      showNotification('Foto de perfil actualizada', 'success');
    } catch (error) {
      console.error('‚ùå Error con URL:', error);
      showNotification('Error al cargar la imagen desde URL', 'error');
    }
  });

  // Buscar usuarios en el profile
  let searchTimeout;
  const profileSearch = document.getElementById('profile-search');
  const profileSearchResults = document.getElementById('profile-search-results');

  profileSearch?.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    const query = e.target.value.trim();

    if (query.length < 2) {
      profileSearchResults?.classList.add('hidden');
      return;
    }

    searchTimeout = setTimeout(async () => {
      try {
        const response = await fetch(`http://localhost:3000/api/users/search?q=${encodeURIComponent(query)}`, {
          credentials: 'include'
        });

        if (!response.ok) throw new Error('Error en b√∫squeda');

        const users = await response.json();
        
        if (users.length === 0) {
          profileSearchResults.innerHTML = '<div class="no-results">No se encontraron usuarios</div>';
        } else {
          profileSearchResults.innerHTML = users.map(user => `
            <div class="search-result-item" data-user-id="${user._id}">
              <img src="${user.profilePic || `https://ui-avatars.com/api/?name=${user.username}`}" alt="${user.username}" />
              <div>
                <strong>${user.username}</strong>
                <p>${user.email || ''}</p>
              </div>
            </div>
          `).join('');

          document.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', () => {
              window.location.href = `/Profile?user=${item.dataset.userId}`;
            });
          });
        }
        
        profileSearchResults?.classList.remove('hidden');
      } catch (error) {
        console.error('‚ùå Error en b√∫squeda:', error);
      }
    }, 300);
  });

  // Ver seguidores
  document.getElementById('followers-count')?.addEventListener('click', async () => {
    try {
      if (!currentUser) return;

      console.log('üë• Cargando seguidores...');

      const response = await fetch(`http://localhost:3000/api/users/${currentUser._id}/followers`, {
        credentials: 'include'
      });

      if (!response.ok) throw new Error('Error al cargar seguidores');

      const followers = await response.json();
      console.log('‚úÖ Seguidores:', followers);

      const followersList = document.getElementById('followersList');
      if (followersList) {
        followersList.innerHTML = followers.length > 0
          ? followers.map(f => `
              <div class="follower-item">
                <img src="${f.profilePic || `https://ui-avatars.com/api/?name=${f.username}`}" alt="${f.username}" />
                <span>${f.username}</span>
              </div>
            `).join('')
          : '<p>No tienes seguidores a√∫n</p>';
      }

      document.getElementById('followersModal')?.classList.remove('hidden');
    } catch (error) {
      console.error('‚ùå Error cargando seguidores:', error);
      showNotification('Error al cargar seguidores', 'error');
    }
  });

  // Ver likes (posts con likes)
  document.getElementById('likes-count')?.addEventListener('click', async () => {
    try {
      if (!currentUser) return;

      console.log('‚ù§Ô∏è Cargando posts con likes...');

      const response = await fetch(`http://localhost:3000/api/users/${currentUser._id}/liked-posts`, {
        credentials: 'include'
      });

      if (!response.ok) throw new Error('Error al cargar likes');

      const likedPosts = await response.json();
      console.log('‚úÖ Posts con likes:', likedPosts);

      const likesList = document.getElementById('likesList');
      if (likesList) {
        likesList.innerHTML = likedPosts.length > 0
          ? likedPosts.map(post => `
              <div class="like-item">
                <img src="${post.images?.[0] || '/placeholder.jpg'}" alt="Post" />
                <div>
                  <p>${post.caption || 'Sin descripci√≥n'}</p>
                  <span>${post.likes?.length || 0} likes</span>
                </div>
              </div>
            `).join('')
          : '<p>No has dado likes a√∫n</p>';
      }

      document.getElementById('likesModal')?.classList.remove('hidden');
    } catch (error) {
      console.error('‚ùå Error cargando likes:', error);
      showNotification('Error al cargar likes', 'error');
    }
  });

  // Ir al feed
  document.getElementById('go-to-feed')?.addEventListener('click', () => {
    window.location.href = '/Social';
  });

  // Cerrar sesi√≥n
  document.getElementById('logout-button')?.addEventListener('click', async () => {
    if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
      try {
        await fetch('http://localhost:3000/logout', { 
          method: 'POST',
          credentials: 'include' 
        });
        window.location.href = '/login';
      } catch (error) {
        console.error('‚ùå Error cerrando sesi√≥n:', error);
      }
    }
  });

  // Cerrar modales al hacer clic fuera
  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
      e.target.classList.add('hidden');
    }
  });

  // Inicializar
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadProfileData);
  } else {
    loadProfileData();
  }
</script>

<style>
  :root {
    --primary: #72b340;
    --dark-bg: #3b432b;
    --light: #fff;
  }

  .profile-container {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    gap: 20px;
    padding: 20px;
    max-width: 1200px;
    margin: 100px auto 50px;
  }

  .left-section, .right-section {
    background: var(--dark-bg);
    color: var(--light);
    padding: 20px;
    border-radius: 10px;
  }

  .profile-pic-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .profile-image {
    width: 160px;
    height: 160px;
    border-radius: 50%;
    border: 3px solid #fff;
    object-fit: cover;
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
  }

  .upload-button, .logout-button, .feed-btn {
    background: var(--primary);
    border: none;
    padding: 10px 16px;
    border-radius: 8px;
    color: white;
    font-weight: 500;
    margin-top: 10px;
    width: 100%;
    cursor: pointer;
    transition: transform 0.2s, background 0.2s;
  }

  .upload-button:hover, .feed-btn:hover {
    background: #5a9332;
    transform: scale(1.05);
  }

  .logout-button {
    background: #e53935;
  }

  .logout-button:hover {
    background: #c62828;
  }

  .user-info {
    text-align: center;
    margin-top: 15px;
  }

  .user-stats p {
    margin: 5px 0;
  }

  .user-links a {
    color: white;
    text-decoration: none;
    display: block;
    margin-top: 8px;
    font-weight: 500;
  }

  .user-links a:hover {
    text-decoration: underline;
  }

  .main-section {
    background: white;
    border-radius: 10px;
    padding: 20px;
  }

  .search-input {
    width: 100%;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
  }

  .banner-image {
    width: 100%;
    border-radius: 10px;
  }

  .team-card {
    background: white;
    color: #831400;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    margin-top: 20px;
  }

  .right-section {
    display: flex;
    flex-direction: column;
  }

  .bio-editor {
    margin-top: 20px;
    padding: 10px;
    border-radius: 8px;
    border: none;
    resize: vertical;
    min-height: 120px;
  }

  .modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 10px;
    z-index: 999;
    box-shadow: 0 5px 20px rgba(0,0,0,0.2);
  }

  .modal.hidden {
    display: none;
  }

  @media (max-width: 992px) {
    .profile-container {
      grid-template-columns: 1fr;
      margin-top: 70px;
    }
  }

  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 16px 24px;
    border-radius: 8px;
    color: white;
    font-weight: 500;
    z-index: 9999;
    animation: slideIn 0.3s ease;
  }

  .notification.success {
    background: #10b981;
  }

  .notification.error {
    background: #ef4444;
  }

  .notification.hidden {
    display: none;
  }

  @keyframes slideIn {
    from {
      transform: translateX(400px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .save-bio-btn {
    width: 100%;
    margin-top: 12px;
    padding: 10px;
    background: linear-gradient(135deg, #667BC6 0%, #DA7297 100%);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
  }

  .save-bio-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 123, 198, 0.3);
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    max-height: 300px;
    overflow-y: auto;
    z-index: 100;
    margin-top: 8px;
  }

  .search-results.hidden {
    display: none;
  }

  .search-result-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    cursor: pointer;
    border-bottom: 1px solid #f3f4f6;
  }

  .search-result-item:hover {
    background: #f9fafb;
  }

  .search-result-item img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
  }

  .followers-list, .likes-list {
    max-height: 400px;
    overflow-y: auto;
  }

  .follower-item, .like-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    border-bottom: 1px solid #f3f4f6;
  }

  .follower-item img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
  }

  .like-item img {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
  }
</style>


