---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/shared/Navigation.astro';
import PopularCollections from '../components/PopularCollections.astro';
import Bibliography from '../components/Bibliography.astro';
---

<Layout title="Perfil">
  <Navigation />

  <div class="profile-container">
    <!-- üîπ IZQUIERDA -->
    <aside class="left-section">
      <div class="profile-pic-container">
        <img
          id="profile-pic"
          src="https://ui-avatars.com/api/?name=Usuario&background=72B340&color=fff"
          alt="Usuario"
          class="profile-image"
        />
        <div class="upload-section">
          <input type="file" id="upload-input" accept="image/*" hidden />
          <button id="upload-btn" class="upload-button">Cambiar foto</button>
        </div>
      </div>

      <!-- üî∏ Modal para cambiar foto -->
      <div id="photoModal" class="modal hidden">
        <h2>Cambiar foto de perfil</h2>
        <div class="modal-options">
          <button id="upload-file-btn" class="modal-btn">üìÅ Subir desde dispositivo</button>
          <button id="upload-url-btn" class="modal-btn">üåê Usar imagen desde Internet</button>
        </div>
        <form id="urlForm" class="hidden">
          <input type="url" id="imageUrl" placeholder="Pega la URL de la imagen..." />
          <button type="submit" class="modal-btn confirm">Guardar</button>
        </form>
        <button id="closeModalBtn" class="close-modal">Cancelar</button>
      </div>

      <div class="user-info">
        <h2 id="user-name">Cargando...</h2>
        <label for="status-select" class="status-label">Estado:</label>
        <select id="status-select">
          <option value="Online">Online</option>
          <option value="Away">Away</option>
          <option value="Busy">Ocupado</option>
          <option value="Offline">Offline</option>
        </select>

        <div class="user-stats">
        <p>Recetas <span id="recipes-count">0</span></p>
        <p>Seguidores <span id="followers-count">0</span></p>
        <p>Likes <span id="likes-count">0</span></p>
        </div>

        <div class="user-links">
          <a href="/blog">Blog</a>
          <a href="/Archives">Archivos</a>
          <a href="/Recipes">Colecciones</a>
          <button id="go-to-feed" class="feed-btn">Ir al Feed</button>
          <button id="logout-button" class="logout-button">Cerrar sesi√≥n</button>
        </div>
      </div>
    </aside>

    <!-- üîπ CENTRO -->
    <main class="main-section">
      <input 
        type="text" 
        id="profile-search" 
        placeholder="Buscar usuarios..." 
        class="search-input" 
      />
      <div id="profile-search-results" class="search-results hidden"></div>

      <div class="banner">
        <img src="/src/img/1.png" alt="Banner" class="banner-image" />
      </div>

      <PopularCollections />

      <div class="team-info">
        <h3 class="team"><span id="team-user-name">Usuario</span> aparece en este equipo</h3>
        <div class="team-card">
          <h4>ROYAL UI FORCE</h4>
          <p>Formado en 2013</p>
          <button id="follow-team-button">Seguir Equipo</button>
          <p><span id="team-member-name">USUARIO</span> es miembro desde nov, 2014</p>
        </div>
      </div>
    </main>

    <!-- üîπ DERECHA -->
    <aside class="right-section">
      <Bibliography
        id="bio-description"
        description="Descripci√≥n no disponible"
        website="https://youtube.com/cdecp"
        skills={[]}
      />
      <textarea
        id="bio-editor"
        class="bio-editor"
        placeholder="Escribe tu biograf√≠a aqu√≠..."
      ></textarea>
      <button id="save-bio-btn" class="save-bio-btn">Guardar biograf√≠a</button>
    </aside>
  </div>

  <!-- Modal de Seguidores -->
  <div id="followersModal" class="modal hidden">
    <div class="modal-content">
      <button class="close-modal" onclick="document.getElementById('followersModal').classList.add('hidden')">√ó</button>
      <h2>Seguidores</h2>
      <div id="followersList" class="followers-list"></div>
    </div>
  </div>

  <!-- Modal de Likes -->
  <div id="likesModal" class="modal hidden">
    <div class="modal-content">
      <button class="close-modal" onclick="document.getElementById('likesModal').classList.add('hidden')">√ó</button>
      <h2>Likes</h2>
      <div id="likesList" class="likes-list"></div>
    </div>
  </div>

  <div id="notification" class="notification hidden"></div>
  <p id="error-message" class="error-text"></p>
</Layout>

<script>
// ============================================================
// üéØ PROFILE.ASTRO 
// ============================================================

let currentUser = null;
let viewedUser = null;
let isOwner = true;

// ============================================================
// üîî Mostrar notificaci√≥n flotante
// ============================================================
function showNotification(message, type = 'success') {
  const notification = document.getElementById('notification');
  notification.textContent = message;
  notification.className = `notification ${type}`;
  notification.classList.remove('hidden');
  setTimeout(() => notification.classList.add('hidden'), 3000);
}

// ============================================================
// üß© Cargar datos del perfil
// ============================================================
async function loadProfileData() {
  try {
    console.log('üîÑ Cargando perfil del usuario...');
    const meRes = await fetch('http://localhost:3000/api/user/me', {
      credentials: 'include',
      headers: { Accept: 'application/json' },
    });

    if (!meRes.ok) {
      if (meRes.status === 401) return (window.location.href = '/login');
      throw new Error('Error obteniendo usuario logeado');
    }

    const me = await meRes.json();
    currentUser = me;

    // üîπ Verificar si se est√° viendo otro usuario
    const params = new URLSearchParams(window.location.search);
    const userParam = params.get('user');

    if (userParam && userParam !== me._id) {
      isOwner = false;
      const res = await fetch(`http://localhost:3000/api/users/${userParam}`, {
        credentials: 'include',
        headers: { Accept: 'application/json' },
      });
      if (!res.ok) throw new Error('Usuario no encontrado');
      viewedUser = await res.json();
    } else {
      viewedUser = me;
    }

    updateProfileUI(viewedUser);
    adjustPermissions();
  } catch (error) {
    console.error('‚ùå Error cargando perfil:', error);
    showNotification('Error al cargar el perfil', 'error');
  }
}

// ============================================================
// üé® Actualizar UI con datos del usuario cargado
// ============================================================
function updateProfileUI(user) {
  document.getElementById('user-name').textContent = user.username || 'Usuario';
  document.getElementById('profile-pic').src =
    user.profilePic ||
    `https://ui-avatars.com/api/?name=${encodeURIComponent(user.username)}`;
  document.getElementById('bio-editor').value = user.bio || '';
  document.getElementById('bio-description').textContent =
    user.bio || 'Sin biograf√≠a';
  document.getElementById('followers-count').textContent = `${
    user.followers?.length || 0
  } Seguidores`;
  document.getElementById('likes-count').textContent = `${
    user.likes?.length || 0
  } Likes`;
}

// ============================================================
// üîê Ajustar visibilidad seg√∫n si es el due√±o
// ============================================================
function adjustPermissions() {
  const userLinks = document.querySelector('.user-links');

  if (!isOwner) {
    console.log('üëÄ Modo visitante activado');

    const hideSelectors = [
      '#upload-btn',
      '#save-bio-btn',
      '#logout-button',
      '#status-select',
      '#bio-editor',
      '.upload-section',
      '.upload-button',
      '#photoModal',
    ];

    hideSelectors.forEach(sel => {
      const el = document.querySelector(sel);
      if (el) el.style.display = 'none';
    });

    // üß© Bot√≥n "Seguir"
    const followBtn = document.createElement('button');
    followBtn.textContent = 'üë• Seguir';
    followBtn.className = 'feed-btn';
    followBtn.addEventListener('click', () => {
      showNotification(`Ahora sigues a ${viewedUser.username}`, 'success');
    });
    userLinks.appendChild(followBtn);

    // üí¨ Bot√≥n de chat directo
    const chatBtn = document.createElement('button');
    chatBtn.textContent = 'üí¨ Enviar mensaje';
    chatBtn.className = 'feed-btn';
    chatBtn.addEventListener('click', () => {
      window.location.href = `/Messages?chat=${viewedUser._id}`;
    });
    userLinks.appendChild(chatBtn);
  } else {
    console.log('‚úÖ Modo propietario activado');
  }
}

// ============================================================
// üí¨ Cambiar estado del usuario
// ============================================================
document.getElementById('status-select')?.addEventListener('change', async e => {
  try {
    const newStatus = e.target.value;
    const res = await fetch('http://localhost:3000/profile/status', {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: newStatus }),
    });
    if (!res.ok) throw new Error('Error al cambiar estado');
    showNotification('Estado actualizado correctamente');
  } catch (err) {
    console.error('‚ùå', err);
    showNotification('Error al cambiar estado', 'error');
  }
});

// ============================================================
// ‚úçÔ∏è Guardar biograf√≠a
// ============================================================
document.getElementById('save-bio-btn')?.addEventListener('click', async () => {
  try {
    const newBio = document.getElementById('bio-editor').value.trim();
    const res = await fetch('http://localhost:3000/profile/bio', {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ bio: newBio }),
    });
    if (!res.ok) throw new Error('Error al guardar bio');
    document.getElementById('bio-description').textContent = newBio || 'Sin biograf√≠a';
    showNotification('Biograf√≠a actualizada correctamente');
  } catch (err) {
    console.error('‚ùå', err);
    showNotification('Error al guardar biograf√≠a', 'error');
  }
});

// ============================================================
// üñºÔ∏è Modal de cambio de foto
// ============================================================
const photoModal = document.getElementById('photoModal');
const uploadBtn = document.getElementById('upload-btn');
const closeModalBtn = document.getElementById('closeModalBtn');
const uploadFileBtn = document.getElementById('upload-file-btn');
const uploadUrlBtn = document.getElementById('upload-url-btn');
const uploadInput = document.getElementById('upload-input');
const urlForm = document.getElementById('urlForm');

uploadBtn?.addEventListener('click', () => photoModal?.classList.remove('hidden'));
closeModalBtn?.addEventListener('click', () => {
  photoModal?.classList.add('hidden');
  urlForm?.classList.add('hidden');
});
uploadFileBtn?.addEventListener('click', () => uploadInput?.click());
uploadUrlBtn?.addEventListener('click', () => urlForm?.classList.remove('hidden'));

uploadInput?.addEventListener('change', async e => {
  const file = e.target.files[0];
  if (!file) return;
  try {
    const formData = new FormData();
    formData.append('profilePic', file);
    const res = await fetch('http://localhost:3000/profile/upload', {
      method: 'POST',
      credentials: 'include',
      body: formData,
    });
    if (!res.ok) throw new Error('Error al subir imagen');
    const data = await res.json();
    document.getElementById('profile-pic').src = data.profilePic;
    showNotification('Foto de perfil actualizada');
    photoModal?.classList.add('hidden');
  } catch (err) {
    console.error('‚ùå', err);
    showNotification('Error al subir imagen', 'error');
  }
});

urlForm?.addEventListener('submit', async e => {
  e.preventDefault();
  const imageUrl = document.getElementById('imageUrl').value.trim();
  if (!imageUrl) return showNotification('URL inv√°lida', 'error');
  document.getElementById('profile-pic').src = imageUrl;
  photoModal?.classList.add('hidden');
  showNotification('Foto actualizada desde URL');
});

// ============================================================
// üîç Buscar usuarios desde el perfil
// ============================================================
let searchTimeout;
const profileSearch = document.getElementById('profile-search');
const profileSearchResults = document.getElementById('profile-search-results');

profileSearch?.addEventListener('input', e => {
  clearTimeout(searchTimeout);
  const query = e.target.value.trim();
  if (query.length < 2) return (profileSearchResults.innerHTML = '');
  searchTimeout = setTimeout(async () => {
    try {
      const res = await fetch(
        `http://localhost:3000/api/users/search?q=${encodeURIComponent(query)}`,
        { credentials: 'include' }
      );
      if (!res.ok) throw new Error('Error en b√∫squeda');
      const users = await res.json();
      profileSearchResults.innerHTML =
        users.length === 0
          ? '<div class="no-results">No se encontraron usuarios</div>'
          : users
              .map(
                u => `
              <div class="search-result-item" data-user-id="${u._id}">
                <img src="${u.profilePic || `https://ui-avatars.com/api/?name=${u.username}`}" alt="${u.username}" />
                <div>
                  <strong>${u.username}</strong>
                  <p>${u.email || ''}</p>
                </div>
              </div>`
              )
              .join('');
      document.querySelectorAll('.search-result-item').forEach(item => {
        item.addEventListener('click', () => {
          window.location.href = `/Profile?user=${item.dataset.userId}`;
        });
      });
      profileSearchResults.classList.remove('hidden');
    } catch (err) {
      console.error('‚ùå Error en b√∫squeda:', err);
    }
  }, 300);
});

// ============================================================
// üë• Ver seguidores y likes
// ============================================================
document.getElementById('followers-count')?.addEventListener('click', async () => {
  if (!currentUser) return;
  const res = await fetch(`http://localhost:3000/api/users/${currentUser._id}/followers`, {
    credentials: 'include',
  });
  const followers = await res.json();
  const followersList = document.getElementById('followersList');
  followersList.innerHTML =
    followers.length > 0
      ? followers
          .map(
            f => `
        <div class="follower-item">
          <img src="${f.profilePic || `https://ui-avatars.com/api/?name=${f.username}`}" />
          <span>${f.username}</span>
        </div>`
          )
          .join('')
      : '<p>No tienes seguidores a√∫n</p>';
  document.getElementById('followersModal')?.classList.remove('hidden');
});

document.getElementById('likes-count')?.addEventListener('click', async () => {
  if (!currentUser) return;
  const res = await fetch(`http://localhost:3000/api/users/${currentUser._id}/liked-posts`, {
    credentials: 'include',
  });
  const liked = await res.json();
  const likesList = document.getElementById('likesList');
  likesList.innerHTML =
    liked.length > 0
      ? liked
          .map(
            p => `
        <div class="like-item">
          <img src="${p.images?.[0] || '/placeholder.jpg'}" />
          <div>
            <p>${p.caption || 'Sin descripci√≥n'}</p>
            <span>${p.likes?.length || 0} likes</span>
          </div>
        </div>`
          )
          .join('')
      : '<p>No has dado likes a√∫n</p>';
  document.getElementById('likesModal')?.classList.remove('hidden');
});

// ============================================================
// üö™ Ir al feed / cerrar sesi√≥n
// ============================================================
document.getElementById('go-to-feed')?.addEventListener('click', () => {
  window.location.href = '/Social';
});

document.getElementById('logout-button')?.addEventListener('click', async () => {
  if (!confirm('¬øCerrar sesi√≥n?')) return;
  await fetch('http://localhost:3000/logout', { method: 'POST', credentials: 'include' });
  window.location.href = '/login';
});

// ============================================================
// ü™ü Cerrar modales al hacer clic fuera
// ============================================================
document.addEventListener('click', e => {
  if (e.target.classList.contains('modal')) e.target.classList.add('hidden');
});

// ============================================================
// üöÄ Inicializar
// ============================================================
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', loadProfileData);
} else {
  loadProfileData();
}
</script>

<style>
  :root {
  --primary: #72b340;
  --primary-dark: #5a9332;
  --accent: #6a8aff;
  --secondary: #da7297;
  --bg-light: #f4f7fb;
  --bg-dark: #1e1f25;
  --card-bg: #ffffff;
  --text-dark: #222;
  --text-light: #e5e7eb;
  --border-color: #d1d5db;
  --radius: 14px;
  --shadow-sm: 0 2px 6px rgba(0, 0, 0, 0.08);
  --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.12);
  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.2);
  font-family: "Poppins", sans-serif;
}

/* === LAYOUT GENERAL === */
body {
  background: var(--bg-light);
  color: var(--text-dark);
}

.profile-container {
  display: grid;
  grid-template-columns: 1.1fr 2fr 1fr;
  gap: 24px;
  padding: 30px;
  max-width: 1400px;
  margin: 80px auto;
}

/* === COLUMNA IZQUIERDA === */
.left-section {
  background: linear-gradient(180deg, var(--bg-dark), #4949a9);
  color: var(--text-light);
  padding: 26px;
  border-radius: var(--radius);
  box-shadow: var(--shadow-md);
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.profile-image {
  width: 150px;
  height: 150px;
  border-radius: 50%;
  border: 4px solid var(--accent);
  object-fit: cover;
  margin-bottom: 16px;
  box-shadow: 0 0 15px rgba(106, 138, 255, 0.4);
  transition: all 0.3s ease;
}
.profile-image:hover {
  transform: scale(1.05);
}

.upload-button,
.feed-btn,
.logout-button {
  border: none;
  padding: 10px 14px;
  border-radius: 8px;
  color: white;
  font-weight: 600;
  margin-top: 10px;
  width: 100%;
  transition: all 0.25s;
  cursor: pointer;
}

.upload-button,
.feed-btn {
  background: linear-gradient(90deg, var(--accent), var(--secondary));
}
.upload-button:hover,
.feed-btn:hover {
  transform: translateY(-2px);
  filter: brightness(1.1);
}

.logout-button {
  background: linear-gradient(90deg, #ef4444, #dc2626);
}
.logout-button:hover {
  transform: translateY(-2px);
}

.user-info h2 {
  font-size: 1.3rem;
  font-weight: 700;
  margin-top: 8px;
  margin-bottom: 4px;
}

#status-select {
  background: #2f313b;
  color: var(--text-light);
  border: 1px solid #3b3f4b;
  border-radius: 6px;
  padding: 6px 10px;
  margin-top: 6px;
  font-size: 0.9rem;
}

.user-stats {
  margin-top: 16px;
  width: 100%;
  background: rgba(255, 255, 255, 0.05);
  padding: 12px;
  border-radius: var(--radius);
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.user-stats span {
  color: #b3d7ff; 
  font-weight: 700;
  font-size: 1rem;
}
.user-stats p {
  margin: 0;
  font-weight: 600;
  font-size: 0.95rem;
  letter-spacing: 0.3px;
  color: #f0f2f5; 
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.user-stats p:hover span {
  filter: brightness(1.2);
  transform: scale(1.05);
  transition: 0.2s;
}

#recipes-count span {
  color: #a7f3d0; /* verde menta */
}
#followers-count span {
  color: #facc15; /* amarillo c√°lido */
}
#likes-count span {
  color: #fca5a5; /* rosado suave */
}

.user-links {
  margin-top: 18px;
}
.user-links a {
  display: block;
  margin-top: 8px;
  color: #a5b4fc;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.25s;
}
.user-links a:hover {
  color: var(--accent);
  transform: translateX(3px);
}

/* === COLUMNA CENTRAL === */
.main-section {
  background: var(--card-bg);
  border-radius: var(--radius);
  box-shadow: var(--shadow-md);
  padding: 26px;
}

.search-input {
  width: 100%;
  padding: 12px;
  border-radius: var(--radius);
  border: 1px solid var(--border-color);
  margin-bottom: 20px;
  font-size: 1rem;
  outline-color: var(--accent);
}

.banner {
  border-radius: var(--radius);
  overflow: hidden;
  margin-bottom: 20px;
  box-shadow: var(--shadow-sm);
}

.banner-image {
  width: 100%;
  height: 180px;
  object-fit: cover;
  filter: brightness(0.95);
  transition: all 0.3s ease;
}
.banner-image:hover {
  filter: brightness(1.05);
}

.team-card {
  background: linear-gradient(120deg, var(--accent), var(--secondary));
  color: white;
  padding: 18px;
  border-radius: var(--radius);
  box-shadow: var(--shadow-md);
  text-align: center;
  margin-top: 24px;
  transition: all 0.3s ease;
}
.team-card:hover {
  transform: translateY(-3px);
}

.team-card h4 {
  font-weight: 700;
  font-size: 1.1rem;
  margin-bottom: 4px;
}

.team-card button {
  margin-top: 10px;
  background: white;
  color: var(--accent);
  border: none;
  border-radius: 8px;
  padding: 8px 14px;
  cursor: pointer;
  font-weight: 600;
  transition: all 0.3s ease;
}
.team-card button:hover {
  background: var(--light);
  transform: scale(1.05);
}

/* === COLUMNA DERECHA === */
.right-section {
  background: linear-gradient(180deg, var(--bg-dark), #4949a9);
  color: var(--text-light);
  border-radius: var(--radius);
  padding: 26px;
  box-shadow: var(--shadow-md);
  display: flex;
  flex-direction: column;
}

.bio-editor {
  background: #2e303a;
  color: var(--text-light);
  width: 100%;
  border-radius: var(--radius);
  border: none;
  margin-top: 14px;
  padding: 12px;
  font-size: 0.95rem;
  resize: vertical;
  min-height: 100px;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3);
}

.save-bio-btn {
  margin-top: 14px;
  padding: 10px;
  width: 100%;
  border: none;
  border-radius: var(--radius);
  font-weight: 600;
  background: linear-gradient(135deg, var(--accent), var(--secondary));
  color: white;
  cursor: pointer;
  transition: all 0.25s;
}
.save-bio-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
}

/* === MODALES Y NOTIFICACIONES === */
.modal {
  background: var(--white);
  border-radius: var(--radius);
  box-shadow: var(--shadow-lg);
  padding: 24px;
}

.notification {
  position: fixed;
  top: 24px;
  right: 24px;
  padding: 14px 22px;
  border-radius: var(--radius);
  color: white;
  font-weight: 600;
  z-index: 9999;
  animation: slideIn 0.3s ease;
}
.notification.success {
  background: #10b981;
}
.notification.error {
  background: #ef4444;
}
.notification.hidden {
  display: none;
}

@keyframes slideIn {
  from {
    transform: translateX(300px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* === RESPONSIVE === */
@media (max-width: 992px) {
  .profile-container {
    grid-template-columns: 1fr;
    margin-top: 60px;
    gap: 16px;
  }
  .left-section,
  .right-section {
    text-align: center;
  }
}
</style>


