---
// src/components/shared/Navigation.astro

// Obtener la ruta actual
const currentPath = Astro.url.pathname;
const showNavigation = currentPath === '/Social' || currentPath === '/Social/';

// Si no estamos en /Social, no renderizar nada
if (!showNavigation) {
  return null;
}
---

<nav class="top-navbar">
  <div class="navbar-container">
    <div class="navbar-left">
      <a href="/Social" class="logo">
        <svg viewBox="0 0 24 24" width="28" height="28" fill="none" stroke="currentColor" stroke-width="2.5">
          <rect x="3" y="3" width="7" height="7" rx="1.5"/>
          <rect x="14" y="3" width="7" height="7" rx="1.5"/>
          <rect x="14" y="14" width="7" height="7" rx="1.5"/>
          <rect x="3" y="14" width="7" height="7" rx="1.5"/>
        </svg>
        <span class="logo-text">Social</span>
      </a>

      <div class="search-container">
        <svg class="search-icon" viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
        <input 
          type="text" 
          id="global-search" 
          class="search-input" 
          placeholder="Buscar usuarios..." 
          autocomplete="off"
        />
        <div id="search-results" class="search-results hidden"></div>
      </div>
    </div>

    <div class="navbar-right">
      <button class="nav-icon-btn" title="Inicio" onclick="window.location.href='/Social'">
        <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 9l9-7 9 7v11a2 2 0 01-2 2H5a2 2 0 01-2-2z"/>
          <polyline points="9 22 9 12 15 12 15 22"/>
        </svg>
      </button>

      <button class="nav-icon-btn" id="messages-btn" title="Mensajes" onclick="window.location.href='/Messages'">
        <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
        </svg>
        <span class="badge hidden" id="messages-badge-nav">0</span>
      </button>

      <button class="nav-icon-btn" id="notif-btn" title="Notificaciones" onclick="window.location.href='/Notifications'">
        <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 8A6 6 0 006 8c0 7-3 9-3 9h18s-3-2-3-9"/>
          <path d="M13.73 21a2 2 0 01-3.46 0"/>
        </svg>
        <span class="badge hidden" id="notif-badge-nav">0</span>
      </button>

      <button class="nav-icon-btn create-btn" id="create-nav-btn" title="Crear">
        <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2.5">
          <rect x="3" y="3" width="18" height="18" rx="2"/>
          <line x1="12" y1="8" x2="12" y2="16"/>
          <line x1="8" y1="12" x2="16" y2="12"/>
        </svg>
      </button>

      <div class="profile-dropdown">
        <button class="profile-btn" id="profile-menu-btn">
          <img id="nav-user-avatar" src="" alt="Profile" class="nav-avatar" />
        </button>

        <div class="dropdown-menu hidden" id="profile-dropdown">
          <div class="dropdown-header">
            <img id="dropdown-avatar" src="" alt="Profile" class="dropdown-avatar" />
            <div class="dropdown-user-info">
              <h4 id="dropdown-username">Usuario</h4>
              <p id="dropdown-email">email@example.com</p>
            </div>
          </div>

          <div class="dropdown-divider"></div>

          <a href="/Profile" class="dropdown-item">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"/>
              <circle cx="12" cy="7" r="4"/>
            </svg>
            Mi Perfil
          </a>

          <a href="/Settings" class="dropdown-item">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="12" cy="12" r="3"/>
              <path d="M12 1v6m0 6v6"/>
            </svg>
            Configuraci√≥n
          </a>

          <a href="/Saved" class="dropdown-item">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M19 21l-7-5-7 5V5a2 2 0 012-2h10a2 2 0 012 2z"/>
            </svg>
            Guardados
          </a>

          <div class="dropdown-divider"></div>

          <button class="dropdown-item danger" id="logout-btn">
            <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 21H5a2 2 0 01-2-2V5a2 2 0 012-2h4"/>
              <polyline points="16 17 21 12 16 7"/>
              <line x1="21" y1="12" x2="9" y2="12"/>
            </svg>
            Cerrar Sesi√≥n
          </button>
        </div>
      </div>
    </div>
  </div>
</nav>

<!-- Modal de perfil de usuario -->
<div id="user-profile-modal" class="modal-overlay hidden">
  <div class="modal-content user-modal">
    <button class="modal-close" id="close-user-modal">
      <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"/>
        <line x1="6" y1="6" x2="18" y2="18"/>
      </svg>
    </button>

    <div class="user-modal-header">
      <img id="modal-user-avatar" src="" alt="User" class="modal-user-avatar" />
      <div class="modal-user-info">
        <h3 id="modal-user-name">Usuario</h3>
        <p id="modal-user-email">email@example.com</p>
        <p id="modal-user-bio">Sin biograf√≠a</p>
      </div>
    </div>

    <div class="user-modal-stats">
      <div class="modal-stat">
        <span class="modal-stat-number" id="modal-user-followers">0</span>
        <span class="modal-stat-label">Seguidores</span>
      </div>
      <div class="modal-stat">
        <span class="modal-stat-number" id="modal-user-following">0</span>
        <span class="modal-stat-label">Siguiendo</span>
      </div>
    </div>

    <div class="user-modal-actions">
      <button class="modal-btn primary" id="modal-follow-btn">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
          <circle cx="8.5" cy="7" r="4"/>
          <line x1="20" y1="8" x2="20" y2="14"/>
          <line x1="23" y1="11" x2="17" y2="11"/>
        </svg>
        Seguir
      </button>
      <button class="modal-btn secondary" id="modal-message-btn">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z"/>
        </svg>
        Mensaje
      </button>
      <button class="modal-btn secondary" id="modal-profile-btn">
        <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"/>
          <circle cx="12" cy="7" r="4"/>
        </svg>
        Ver Perfil
      </button>
    </div>
  </div>
</div>

<script>
  // Estado global del modal
  let currentSelectedUser = null;

  // Cargar datos del usuario actual
  async function loadUserData() {
    try {
      console.log('üîÑ Cargando datos del usuario...');
      
      const response = await fetch('http://localhost:3000/api/user/me', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      console.log('üì° Response status:', response.status);
      
      if (!response.ok) {
        console.error('‚ùå Error en la respuesta:', response.statusText);
        if (response.status === 401) {
          console.log('üîê No autenticado, redirigiendo...');
          window.location.href = '/login';
        }
        return;
      }

      const user = await response.json();
      console.log('‚úÖ Usuario cargado:', user);

      if (!user.loggedIn) {
        console.log('üîê Usuario no logueado, redirigiendo...');
        window.location.href = '/login';
        return;
      }

      const avatarUrl = user.profilePic || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.username)}&background=667BC6&color=fff`;
      
      const navAvatar = document.getElementById('nav-user-avatar');
      const dropdownAvatar = document.getElementById('dropdown-avatar');
      const dropdownUsername = document.getElementById('dropdown-username');
      const dropdownEmail = document.getElementById('dropdown-email');

      if (navAvatar) navAvatar.src = avatarUrl;
      if (dropdownAvatar) dropdownAvatar.src = avatarUrl;
      if (dropdownUsername) dropdownUsername.textContent = user.username;
      if (dropdownEmail) dropdownEmail.textContent = user.email;

      console.log('‚úÖ UI actualizada con datos del usuario');
    } catch (error) {
      console.error('‚ùå Error cr√≠tico al cargar usuario:', error);
    }
  }

  // B√∫squeda de usuarios
  const searchInput = document.getElementById('global-search');
  const searchResults = document.getElementById('search-results');
  let searchTimeout;

  searchInput?.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    const query = e.target.value.trim();

    if (query.length < 2) {
      searchResults.classList.add('hidden');
      return;
    }

    searchTimeout = setTimeout(async () => {
      try {
        console.log('üîç Buscando:', query);
        
        const response = await fetch(`http://localhost:3000/api/users/search?q=${encodeURIComponent(query)}`, {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });

        console.log('üì° B√∫squeda response:', response.status);

        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const users = await response.json();
        console.log('‚úÖ Usuarios encontrados:', users.length);
        
        if (users.length === 0) {
          searchResults.innerHTML = '<div class="no-results">No se encontraron usuarios</div>';
        } else {
          searchResults.innerHTML = users.map(user => `
            <div class="search-result-item" data-user-id="${user._id}">
              <img src="${user.profilePic || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.username)}`}" 
                   alt="${user.username}" 
                   class="search-result-avatar" />
              <div class="search-result-info">
                <strong>${user.username}</strong>
                <p>${user.email || 'Sin email'}</p>
              </div>
              <span class="search-result-status ${user.status === 'Online' ? 'online' : 'offline'}"></span>
            </div>
          `).join('');

          // Agregar eventos a cada resultado
          document.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', async () => {
              const userId = item.dataset.userId;
              await showUserProfile(userId);
            });
          });
        }
        
        searchResults.classList.remove('hidden');
      } catch (error) {
        console.error('‚ùå Error en b√∫squeda:', error);
        searchResults.innerHTML = '<div class="no-results">Error al buscar usuarios</div>';
        searchResults.classList.remove('hidden');
      }
    }, 300);
  });

  // Cerrar b√∫squeda al hacer clic fuera
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.search-container')) {
      searchResults?.classList.add('hidden');
    }
  });

  // Mostrar perfil de usuario en modal
  async function showUserProfile(userId) {
    try {
      console.log('üë§ Cargando perfil de usuario:', userId);
      
      const response = await fetch(`http://localhost:3000/api/users/${userId}/profile`, {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const user = await response.json();
      console.log('‚úÖ Perfil cargado:', user);
      currentSelectedUser = user;

      // Llenar modal con datos
      document.getElementById('modal-user-avatar').src = 
        user.profilePic || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.username)}`;
      document.getElementById('modal-user-name').textContent = user.username;
      document.getElementById('modal-user-email').textContent = user.email || '';
      document.getElementById('modal-user-bio').textContent = user.bio || 'Sin biograf√≠a';
      document.getElementById('modal-user-followers').textContent = user.followers?.length || 0;
      document.getElementById('modal-user-following').textContent = user.following?.length || 0;

      // Actualizar bot√≥n de seguir
      const followBtn = document.getElementById('modal-follow-btn');
      if (user.alreadyFollowing) {
        followBtn.innerHTML = `
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
            <circle cx="8.5" cy="7" r="4"/>
            <line x1="18" y1="8" x2="23" y2="8"/>
          </svg>
          Siguiendo
        `;
        followBtn.classList.add('following');
      } else {
        followBtn.innerHTML = `
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
            <circle cx="8.5" cy="7" r="4"/>
            <line x1="20" y1="8" x2="20" y2="14"/>
            <line x1="23" y1="11" x2="17" y2="11"/>
          </svg>
          Seguir
        `;
        followBtn.classList.remove('following');
      }

      // Mostrar modal
      document.getElementById('user-profile-modal').classList.remove('hidden');
      searchResults?.classList.add('hidden');
    } catch (error) {
      console.error('‚ùå Error mostrando perfil:', error);
      alert('Error al cargar el perfil del usuario');
    }
  }

  // Cerrar modal
  document.getElementById('close-user-modal')?.addEventListener('click', () => {
    document.getElementById('user-profile-modal').classList.add('hidden');
    currentSelectedUser = null;
  });

  // Cerrar modal al hacer clic fuera
  document.getElementById('user-profile-modal')?.addEventListener('click', (e) => {
    if (e.target.id === 'user-profile-modal') {
      document.getElementById('user-profile-modal').classList.add('hidden');
      currentSelectedUser = null;
    }
  });

  // Seguir/Dejar de seguir
  document.getElementById('modal-follow-btn')?.addEventListener('click', async () => {
    if (!currentSelectedUser) return;

    try {
      const response = await fetch(`http://localhost:3000/api/users/${currentSelectedUser._id}/follow`, {
        method: 'POST',
        credentials: 'include',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });

      if (!response.ok) throw new Error('Error al seguir/dejar de seguir');

      const data = await response.json();
      console.log('‚úÖ Follow response:', data);
      
      const followBtn = document.getElementById('modal-follow-btn');
      if (data.following) {
        followBtn.innerHTML = `
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
            <circle cx="8.5" cy="7" r="4"/>
            <line x1="18" y1="8" x2="23" y2="8"/>
          </svg>
          Siguiendo
        `;
        followBtn.classList.add('following');
      } else {
        followBtn.innerHTML = `
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2"/>
            <circle cx="8.5" cy="7" r="4"/>
            <line x1="20" y1="8" x2="20" y2="14"/>
            <line x1="23" y1="11" x2="17" y2="11"/>
          </svg>
          Seguir
        `;
        followBtn.classList.remove('following');
      }

      // Actualizar contador de seguidores
      const currentFollowers = parseInt(document.getElementById('modal-user-followers').textContent);
      document.getElementById('modal-user-followers').textContent = 
        data.following ? currentFollowers + 1 : currentFollowers - 1;

    } catch (error) {
      console.error('‚ùå Error:', error);
      alert('Error al seguir/dejar de seguir usuario');
    }
  });

  // Enviar mensaje
  document.getElementById('modal-message-btn')?.addEventListener('click', async () => {
    if (!currentSelectedUser) return;

    try {
      const response = await fetch('http://localhost:3000/api/messages/start', {
        method: 'POST',
        credentials: 'include',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ userId: currentSelectedUser._id })
      });

      if (!response.ok) throw new Error('Error iniciando conversaci√≥n');

      const data = await response.json();
      window.location.href = `/Messages?user=${currentSelectedUser._id}`;
    } catch (error) {
      console.error('‚ùå Error:', error);
      alert('Error al iniciar conversaci√≥n');
    }
  });

  // Ver perfil completo
  document.getElementById('modal-profile-btn')?.addEventListener('click', () => {
    if (!currentSelectedUser) return;
    window.location.href = `/Profile?user=${currentSelectedUser._id}`;
  });

  // Profile dropdown
  const profileBtn = document.getElementById('profile-menu-btn');
  const dropdown = document.getElementById('profile-dropdown');

  profileBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    dropdown.classList.toggle('hidden');
  });

  document.addEventListener('click', (e) => {
    if (!e.target.closest('.profile-dropdown')) {
      dropdown?.classList.add('hidden');
    }
  });

  // Logout
  document.getElementById('logout-btn')?.addEventListener('click', async () => {
    if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
      try {
        await fetch('http://localhost:3000/logout', { 
          method: 'POST',
          credentials: 'include' 
        });
        window.location.href = '/login';
      } catch (error) {
        console.error('‚ùå Error cerrando sesi√≥n:', error);
      }
    }
  });

  // Create button
  document.getElementById('create-nav-btn')?.addEventListener('click', () => {
    const postModal = document.getElementById('post-modal');
    if (postModal) {
      postModal.classList.remove('hidden');
    } else {
      console.warn('‚ö†Ô∏è Modal de crear post no encontrado');
    }
  });

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadUserData);
  } else {
    loadUserData();
  }
</script>

<style>
  .top-navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 70px;
    background: white;
    border-bottom: 1px solid #e5e7eb;
    z-index: 1000;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .navbar-container {
    max-width: 1400px;
    margin: 0 auto;
    height: 100%;
    padding: 0 24px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 32px;
  }

  .navbar-left {
    display: flex;
    align-items: center;
    gap: 24px;
    flex: 1;
  }

  .logo {
    display: flex;
    align-items: center;
    gap: 10px;
    text-decoration: none;
    color: #667BC6;
    font-weight: 700;
    font-size: 22px;
    white-space: nowrap;
  }

  .logo-text {
    display: none;
  }

  @media (min-width: 640px) {
    .logo-text {
      display: inline;
    }
  }

  .search-container {
    position: relative;
    flex: 1;
    max-width: 400px;
  }

  .search-icon {
    position: absolute;
    left: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
    pointer-events: none;
  }

  .search-input {
    width: 100%;
    padding: 10px 16px 10px 48px;
    border: 1px solid #e5e7eb;
    border-radius: 24px;
    background: #f3f4f6;
    font-size: 15px;
    outline: none;
    transition: all 0.2s;
  }

  .search-input:focus {
    background: white;
    border-color: #667BC6;
    box-shadow: 0 0 0 3px rgba(102, 123, 198, 0.1);
  }

  .search-results {
    position: absolute;
    top: calc(100% + 8px);
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    max-height: 400px;
    overflow-y: auto;
    z-index: 100;
  }

  .search-results.hidden {
    display: none;
  }

  .search-result-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    cursor: pointer;
    transition: background 0.2s;
    border-bottom: 1px solid #f3f4f6;
    position: relative;
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background: #f9fafb;
  }

  .search-result-avatar {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    object-fit: cover;
  }

  .search-result-info {
    flex: 1;
    min-width: 0;
  }

  .search-result-info strong {
    display: block;
    font-size: 15px;
    font-weight: 600;
    color: #2d2d2d;
  }

  .search-result-info p {
    font-size: 13px;
    color: #6b7280;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-top: 2px;
  }

  .search-result-status {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #6b7280;
  }

  .search-result-status.online {
    background: #10b981;
  }

  .no-results {
    padding: 24px;
    text-align: center;
    color: #6b7280;
    font-size: 14px;
  }

  .navbar-right {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .nav-icon-btn {
    position: relative;
    width: 44px;
    height: 44px;
    border: none;
    background: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #6b7280;
    transition: all 0.2s;
  }

  .nav-icon-btn:hover {
    background: #f3f4f6;
    color: #2d2d2d;
  }

  .nav-icon-btn.create-btn {
    background: linear-gradient(135deg, #667BC6 0%, #DA7297 100%);
    color: white;
  }

  .nav-icon-btn.create-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(102, 123, 198, 0.3);
  }

  .badge {
    position: absolute;
    top: 6px;
    right: 6px;
    background: #ef4444;
    color: white;
    font-size: 11px;
    font-weight: 700;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 18px;
    text-align: center;
    line-height: 1.2;
  }

  .badge.hidden {
    display: none;
  }

  .profile-dropdown {
    position: relative;
  }

  .profile-btn {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    border-radius: 50%;
    overflow: hidden;
    transition: transform 0.2s;
  }

  .profile-btn:hover {
    transform: scale(1.05);
  }

  .nav-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #667BC6;
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + 12px);
    right: 0;
    width: 280px;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    z-index: 100;
  }

  .dropdown-menu.hidden {
    display: none;
  }

  .dropdown-header {
    padding: 20px;
    display: flex;
    align-items: center;
    gap: 12px;
    background: linear-gradient(135deg, #667BC6 0%, #DA7297 100%);
    color: white;
  }

  .dropdown-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid white;
  }

  .dropdown-user-info h4 {
    font-size: 16px;
    font-weight: 600;
    margin: 0;
  }

  .dropdown-user-info p {
    font-size: 13px;
    opacity: 0.9;
    margin: 2px 0 0;
  }

  .dropdown-divider {
    height: 1px;
    background: #e5e7eb;
    margin: 8px 0;
  }

  .dropdown-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 20px;
    color: #2d2d2d;
    text-decoration: none;
    font-size: 15px;
    font-weight: 500;
    transition: all 0.2s;
    cursor: pointer;
    background: none;
    border: none;
    width: 100%;
    text-align: left;
  }

  .dropdown-item:hover {
    background: #f3f4f6;
  }

  .dropdown-item.danger {
    color: #ef4444;
  }

  .dropdown-item.danger:hover {
    background: #fee2e2;
  }

  /* Modal de perfil de usuario */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    padding: 20px;
    animation: fadeIn 0.3s ease;
  }

  .modal-overlay.hidden {
    display: none;
  }

  .modal-content {
    background: white;
    border-radius: 16px;
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    animation: slideUp 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-close {
    position: absolute;
    top: 16px;
    right: 16px;
    background: rgba(0, 0, 0, 0.1);
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
    z-index: 10;
  }

  .modal-close:hover {
    background: rgba(0, 0, 0, 0.2);
    transform: rotate(90deg);
  }

  .user-modal-header {
    padding: 40px 24px 24px;
    text-align: center;
    background: linear-gradient(135deg, #667BC6 0%, #DA7297 100%);
    color: white;
    position: relative;
  }

  .modal-user-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid white;
    margin-bottom: 16px;
  }

  .modal-user-info h3 {
    font-size: 24px;
    font-weight: 700;
    margin: 0 0 8px;
  }

  .modal-user-info p {
    font-size: 14px;
    opacity: 0.9;
    margin: 4px 0;
  }

  .user-modal-stats {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 16px;
    padding: 24px;
    background: #f9fafb;
  }

  .modal-stat {
    text-align: center;
    padding: 16px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .modal-stat-number {
    display: block;
    font-size: 28px;
    font-weight: 700;
    color: #667BC6;
    margin-bottom: 4px;
  }

  .modal-stat-label {
    font-size: 13px;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .user-modal-actions {
    display: flex;
    gap: 12px;
    padding: 24px;
  }

  .modal-btn {
    flex: 1;
    padding: 12px 20px;
    border: none;
    border-radius: 10px;
    font-size: 15px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all 0.2s;
  }

  .modal-btn.primary {
    background: linear-gradient(135deg, #667BC6 0%, #DA7297 100%);
    color: white;
  }

  .modal-btn.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 123, 198, 0.3);
  }

  .modal-btn.primary.following {
    background: #10b981;
  }

  .modal-btn.secondary {
    background: #f3f4f6;
    color: #2d2d2d;
    border: 1px solid #e5e7eb;
  }

  .modal-btn.secondary:hover {
    background: #e5e7eb;
  }

  @media (max-width: 640px) {
    .navbar-container {
      padding: 0 16px;
      gap: 12px;
    }

    .search-container {
      max-width: 200px;
    }

    .navbar-right {
      gap: 8px;
    }

    .nav-icon-btn {
      width: 40px;
      height: 40px;
    }

    .user-modal-actions {
      flex-direction: column;
    }

    .modal-btn {
      width: 100%;
    }
  }

  /* Scrollbar personalizado para el modal */
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }

  .modal-content::-webkit-scrollbar-track {
    background: #f3f4f6;
  }

  .modal-content::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 4px;
  }

  .modal-content::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }

  .modal-btn.primary.following {
    background: #10b981;
  }

  @media (max-width: 640px) {
    .navbar-container {
      padding: 0 16px;
      gap: 12px;
    }

    .search-container {
      max-width: 200px;
    }

    .navbar-right {
      gap: 8px;
    }

    .nav-icon-btn {
      width: 40px;
      height: 40px;
    }

    .user-modal-actions {
      flex-direction: column;
    }

    .modal-btn {
      width: 100%;
    }
  }

  .modal-content::-webkit-scrollbar {
    width: 8px;
  }

  .modal-content::-webkit-scrollbar-track {
    background: #f3f4f6;
  }

  .modal-content::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 4px;
  }

  .modal-content::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }

  .top-navbar {
    z-index: 50; /* Menor que los modales pero mayor que el contenido */
  }

  .modal-overlay {
    z-index: 100; /* por encima del header */
  }

  /* === CORRECCI√ìN DE INTERFERENCIAS CON OTROS HEADERS === */
  body:has(.top-navbar) main,
  body:has(.top-navbar) section,
  body:has(.top-navbar) .messages-layout {
    margin-top: 70px; /* evitar que el contenido quede tapado */
  }
</style>