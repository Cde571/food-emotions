<script lang="ts">
  const input = document.getElementById('user-search-input') as HTMLInputElement;
  const resultsBox = document.getElementById('search-results') as HTMLDivElement;
  const token = localStorage.getItem('authToken');
  const API_URL = '/api/users/search';
  let timeout: number | undefined;

  async function searchUsers(query: string) {
    if (!query) {
      resultsBox.classList.add('hidden');
      return;
    }

    try {
      const res = await fetch(`${API_URL}?q=${encodeURIComponent(query)}`, {
        headers: { 'Authorization': `Bearer ${token}` },
      });

      if (!res.ok) {
        resultsBox.innerHTML = `<div class="no-results">Error al buscar usuarios.</div>`;
        return;
      }

      const data = await res.json();
      if (!data.users || data.users.length === 0) {
        resultsBox.innerHTML = `<div class="no-results">No se encontraron resultados.</div>`;
        resultsBox.classList.remove('hidden');
        return;
      }

      resultsBox.innerHTML = data.users.map((user: any) => `
        <div class="result-item" onclick="window.location.href='/Profile?user=${user._id}'">
          <img src="${user.profilePic || '/images/default-avatar.png'}" alt="Foto de ${user.username}">
          <div class="user-info">
            <h4>${user.username}</h4>
            <p>${user.email || ''}</p>
          </div>
        </div>
      `).join('');

      resultsBox.classList.remove('hidden');
    } catch (err) {
      console.error('Error en b√∫squeda:', err);
      resultsBox.innerHTML = `<div class="no-results">Error de conexi√≥n.</div>`;
      resultsBox.classList.remove('hidden');
    }
  }

  // ‚è≥ Debounce para no saturar el servidor
  input?.addEventListener('input', () => {
    clearTimeout(timeout);
    timeout = window.setTimeout(() => searchUsers(input.value), 300);
  });

  // üîπ Ocultar lista si se hace clic fuera
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!resultsBox.contains(target) && target !== input) {
      resultsBox.classList.add('hidden');
    }
  });
</script>

<style>
  .search-bar {
    position: relative;
    width: 100%;
    margin-bottom: 20px;
  }

  #user-search-input {
    width: 100%;
    padding: 10px 14px;
    border: 1px solid var(--border);
    border-radius: 20px;
    font-size: 14px;
    background: var(--gray-light);
    color: var(--dark);
  }

  #user-search-input:focus {
    border-color: var(--primary);
    background: white;
    outline: none;
  }

  .search-results {
    position: absolute;
    top: 110%;
    left: 0;
    right: 0;
    background: var(--card-bg);
    border-radius: 12px;
    box-shadow: var(--shadow-md);
    max-height: 300px;
    overflow-y: auto;
    z-index: 100;
  }

  .search-results.hidden {
    display: none;
  }

  .result-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 14px;
    cursor: pointer;
    transition: background 0.2s;
  }

  .result-item:hover {
    background: var(--gray-light);
  }

  .result-item img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
  }

  .user-info h4 {
    margin: 0;
    font-size: 14px;
    font-weight: 600;
    color: var(--dark);
  }

  .user-info p {
    margin: 0;
    font-size: 12px;
    color: var(--gray);
  }

  .no-results {
    padding: 12px;
    text-align: center;
    color: var(--gray);
  }
</style>
