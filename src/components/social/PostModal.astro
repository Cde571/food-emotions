---
// src/components/social/PostModal.astro
---

<div id="post-modal" class="modal-overlay hidden">
  <div class="modal-container">
    <div class="modal-header">
      <h2 class="modal-title">Crear Publicación</h2>
      <button class="modal-close" id="close-modal-btn">
        <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
      </button>
    </div>

    <div class="modal-body">
      <div class="user-info">
        <img id="modal-user-avatar" src="" alt="Avatar" class="modal-avatar" />
        <div class="user-details">
          <span id="modal-username" class="username">Username</span>
          <select id="post-privacy" class="privacy-select">
            <option value="public">🌍 Público</option>
            <option value="followers">👥 Seguidores</option>
            <option value="private">🔒 Privado</option>
          </select>
        </div>
      </div>

      <div class="post-input-wrapper">
        <textarea 
          id="post-caption" 
          class="post-textarea" 
          placeholder="¿Qué estás pensando?"
          maxlength="2000"
        ></textarea>
        <div class="char-counter">
          <span id="char-count">0</span> / 2000
        </div>
      </div>

      <div class="media-preview" id="media-preview"></div>

      <div class="post-actions-bar">
        <button class="action-btn" id="upload-image-btn" title="Agregar foto/video">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
            <circle cx="8.5" cy="8.5" r="1.5"/>
            <polyline points="21 15 16 10 5 21"/>
          </svg>
          <span>Foto/Video</span>
        </button>

        <button class="action-btn" id="add-emoji-btn" title="Agregar emoji">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"/>
            <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
            <line x1="9" y1="9" x2="9.01" y2="9"/>
            <line x1="15" y1="9" x2="15.01" y2="9"/>
          </svg>
          <span>Emoji</span>
        </button>

        <button class="action-btn" id="add-location-btn" title="Agregar ubicación">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0118 0z"/>
            <circle cx="12" cy="10" r="3"/>
          </svg>
          <span>Ubicación</span>
        </button>

        <button class="action-btn" id="add-tags-btn" title="Agregar etiquetas">
          <svg viewBox="0 0 24 24" width="22" height="22" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82z"/>
            <line x1="7" y1="7" x2="7.01" y2="7"/>
          </svg>
          <span>Etiquetas</span>
        </button>
      </div>

      <input 
        type="file" 
        id="file-input" 
        accept="image/*,video/*" 
        multiple 
        style="display: none;"
      />

      <div class="location-input hidden" id="location-input">
        <input 
          type="text" 
          id="location-text" 
          class="location-field" 
          placeholder="¿Dónde estás?"
        />
        <button class="remove-location" id="remove-location">×</button>
      </div>

      <div class="tags-input hidden" id="tags-input">
        <div class="tags-container" id="tags-container"></div>
        <input 
          type="text" 
          id="tag-text" 
          class="tag-field" 
          placeholder="Agregar etiqueta (presiona Enter)"
        />
      </div>
    </div>

    <div class="modal-footer">
      <button class="btn-cancel" id="cancel-post-btn">Cancelar</button>
      <button class="btn-publish" id="publish-post-btn" disabled>
        <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="22" y1="2" x2="11" y2="13"/>
          <polygon points="22 2 15 22 11 13 2 9 22 2"/>
        </svg>
        Publicar
      </button>
    </div>
  </div>
</div>

<script>
  import { createPost } from '../../scripts/api/posts.js';

  let selectedFiles = [];
  let selectedLocation = '';
  let selectedTags = [];

  const modal = document.getElementById('post-modal');
  const closeBtn = document.getElementById('close-modal-btn');
  const cancelBtn = document.getElementById('cancel-post-btn');
  const publishBtn = document.getElementById('publish-post-btn');
  const captionInput = document.getElementById('post-caption');
  const charCount = document.getElementById('char-count');
  const fileInput = document.getElementById('file-input');
  const uploadBtn = document.getElementById('upload-image-btn');
  const mediaPreview = document.getElementById('media-preview');
  const locationBtn = document.getElementById('add-location-btn');
  const locationInput = document.getElementById('location-input');
  const locationText = document.getElementById('location-text');
  const removeLocationBtn = document.getElementById('remove-location');
  const tagsBtn = document.getElementById('add-tags-btn');
  const tagsInput = document.getElementById('tags-input');
  const tagText = document.getElementById('tag-text');
  const tagsContainer = document.getElementById('tags-container');

  // Cargar datos del usuario
  async function loadUserData() {
    const token = localStorage.getItem('authToken');
    try {
      const response = await fetch('/api/user/me', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const user = await response.json();
      
      const avatarUrl = user.profilePic || `https://ui-avatars.com/api/?name=${user.username}&background=667BC6&color=fff`;
      document.getElementById('modal-user-avatar').src = avatarUrl;
      document.getElementById('modal-username').textContent = user.username;
    } catch (error) {
      console.error('Error al cargar usuario:', error);
    }
  }

  // Abrir/Cerrar modal
  function openModal() {
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    loadUserData();
  }

  function closeModal() {
    modal.classList.add('hidden');
    document.body.style.overflow = '';
    resetForm();
  }

  // Resetear formulario
  function resetForm() {
    captionInput.value = '';
    charCount.textContent = '0';
    selectedFiles = [];
    selectedLocation = '';
    selectedTags = [];
    mediaPreview.innerHTML = '';
    locationInput.classList.add('hidden');
    tagsInput.classList.add('hidden');
    locationText.value = '';
    tagsContainer.innerHTML = '';
    publishBtn.disabled = true;
  }

  // Contador de caracteres
  captionInput?.addEventListener('input', (e) => {
    const length = e.target.value.length;
    charCount.textContent = length;
    validateForm();
  });

  // Validar formulario
  function validateForm() {
    const hasContent = captionInput.value.trim().length > 0 || selectedFiles.length > 0;
    publishBtn.disabled = !hasContent;
  }

  // Upload de archivos
  uploadBtn?.addEventListener('click', () => fileInput?.click());

  fileInput?.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    
    if (files.length + selectedFiles.length > 10) {
      showToast('Máximo 10 archivos por publicación', 'error');
      return;
    }

    files.forEach(file => {
      if (file.size > 10 * 1024 * 1024) {
        showToast('Archivo muy grande (máx 10MB)', 'error');
        return;
      }

      selectedFiles.push(file);
      addMediaPreview(file);
    });

    validateForm();
  });

  // Preview de media
  function addMediaPreview(file) {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      const preview = document.createElement('div');
      preview.className = 'media-item';
      preview.innerHTML = `
        <img src="${e.target.result}" alt="Preview" />
        <button class="remove-media" data-file="${file.name}">
          <svg viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
            <line x1="18" y1="6" x2="6" y2="18" stroke="white" stroke-width="2"/>
            <line x1="6" y1="6" x2="18" y2="18" stroke="white" stroke-width="2"/>
          </svg>
        </button>
      `;
      
      preview.querySelector('.remove-media').addEventListener('click', () => {
        removeMedia(file.name);
        preview.remove();
      });

      mediaPreview.appendChild(preview);
    };

    reader.readAsDataURL(file);
  }

  function removeMedia(fileName) {
    selectedFiles = selectedFiles.filter(f => f.name !== fileName);
    validateForm();
  }

  // Ubicación
  locationBtn?.addEventListener('click', () => {
    locationInput.classList.toggle('hidden');
  });

  locationText?.addEventListener('input', (e) => {
    selectedLocation = e.target.value;
  });

  removeLocationBtn?.addEventListener('click', () => {
    locationInput.classList.add('hidden');
    locationText.value = '';
    selectedLocation = '';
  });

  // Etiquetas
  tagsBtn?.addEventListener('click', () => {
    tagsInput.classList.toggle('hidden');
  });

  tagText?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && e.target.value.trim()) {
      e.preventDefault();
      const tag = e.target.value.trim();
      
      if (selectedTags.length >= 10) {
        showToast('Máximo 10 etiquetas', 'error');
        return;
      }

      if (!selectedTags.includes(tag)) {
        selectedTags.push(tag);
        addTagChip(tag);
        e.target.value = '';
      }
    }
  });

  function addTagChip(tag) {
    const chip = document.createElement('span');
    chip.className = 'tag-chip';
    chip.innerHTML = `
      #${tag}
      <button class="remove-tag" data-tag="${tag}">×</button>
    `;
    
    chip.querySelector('.remove-tag').addEventListener('click', () => {
      selectedTags = selectedTags.filter(t => t !== tag);
      chip.remove();
    });

    tagsContainer.appendChild(chip);
  }

  // Publicar
  publishBtn?.addEventListener('click', async () => {
    publishBtn.disabled = true;
    publishBtn.innerHTML = `
      <svg class="spinner" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="10" opacity="0.25"/>
        <path d="M12 2a10 10 0 0110 10" opacity="0.75"/>
      </svg>
      Publicando...
    `;

    try {
      const postData = {
        caption: captionInput.value.trim(),
        images: selectedFiles,
        location: selectedLocation,
        tags: selectedTags
      };

      const result = await createPost(postData);
      
      showToast('¡Publicación creada con éxito!', 'success');
      closeModal();
      
      // Recargar el feed
      setTimeout(() => {
        window.location.reload();
      }, 1000);

    } catch (error) {
      console.error('Error al publicar:', error);
      showToast(error.message || 'Error al crear publicación', 'error');
      
      publishBtn.disabled = false;
      publishBtn.innerHTML = `
        <svg viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="22" y1="2" x2="11" y2="13"/>
          <polygon points="22 2 15 22 11 13 2 9 22 2"/>
        </svg>
        Publicar
      `;
    }
  });

  // Event listeners
  closeBtn?.addEventListener('click', closeModal);
  cancelBtn?.addEventListener('click', closeModal);

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });

  function showToast(message, type) {
    const event = new CustomEvent('show-toast', {
      detail: { message, type }
    });
    document.dispatchEvent(event);
  }

  // Escuchar evento global para abrir el modal
  window.openPostModal = openModal;
</script>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    padding: 20px;
    animation: fadeIn 0.3s ease;
  }

  .modal-overlay.hidden {
    display: none;
  }

  .modal-container {
    background: white;
    border-radius: 16px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 600px;
    width: 100%;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    animation: slideUp 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(50px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .modal-header {
    padding: 20px 24px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .modal-title {
    font-size: 20px;
    font-weight: 700;
    color: #2d2d2d;
  }

  .modal-close {
    background: none;
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #6b7280;
    transition: all 0.2s;
  }

  .modal-close:hover {
    background: #f3f4f6;
    color: #2d2d2d;
  }

  .modal-body {
    padding: 24px;
    overflow-y: auto;
    flex: 1;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 20px;
  }

  .modal-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #667BC6;
  }

  .user-details {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .username {
    font-weight: 600;
    font-size: 15px;
    color: #2d2d2d;
  }

  .privacy-select {
    background: #f3f4f6;
    border: 1px solid #e5e7eb;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 13px;
    cursor: pointer;
    outline: none;
  }

  .post-input-wrapper {
    position: relative;
    margin-bottom: 16px;
  }

  .post-textarea {
    width: 100%;
    min-height: 150px;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 16px;
    font-size: 15px;
    font-family: inherit;
    resize: vertical;
    outline: none;
    transition: all 0.2s;
  }

  .post-textarea:focus {
    border-color: #667BC6;
    box-shadow: 0 0 0 3px rgba(102, 123, 198, 0.1);
  }

  .char-counter {
    position: absolute;
    bottom: 12px;
    right: 12px;
    font-size: 12px;
    color: #6b7280;
  }

  .media-preview {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 12px;
    margin-bottom: 16px;
  }

  .media-item {
    position: relative;
    aspect-ratio: 1;
    border-radius: 8px;
    overflow: hidden;
    background: #f3f4f6;
  }

  .media-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .remove-media {
    position: absolute;
    top: 6px;
    right: 6px;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.7);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
  }

  .remove-media:hover {
    background: rgba(239, 68, 68, 0.9);
    transform: scale(1.1);
  }

  .post-actions-bar {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    margin-bottom: 16px;
  }

  .action-btn {
    background: #f3f4f6;
    border: 1px solid #e5e7eb;
    padding: 12px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 600;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.2s;
  }

  .action-btn:hover {
    background: white;
    border-color: #667BC6;
    color: #667BC6;
  }

  .location-input,
  .tags-input {
    margin-bottom: 16px;
    padding: 12px;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }

  .location-input {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .location-field,
  .tag-field {
    flex: 1;
    background: white;
    border: 1px solid #e5e7eb;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 14px;
    outline: none;
  }

  .location-field:focus,
  .tag-field:focus {
    border-color: #667BC6;
  }

  .remove-location {
    background: none;
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    font-size: 24px;
    color: #6b7280;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .remove-location:hover {
    background: #e5e7eb;
    color: #2d2d2d;
  }

  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 8px;
  }

  .tag-chip {
    background: #667BC6;
    color: white;
    padding: 6px 12px;
    border-radius: 16px;
    font-size: 13px;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 6px;
  }

  .remove-tag {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
    line-height: 1;
    padding: 0;
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .remove-tag:hover {
    opacity: 0.8;
  }

  .modal-footer {
    padding: 16px 24px;
    border-top: 1px solid #e5e7eb;
    display: flex;
    justify-content: flex-end;
    gap: 12px;
  }

  .btn-cancel {
    background: none;
    border: 1px solid #e5e7eb;
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 600;
    font-size: 14px;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-cancel:hover {
    background: #f3f4f6;
    color: #2d2d2d;
  }

  .btn-publish {
    background: linear-gradient(135deg, #667BC6 0%, #DA7297 100%);
    border: none;
    padding: 10px 24px;
    border-radius: 8px;
    font-weight: 600;
    font-size: 14px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
  }

  .btn-publish:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(102, 123, 198, 0.3);
  }

  .btn-publish:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .spinner {
    animation: rotate 1s linear infinite;
  }

  @keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .hidden {
    display: none;
  }

  @media (max-width: 640px) {
    .modal-container {
      max-height: 100vh;
      border-radius: 0;
    }

    .modal-body {
      padding: 16px;
    }

    .post-actions-bar {
      grid-template-columns: 1fr;
    }

    .action-btn span {
      display: inline;
    }
  }
</style>